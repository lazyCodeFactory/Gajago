package com.ssocio.sharing.dao.admin;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 주문관리 DAO
 * 주문관리 DAO
 * @author S.B.LEE
 * @version
 * @since 2015. 7. 10. 오후 6:06:29
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 10.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
@Component
public class AdminOrderDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminOrderDao.class);
	
	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//	 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//	 -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionAdmin")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * 주문 관리
	 * 판매 상품 리스트 총 카운트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 05
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListSaleOrdCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListSaleOrdCnt Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectListSaleOrdCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleOrdCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 판매 주문 조회
	 * 그룹 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 05
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrdGroup(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSaleOrdGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListSaleOrdGroup", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleOrdGroup DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 판매 주문 조회
	 * 그룹 상세 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 05
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrdProduct(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListSaleOrdProduct Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListSaleOrdProduct", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleOrdProduct DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 판매 주문 조회 excel 다운로드
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 05
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrdExcel(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSaleOrdExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListSaleOrdExcel", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleOrdExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 판매 주문 상세
	 * 판매 주문 상세 그룹 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 05
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectSaleDetailGroupList(Map<String, Object> inParam) throws Exception {
		logger.info("selectSaleDetailGroupList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectSaleDetailGroupList", inParam);
		} catch (Exception e) {
			logger.error("selectSaleDetailGroupList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 판매 주문 상세
	 * 판매 주문 상세 그룹 상품 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 05
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectSaleDetailGroupProductList(Map<String, Object> inParam) throws Exception {
		logger.info("selectSaleDetailGroupProductList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectSaleDetailGroupProductList", inParam);
		} catch (Exception e) {
			logger.error("selectSaleDetailGroupProductList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 판매 주문 상세
	 * 주문상품/옵션 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 06
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectSaleDetailProductOptionList(Map<String, Object> inParam) throws Exception {
		logger.info("selectSaleDetailProductOptionList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectSaleDetailProductOptionList", inParam);
		} catch (Exception e) {
			logger.error("selectSaleDetailProductOptionList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 판매 주문 상세 - 주문정보
	 * 주문정보
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 06
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Object selectSaleOrdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectSaleOrdInfo Start");
		Map<String, Object> result = null;
		try {
			result =  sqlSession.selectOne("adminOrderMapper.selectSaleOrdInfo", inParam);
		} catch (Exception e) {
			logger.error("selectSaleOrdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 판매 주문 상세 - 배송지 정보
	 * 배송지 정보
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 06
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Object selectSaleOrdDlvInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectSaleOrdDlvInfo Start");
		Map<String, Object> result = null;
		try {
			result =  sqlSession.selectOne("adminOrderMapper.selectSaleOrdDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("selectSaleOrdDlvInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 상품 배송지 정보 등록/수정
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 09
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertOrdDlv(Map<String, Object> inParam) throws Exception {
		logger.info("insertOrdDlv Start");
		int count = 0;
		try {
			count =  sqlSession.insert("adminOrderMapper.insertOrdDlv", inParam);
		} catch (Exception e) {
			logger.error("insertOrdDlv DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 주문 메모 저장
	 * 주문 메모 저장
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 09
	 * @author Y.S.KIM
	 * @비고
	 * </pre>
	 */
	public int updateAdminMemo(Map<String, Object> inParam) throws Exception {
		logger.info("updateAdminMemo start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.update("adminOrderMapper.updateAdminMemo", inParam);
		} catch (Exception e) {
			logger.error("updateAdminMemo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 주문취소 - 단일,복합 상품 취소 구분 획득
	 * </pre>
	 */
	public Map<String, Object> selectSaleAdminOrderCancelGroupInfo(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("adminOrderMapper.selectSaleAdminOrderCancelGroupInfo",inParam);
	}
	
	/**
	 * <pre>
	 * 결제취소 - 상품 결제 기본 정보
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 02
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectDefaultProductSaleCancelInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectDefaultProductSaleCancelInfo Start");
		Map<String, Object> productInfo = null;
		try {
			productInfo =  sqlSession.selectOne("adminOrderMapper.selectDefaultProductSaleCancelInfo", inParam);
		} catch (Exception e) {
			logger.error("selectDefaultProductSaleCancelInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return productInfo;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 택배사 정보 조회 팝업
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectDlvInfomation(Map<String, Object> inParam) throws Exception {
		logger.info("selectDlvInfomation Start");
		Map<String, Object> list = new HashMap<String, Object>();
		try {
			list =  sqlSession.selectOne("adminOrderMapper.selectDlvInfomation", inParam);
		} catch (Exception e) {
			logger.error("selectDlvInfomation DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 택배 추적
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListDlvState(Map<String, Object> inParam) throws Exception {
		logger.info("selectListDlvState Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListDlvState", inParam);
		} catch (Exception e) {
			logger.error("selectListDlvState DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 배송 업체 URL 링크 팝업
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public String selectDlvCompanyURL(Map<String, Object> inParam) throws Exception {
		logger.info("selectDlvCompanyURL Start");
		String result = "";
		try {
			result =  sqlSession.selectOne("adminOrderMapper.selectDlvCompanyURL", inParam);
		} catch (Exception e) {
			logger.error("selectDlvCompanyURL DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 배송 업체 운송장 정보 입력 - 주문
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertDlvInvcNumber(Map<String, Object> inParam) throws Exception {
		logger.info("insertDlvInvcNumber Start");
		int result = 0;
		try {
			result = sqlSession.insert("adminOrderMapper.insertDlvInvcNumber", inParam);
		} catch (Exception e) {
			logger.error("insertDlvInvcNumber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 교환,반품 주문관리 
	 * 운송장 번호, 배송완료 시간 업데이트  처리
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 12. 07
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateDlvChgInvcInfo(Map<String, Object> inParam) throws Exception {
		logger.info("updateDlvChgInvcInfo Start");
		int result = 0;
		try {
			result = sqlSession.update("adminOrderMapper.updateDlvChgInvcInfo", inParam);
		} catch (Exception e) {
			logger.error("updateDlvChgInvcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 운송장 번호, 배송완료 시간 업데이트  처리
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 12. 07
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateDlvInvcInfo(Map<String, Object> inParam) throws Exception {
		logger.info("updateDlvInvcInfo Start");
		int result = 0;
		try {
			result = sqlSession.update("adminOrderMapper.updateDlvInvcInfo", inParam);
		} catch (Exception e) {
			logger.error("updateDlvInvcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 배송완료 입력 처리
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 12. 07
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertDlvHistory(Map<String, Object> inParam) throws Exception {
		logger.info("insertDlvHistory Start");
		int result = 0;
		try {
			result = sqlSession.insert("adminOrderMapper.insertDlvHistory", inParam);
		} catch (Exception e) {
			logger.error("insertDlvHistory DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 배송 업체 운송장 정보 입력 - 교환,반품
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertDlvChgInvcNumber(Map<String, Object> inParam) throws Exception {
		logger.info("insertDlvChgInvcNumber Start");
		int result = 0;
		try {
			result = sqlSession.insert("adminOrderMapper.insertDlvChgInvcNumber", inParam);
		} catch (Exception e) {
			logger.error("insertDlvChgInvcNumber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 반품 카운트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListTakeBackOrdCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectListTakeBackOrdCnt Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectListTakeBackOrdCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListTakeBackOrdCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 반품신청 그룹 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListTakeBackGroup(Map<String, Object> inParam) throws Exception {
		logger.info("selectListTakeBackGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListTakeBackGroup", inParam);
		} catch (Exception e) {
			logger.error("selectListTakeBackGroup DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 반품신청 그룹 상세 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListTakeBackGroupList(Map<String, Object> inParam) throws Exception {
		logger.info("selectListTakeBackGroupList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListTakeBackGroupList", inParam);
		} catch (Exception e) {
			logger.error("selectListTakeBackGroupList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 반품,교환 상품정보 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectOrderDetailProductList(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderDetailProductList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectOrderDetailProductList", inParam);
		} catch (Exception e) {
			logger.error("selectOrderDetailProductList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 교환 상품정보 카운트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListExcOrdCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectListExcOrdCnt Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectListExcOrdCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListExcOrdCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리
	 * 교환신청 그룹 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 11
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleExcGroup(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSaleExcGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListSaleExcGroup", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleExcGroup DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리
	 * 교환신청 그룹 상세 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 11
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleExcGroupList(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSaleExcGroupList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListSaleExcGroupList", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleExcGroupList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 취소 카운트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListCancelOrderCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectListCancelOrderCnt Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectListCancelOrderCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListCancelOrderCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 취소 그룹 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> sselectListCancelOrderGroup(Map<String, Object> inParam) throws Exception {
		logger.info("sselectListCancelOrderGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.sselectListCancelOrderGroup", inParam);
		} catch (Exception e) {
			logger.error("sselectListCancelOrderGroup DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 취소 그룹 상세 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 10
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListCancelOrderGroupList(Map<String, Object> inParam) throws Exception {
		logger.info("selectListCancelOrderGroupList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListCancelOrderGroupList", inParam);
		} catch (Exception e) {
			logger.error("selectListCancelOrderGroupList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 취소 상품 리스트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 13
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectOrderDetailCancelProductList(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderDetailCancelProductList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectOrderDetailCancelProductList", inParam);
		} catch (Exception e) {
			logger.error("selectOrderDetailCancelProductList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 휴대폰결제 : 환불계좌 RFND_CD 생성 
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 17
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public String createRfndCode() throws Exception {
		return sqlSession.selectOne("adminOrderMapper.createRfndCode");
	}
	
	/**
	 * <pre>
	 * 휴대폰결제 : 환불계좌 입력
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 12
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertRefund(Map<String, Object> inParam) throws Exception {
		logger.info("insertRefund Start");
		int count = 0;
		try {
			count =  sqlSession.insert("adminOrderMapper.insertRefund", inParam);
		} catch (Exception e) {
			logger.error("insertRefund DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 휴대폰결제 : 환불계좌 상품 입력
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 17
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertRefundProduct(Map<String, Object> inParam) throws Exception {
		logger.info("insertRefundProduct Start");
		int count = 0;
		try {
			count =  sqlSession.insert("adminOrderMapper.insertRefundProduct", inParam);
		} catch (Exception e) {
			logger.error("insertRefundProduct DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리
	 * 판매 교환 excel 다운로드
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 18
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.service.seller
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrdExcExcel(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSaleOrdExcExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListSaleOrdExcExcel", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleOrdExcExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리
	 * 판매 반품 excel 다운로드
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 18
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.service.seller
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrdTakeBackExcel(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSaleOrdTakeBackExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListSaleOrdTakeBackExcel", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleOrdTakeBackExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리
	 * 판매 취소 excel 다운로드
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 18
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.service.seller
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrdCancelExcel(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSaleOrdCancelExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListSaleOrdCancelExcel", inParam);
		} catch (Exception e) {
			logger.error("selectListSaleOrdCancelExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리
	 * 주문 취소 조회 카운트 수
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 11
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListCnclOrdCount(Map<String, Object> inParam) throws Exception {
		logger.info("selectListCnclOrdCount Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectListCnclOrdCount", inParam);
		} catch (Exception e) {
			logger.error("selectListCnclOrdCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	/**
	 * <pre>
	 * 주문 관리
	 * 주문 취소
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 23. 오후 5:39:39
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertOrdCanl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertOrdCanl Start");
		int count = 0;
		try {
			count =  sqlSession.insert("adminOrderMapper.insertOrdCanl", inParam);
		} catch (Exception e) {
			logger.error("insertOrdCanl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 주문상태변경
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 16. 오전 12:40:51
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateOrderProdStat(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateOrderProdStat Start");
		int count = 0;
		try {
			count =  sqlSession.update("adminOrderMapper.updateOrderProdStat", inParam);
		} catch (Exception e) {
			logger.error("updateOrderProdStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	public int updateExcStat(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateExcStat Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("adminOrderMapper.updateExcStat", inParam);
		} catch (Exception e) {
			logger.error("updateExcStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	public int updateExcDlv(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateExcDlv Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("adminOrderMapper.updateExcDlv", inParam);
		} catch (Exception e) {
			logger.error("updateExcDlv DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	
	/**
	 * <pre>
	 * 주문 취소 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 4. 오후 11:38:52
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrdCncl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListOrdCncl Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListOrdCncl", inParam);
		} catch (Exception e) {
			logger.error("selectListCncl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/*========================================================================================================*/
	
	/**
	 * <pre>
	 * 판매 주문 리스트 총카운트
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 8:03:06
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListOrderCount(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListOrderCount Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectListOrderCount", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 판매주문리스트
	 * 판매주문내역리스트를 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 10. 오후 6:08:04
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrder(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListOrder Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListOrder", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문리스트 주문현황 건수 조회
	 * 주문리스트 주문현황 건수을 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 14. 오전 11:22:33
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectOrdStatCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectOrdStatCnt Start");
		Map<String, Object> statCnt = null;
		try {
			statCnt =  sqlSession.selectOne("adminOrderMapper.selectOrdStatCnt", inParam);
		} catch (Exception e) {
			logger.error("selectOrdStatCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return statCnt;
	}
	
	/**
	 * <pre>
	 * 택배사 정보 전체 조회
	 * 택배사 정보 전체 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 14. 오후 2:19:33
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectListDlv(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListDlv Start");
		Map<String, Object> statCnt = null;
		try {
			statCnt =  sqlSession.selectOne("adminOrderMapper.selectListDlv", inParam);
		} catch (Exception e) {
			logger.error("selectListDlv DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return statCnt;
	}
	
	/**
	 * <pre>
	 * 상품 SEQ 번호 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 4:34:31
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public String selectProdSeq(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectProdSeq Start");
		String prodSeq = "";
		try {
			prodSeq =  sqlSession.selectOne("adminOrderMapper.selectProdSeq", inParam);
		} catch (Exception e) {
			logger.error("selectProdSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return prodSeq;
	}
	
	public int selectProdCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectProdCnt Start");
		int cnt = 0;
		try {
			cnt =  sqlSession.selectOne("adminOrderMapper.selectProdCnt", inParam);
		} catch (Exception e) {
			logger.error("selectProdCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}
	
	/**
	 * <pre>
	 * 배송 일괄 등록
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 6:22:08
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertListDlv(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertListDlv Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminOrderMapper.insertListDlv", inParam);
		} catch (Exception e) {
			logger.error("selectProdSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 주문 리스트 엑셀조회
	 * 주문 리스트를 엑셀조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 13. 오후 9:17:12
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrdExcel(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListOrdExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListOrdExcel", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문상세내역 리스트 조회
	 * 주문상세내역 리스트을 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 13. 오후 9:19:39
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectOrderDtl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectOrderDtl Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectOrderDtl", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문결제 상세정보 조회
	 * 주문결제 상세정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 14. 오후 4:40:28
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectOrdSetlDtl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectOrdSetlDtl Start");
		Map<String, Object> setl = null;
		try {
			setl =  sqlSession.selectOne("adminOrderMapper.selectOrdSetlDtl", inParam);
		} catch (Exception e) {
			logger.error("selectOrdSetlDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return setl;
	}
	
	/**
	 * <pre>
	 * 주문자 정보 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 29. 오후 6:32:41
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectOrdMberInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectOrdMberInfo Start");
		Map<String, Object> setl = null;
		try {
			setl =  sqlSession.selectOne("adminOrderMapper.selectOrdMberInfo", inParam);
		} catch (Exception e) {
			logger.error("selectOrdMberInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return setl;
	}
	
	
	
	/**
	 * <pre>
	 * 주문 처리 상태 변경
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 22. 오후 3:55:08
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateOrderProcStat(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateOrderProcStat Start");
		int count = 0;
		try {
			count =  sqlSession.update("adminOrderMapper.updateOrderProcStat", inParam);
		} catch (Exception e) {
			logger.error("updateOrderProcStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 선택 상품 취소
	 * 설명
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 24. 오후 2:19:00
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateOrdCncl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateOrdCncl Start");
		int count = 0;
		try {
			count =  sqlSession.update("adminOrderMapper.updateOrdCncl", inParam);
			System.out.println(count);
		} catch (Exception e) {
			logger.error("updateOrdCncl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 취소 사유 작업
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 24. 오후 2:25:08
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertOrdCncl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertOrdCncl Start");
		int count = 0;
		try {
			count =  sqlSession.insert("adminOrderMapper.insertOrdCncl", inParam);
		} catch (Exception e) {
			logger.error("insertOrdCncl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 주문 상품 운송장 등록
	 * 주문 상품 운송장을 등록합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 16. 오후 1:44:00
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertOrderShipping(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertOrderShipping Start");
		int count = 0;
		try {
			count =  sqlSession.insert("adminOrderMapper.insertOrderShipping", inParam);
		} catch (Exception e) {
			logger.error("insertOrderShipping DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	
	
	/**
	 * <pre>
	 * 교환/반품 신청 조회 ROW 총카운트수
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 29. 오후 7:52:42
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListRfndCount(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListRfndCount Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectListRfndCount", inParam);
		} catch (Exception e) {
			logger.error("selectListRfndCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 교환/반품 신청 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 29. 오후 7:17:09
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListRfnd(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListRfnd Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListRfnd", inParam);
		} catch (Exception e) {
			logger.error("selectListRfnd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 교환/반품 신청 현항 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오전 12:27:50
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectRfndStatCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRfndStatCnt Start");
		Map<String, Object> statCnt = null;
		try {
			statCnt =  sqlSession.selectOne("adminOrderMapper.selectRfndStatCnt", inParam);
		} catch (Exception e) {
			logger.error("selectRfndStatCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return statCnt;
	}
	
	
	/**
	 * <pre>
	 * 교환/반품 주문 정보 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 2:25:48
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectRfndOrdInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRfndOrdInfo Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("adminOrderMapper.selectRfndOrdInfo", inParam);
		} catch (Exception e) {
			logger.error("selectRfndOrdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * <pre>
	 * 교환/반품 출고 내역
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 3. 오후 2:23:06
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectRfndInvcInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRfndInvcInfo Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectRfndInvcInfo", inParam);
		} catch (Exception e) {
			logger.error("selectRfndInvcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 교환/반품 신청 정보
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 3:47:32
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectRfndInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRfndInfo Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("adminOrderMapper.selectRfndInfo", inParam);
		} catch (Exception e) {
			logger.error("selectRfndInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * <pre>
	 * 교환/반품 신청 이력 조회
	 * 설명
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 3. 오후 6:07:26
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListHist(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListHist Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListHist", inParam);
		} catch (Exception e) {
			logger.error("selectListHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 교환/반품 상품 배송지 정보 변경 (주소정보)
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 3. 오후 6:08:52
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateRfndDtl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateRfndDtl Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("adminOrderMapper.updateRfndDtl", inParam);
		} catch (Exception e) {
			logger.error("updateRfndDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 교환/반품 상품 운송장번호등록
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 4. 오후 3:02:26
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertInvc(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertInvc Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("adminOrderMapper.insertInvc", inParam);
		} catch (Exception e) {
			logger.error("insertInvc DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 교환/반품 상품 처리 상태 변경
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 4. 오후 4:00:31
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateProcStat(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateProcStat Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("adminOrderMapper.updateProcStat", inParam);
		} catch (Exception e) {
			logger.error("updateProcStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 배송상태변경
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 4. 오후 4:21:35
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateInvcProcStat(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateInvcProcStat Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("adminOrderMapper.updateInvcProcStat", inParam);
		} catch (Exception e) {
			logger.error("updateInvcProcStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 교환/반품 상품 배송지 정보 변경 (택배사정보)
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 3. 오후 6:13:12
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateInvc(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateInvc Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("adminOrderMapper.updateInvc", inParam);
		} catch (Exception e) {
			logger.error("updateInvc DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 교환/반품 신청 이력 저장
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 3. 오후 6:39:16
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertRfndHist(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertRfndHist Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("adminOrderMapper.insertRfndHist", inParam);
		} catch (Exception e) {
			logger.error("insertRfndHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 주문 취소 조회 카운트 수
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 4. 오후 11:42:22
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListCnclCount(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListCnclCount Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectListCnclCount", inParam);
		} catch (Exception e) {
			logger.error("selectListCnclCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 주문 취소 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 4. 오후 11:38:52
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListCncl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListCncl Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListCncl", inParam);
		} catch (Exception e) {
			logger.error("selectListCncl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 주문 취소 상세
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 5. 오후 1:53:24
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectCnclDtl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCnclDtl Start");
		Map<String, Object> outParam = null;
		try {
			outParam =  sqlSession.selectOne("adminOrderMapper.selectCnclDtl", inParam);
		} catch (Exception e) {
			logger.error("selectCnclDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	
	
	
	
	
	
	/*==================================================================================================================================================*/
	//판매 주문 관리
	
	/**
	 * <pre>
	 * 판매 주문내역 총건수
	 * 판매 주문내역 총건수를 조회 합니다.
	 * @param paramDto
	 * @return int
	 * @throws Exception 
	 * @date 2015. 10. 13. 오전 5:26:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public int selectListOrderSellTotCnt (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListOrderSellTotCnt Start");
		int count = 0;
		try {
			count =  sqlSession.selectOne("adminOrderMapper.selectListOrderSellTotCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderSellTotCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 판매 주문내역 목록조회
	 * 판매 주문내역 목록을 조회합니다.
	 * @param paramDto
	 * @return hashmap
	 * @throws Exception 
	 * @date 2015. 10. 13. 오전 5:28:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderSell (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListOrderSell Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListOrderSell", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderSell DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/*==================================================================================================================================================*/
	

	
	
	/*==================================================================================================================================================*/
	//나눔 주문 관리
	
	/**
	 * <pre>
	 * 나눔내역 총건수
	 * 나눔내역 총건수를 조회 합니다.
	 * @param paramDto
	 * @return int
	 * @throws Exception 
	 * @date 2015. 10. 6. 오후 7:58:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public int selectFreeShareTotCnt (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectFreeShareTotCnt Start");
		int count = 0;
		try {
			count =  sqlSession.selectOne("adminOrderMapper.selectFreeShareTotCnt", inParam);
		} catch (Exception e) {
			logger.error("selectFreeShareTotCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 나눔내역 목록조회
	 * 나눔내역 목록을 조회합니다.
	 * @param paramDto
	 * @return hashmap
	 * @throws Exception 
	 * @date 2015. 10. 6. 오후 7:58:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListFreeShare (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListFreeShare Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListFreeShare", inParam);
		} catch (Exception e) {
			logger.error("selectListFreeShare DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 나눔내역 엑셀다운로드 조회
	 * @param paramDto
	 * @return hashmap
	 * @throws Exception 
	 * @date 2015. 10. 12. 오후 9:58:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListFreeShareExcel (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListFreeShareExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListFreeShareExcel", inParam);
		} catch (Exception e) {
			logger.error("selectListFreeShareExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 나눔내역 상세조회
	 * 나눔상세내역을 조회합니다. - 대기중
	 * @param paramDto
	 * @return hashmap
	 * @throws Exception 
	 * @date 2015. 10. 7. 오후 2:20:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectFreeShareReqDtl (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectFreeShareReqDtl Start");
		Map<String, Object> map = null;
		try {
			map = sqlSession.selectOne("adminOrderMapper.selectFreeShareReqDtl", inParam);
		} catch (Exception e) {
			logger.error("selectFreeShareReqDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * <pre>
	 * 나눔 신청정보 총건수
	 * 나눔 신청정보 총건수를 조회 합니다.
	 * @param paramDto
	 * @return int
	 * @throws Exception 
	 * @date 2015. 10. 6. 오후 7:58:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public int selectListFreeShareReqCnt (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListFreeShareReqCnt Start");
		int count = 0;
		try {
			count =  sqlSession.selectOne("adminOrderMapper.selectListFreeShareReqCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListFreeShareReqCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}
	
	/**
	 * <pre>
	 * 나눔 신청내역 목록조회
	 * 나눔 신청내역 목록을 조회합니다.
	 * @param paramDto
	 * @return hashmap
	 * @throws Exception 
	 * @date 2015. 10. 6. 오후 7:58:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListFreeShareReq (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListFreeShareReq Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminOrderMapper.selectListFreeShareReq", inParam);
		} catch (Exception e) {
			logger.error("selectListFreeShareReq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	
	
	
	public Map<String, Object> selectProdStat(Map<String, Object> inParam) throws Exception {
		logger.info("updateFreeShareReq start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("adminOrderMapper.selectProdStat", inParam);
		} catch (Exception e) {
			logger.error("selectProdStat DB Error : " + e.toString());
			e.printStackTrace();
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	
	
	
	/**
	 * <pre>
	 * 나눔상품 신청정보 상태변경
	 * 나눔상품 신청정보 상태변경
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 8
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateFreeShareReq(Map<String, Object> inParam) throws Exception {
		logger.info("updateFreeShareReq start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.update("adminOrderMapper.updateFreeShareReq", inParam);
		} catch (Exception e) {
			logger.error("updateFreeShareReq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 상품 상태변경
	 * 상품 상태변경
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 8
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateProdStatCd(Map<String, Object> inParam) throws Exception {
		logger.info("updateProdStatCd start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.update("adminOrderMapper.updateProdStatCd", inParam);
		} catch (Exception e) {
			logger.error("updateProdStatCd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 나눔신청 정보 조회
	 * 나눔신청 정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 8
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectProdSubmitInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectProdSubmitInfo start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("adminOrderMapper.selectProdSubmitInfo", inParam);
		} catch (Exception e) {
			logger.error("selectProdSubmitInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * <pre>
	 * 주문정보 생성
	 * 주문정보 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 8
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public String insertOrdInfo(Map<String, Object> inParam) throws Exception{
		logger.info("insertOrdInfo start");
		try {
			sqlSession.insert("adminOrderMapper.insertOrdInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return StringUtil.nvl((String)inParam.get("ORD_CD"));
	}
	
	/**
	 * <pre>
	 * 주문 배송지정보 생성
	 * 주문 배송지정보 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 8
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int insertOrdDlvInfo(Map<String, Object> inParam) throws Exception {
		logger.info("insertOrdDlvInfo start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.insert("adminOrderMapper.insertOrdDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdDlvInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 주문 상품정보 생성
	 * 주문 상품정보 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 9
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int insertOrdProdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("insertOrdProdInfo start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.insert("adminOrderMapper.insertOrdProdInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 나눔내역 상세조회
	 * 나눔상세내역을 조회합니다. - 대기중
	 * @param paramDto
	 * @return hashmap
	 * @throws Exception 
	 * @date 2015. 10. 9. 오후 3:43:07
	 * @author Kang
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectFreeShareConfDtl (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectFreeShareConfDtl Start");
		Map<String, Object> map = null;
		try {
			map = sqlSession.selectOne("adminOrderMapper.selectFreeShareConfDtl", inParam);
		} catch (Exception e) {
			logger.error("selectFreeShareConfDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	
	/**
	 * <pre>
	 * 배송지정보 변경
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 10
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateDlvInfo(Map<String, Object> inParam) throws Exception {
		logger.info("updateDlvInfo start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.update("adminOrderMapper.updateDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("updateDlvInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 운송장정보 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 12
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int insertInvcInfo(Map<String, Object> inParam) throws Exception {
		logger.info("insertInvcInfo start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.insert("adminOrderMapper.insertInvcInfo", inParam);
		} catch (Exception e) {
			logger.error("insertInvcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 배송완료
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 12
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateInvcInfo(Map<String, Object> inParam) throws Exception {
		logger.info("updateInvcInfo start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.update("adminOrderMapper.updateInvcInfo", inParam);
		} catch (Exception e) {
			logger.error("updateInvcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 주문번호 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 12
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public String selectOrdInfoSeq(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrdInfoSeq Start");
		String result = "";
		try {
			result =  sqlSession.selectOne("adminOrderMapper.selectOrdInfoSeq", inParam);
		} catch (Exception e) {
			logger.error("selectOrdInfoSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/*==================================================================================================================================================*/
}
