package com.ssocio.sharing.dao.web;

import java.util.Map;
import javax.annotation.Resource;
import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import com.ssocio.sharing.service.web.WebTestServiceImpl;

@Component
public class MobileMyMiniDao {

	private static final Logger logger = LoggerFactory.getLogger(WebTestServiceImpl.class);

	@Resource(name="sqlSessionMobile")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	/**
	 * 미니샵 조회
	 * @throws Exception
	 */
	public Map<String, Object> getMyMiniInfo(Map<String, Object> inParam) throws Exception {
		Map<String, Object> selectBrandList = null;
		try {
			selectBrandList =  sqlSession.selectOne("MobileMyMiniMapper.getMyMiniInfo",inParam);
		} catch (Exception e) {
			logger.error("selectSaleProdCnt DB Error : " + e.toString());
			throw new Exception("DB ERROR");
		}
		return selectBrandList;
	}
	/**
	 * 미니샵 조회 > 이름변경화면 폼
	 * @throws Exception
	 */
	public Map<String, Object> renameMyMiniInfo(Map<String, Object> inParam) throws Exception {
		Map<String, Object> selectBrandList = null;
		try {
			selectBrandList =  sqlSession.selectOne("MobileMyMiniMapper.renameMyMiniInfo",inParam);
		} catch (Exception e) {
			logger.error("selectSaleProdCnt DB Error : " + e.toString());
			throw new Exception("DB ERROR");
		}
		return selectBrandList;
	}

	/**
	 * 미니샵 조회 > 주소변경화면 폼
	 * @throws Exception
	 */
	public Map<String, Object> reAddressMyMiniInfo(Map<String, Object> inParam) throws Exception {
		Map<String, Object> selectBrandList = null;
		try {
			selectBrandList =  sqlSession.selectOne("MobileMyMiniMapper.reAddressMyMiniInfo",inParam);
		} catch (Exception e) {
			logger.error("selectSaleProdCnt DB Error : " + e.toString());
			throw new Exception("DB ERROR");
		}
		return selectBrandList;
	}

	/**
	 * 미니샵 이름 수정 처리
	 */
	public Integer renameProc(Map<String, Object> inParam) {
		logger.debug("미니샵 이름 수정 처리  - renameProc:"+inParam);
		return sqlSession.update("MobileMyMiniMapper.renameProc",inParam);
	}

	/**
	 * 미니샵 주소 수정 처리
	 */
	public Integer readdressProc(Map<String, Object> inParam) {
		logger.debug("미니샵 주소 수정 처리  - readdressProc:"+inParam);
		return sqlSession.update("MobileMyMiniMapper.readdressProc",inParam);
	}

	/*
	 * 파일 정보 저장
	 */
	public Integer regImg(Map<String, Object> fileInfo) throws Exception {
		logger.debug("파일 정보 저장  - regImg:"+fileInfo);
		return sqlSession.insert("MobileMyMiniMapper.regImg", fileInfo);
	}
	/**
	 * 미니샵 이미지 수정
	 */
	public Integer updateMyMiniImg(Map<String, Object> inParam) {
		logger.debug("미니샵 이미지 수정  - updateMyPageImg:"+inParam);
		return sqlSession.update("MobileMyMiniMapper.updateMyMiniImg",inParam);
	}

	/**
	 * 미니샵 백그라운드 이미지 수정
	 */
	public void updateAppMyBackGroundMiniImg(Map<String, Object> inParam) {
		logger.debug("미니샵 이미지 수정  - updateAppMyBackGroundMiniImg:"+inParam);
		sqlSession.update("MobileMyMiniMapper.updateAppMyBackGroundMiniImg",inParam);
	}

	/**
	 * 미니샵 백그라운드 이미지 수정
	 */
	public void updateAppMyProfileMiniImg(Map<String, Object> inParam) {
		logger.debug("미니샵 이미지 수정  - updateAppMyProfileMiniImg:"+inParam);
		sqlSession.update("MobileMyMiniMapper.updateAppMyProfileMiniImg",inParam);
	}

	/**
	 * 미니샵 이미지 삭제
	 */
	public void deleteImg(Map<String, Object> inParam) {
		logger.debug("미니샵 이미지 수정  - deleteImg:"+inParam);
		sqlSession.update("MobileMyMiniMapper.deleteImg",inParam);
	}



	/**
	 * 미니샵 주소변경 > 미니샵 사용중인주소 건수
	 * @throws Exception
	 */
	public int countExistMiniShopPath(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count =  sqlSession.selectOne("MobileMyMiniMapper.countExistMiniShopPath",inParam);
		} catch (Exception e) {
			logger.error("selectSaleProdCnt DB Error : " + e.toString());
			throw new Exception("DB ERROR");
		}
		return count;
	}
}
