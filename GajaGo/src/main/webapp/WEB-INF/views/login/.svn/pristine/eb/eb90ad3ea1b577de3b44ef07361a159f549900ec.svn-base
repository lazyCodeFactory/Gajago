package com.ssocio.sharing.dao.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;
import com.ssocio.sharing.vo.web.WebSession;

@Component
public class AppCommonDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AppCommonDao.class);
	private static final String appVerSionChk  = "appCommonMapper.selectAppVersionChk";
	private static final String selectlistNoticePopup  = "appCommonMapper.selectlistNoticePopup";
	private static final String getUerdefaultinfo  = "appCommonMapper.getUerdefaultinfo";
	private static final String getUerDtlinfo = "appCommonMapper.getUerDtlinfo";
	private static final String selectAgreeChk = "appCommonMapper.selectAgreeChk";
	private static final String selectListPlanTemplateContent = "appCommonMapper.selectListPlanTemplateContent";
	private static final String introSessionSet = "appCommonMapper.introSessionSet";
	private static final String selectProductUseReport = "appCommonMapper.selectProductUseReport";
	private static final String selectProdinfo = "appCommonMapper.selectProdinfo";
	private static final String insertFile = "appCommonMapper.insertFile";
	private static final String updateUserImgReg = "appCommonMapper.updateUserImgReg";
	private static final String deleteFileinfo = "appCommonMapper.deleteFileinfo";
	private static final String deleteALLMyLately = "appCommonMapper.deleteALLMyLately";
	private static final String selectJoinType = "appCommonMapper.selectJoinType";
	private static final String selectSiteDefault = "appCommonMapper.selectSiteDefault";
	private static final String selectMypushInfo = "appCommonMapper.selectMypushInfo";
	private static final String updateMypushInfo = "appCommonMapper.updateMypushInfo";
	private static final String selectMypageSharInfo = "appCommonMapper.selectMypageSharInfo";
	private static final String selectgetTagList = "appCommonMapper.selectgetTagList";
	private static final String selectInterest = "appCommonMapper.selectInterest";
	private static final String getMyminiShopInfo = "appCommonMapper.getMyminiShopInfo";
	private static final String deleteMiniShopFileinfo = "appCommonMapper.deleteMiniShopFileinfo";
	private static final String updateMyMiniShopImgReg = "appCommonMapper.updateMyMiniShopImgReg";
	private static final String SelectCntMyNewCar = "appCommonMapper.SelectCntMyNewCar";
	private static final String SelectCheckAlarm = "appCommonMapper.SelectCheckAlarm";
	private static final String insertAlrmReg = "appCommonMapper.insertAlrmReg";
	private static final String updateAlarmReg = "appCommonMapper.updateAlarmReg";
	private static final String updateMberConDevReg = "appCommonMapper.updateMberConDevReg";
	private static final String selectListHitCtry = "appCommonMapper.selectListHitCtry";
	private static final String selectCtryinfo = "appCommonMapper.selectCtryinfo";
	private static final String updatePushinfo = "appCommonMapper.updatePushinfo";
	private static final String chkPushinfo = "appCommonMapper.ChkPushinfo";
	private static final String selectInterestTotCnt = "appCommonMapper.selectInterestTotCnt";

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	public Map<String, Object> selectAppVersionChk(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectAppVersionChk Start");
		Map<String, Object> versionInfo = null;
		try {
			versionInfo =  sqlSession.selectOne(appVerSionChk, inParam);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return versionInfo;
	}

	public Object selectlistNoticePopup(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectlistNoticePopup Start");
		List<Map<String, Object>> versionInfo = null;
		try {
			versionInfo =  sqlSession.selectList(selectlistNoticePopup);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return versionInfo;
	}

	public Map<String, Object> getUerdefaultinfo(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("getUerdefaultinfo Start");
		Map<String, Object> userinfo =  new HashMap<String,Object>();
		try {
			userinfo =  sqlSession.selectOne(getUerdefaultinfo, inParam);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return userinfo;
	}

	public Map<String, Object> getUerDtlinfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectAppVersionChk Start");
		Map<String, Object> userinfo =  new HashMap<String,Object>();
		try {
			userinfo =  sqlSession.selectOne(getUerDtlinfo, inParam);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return userinfo;
	}

	public List<Map<String, Object>> selectAgreeChk(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		 List<Map<String, Object>> outDataList =  new ArrayList<Map<String, Object>>();
		logger.info("selectAgreeChk Start");
		try {
			outDataList =  sqlSession.selectList(selectAgreeChk, inParam);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outDataList;
	}

	public List<Map<String, Object>> selectListPlanTemplateContent(String planCd) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		HashMap<String, Object> inParam = new HashMap<String, Object>();
		inParam.put("PLAN_CD", planCd);
		 List<Map<String, Object>> outDataList =  new ArrayList<Map<String, Object>>();
		logger.info("selectListPlanTemplateContent Start");
		try {
			outDataList =  sqlSession.selectList(selectListPlanTemplateContent, inParam);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outDataList;


	}

	public WebSession introSessionSet(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("introSessionSet Start");
		return  sqlSession.selectOne(introSessionSet, inParam);
		// TODO Auto-generated method stub

	}

	/**
	 * <pre>
	 * 기획전 관련 상품 가져오기
	 * 기획전 관련 상품 가져오기
	 * @param prodcd
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 3. 오후 3:22:11
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.dao.web
	 * @비고
	 *
	 * </pre>
	*/
	public Map<String, Object> selectProductUseReport(String seq) throws Exception {
		/// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		 Map<String, Object> outData =  new HashMap<String, Object>();
		logger.info("selectProductUseReport Start");
		try {
			outData =  sqlSession.selectOne(selectProductUseReport, seq);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outData;
	}

	public Map<String, Object> selectProdinfo(String seq)throws Exception {
		/// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		 Map<String, Object> outData =  new HashMap<String, Object>();
		logger.info("selectProdinfo Start");
		try {
			outData =  sqlSession.selectOne(selectProdinfo, seq);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outData;
	}

	public String insertFile(Map<String, Object> fileInfo) throws Exception {
		/// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		 Map<String, Object> outData =  new HashMap<String, Object>();
		logger.info("selectProdinfo Start");
		try {
			sqlSession.insert(insertFile, fileInfo);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return StringUtil.nvl(fileInfo.get("FILE_SEQ").toString());
	}

	public int updateUserImgReg(Map<String, Object> inParam) throws Exception {
		return sqlSession.insert(updateUserImgReg, inParam);
	}

	public int deleteFileinfo(Map<String, Object> inParam) throws Exception {
		return sqlSession.update(deleteFileinfo, inParam);
	}

	public int deleteALLMyLately(Map<String, Object> inParam) {
		return sqlSession.delete(deleteALLMyLately, inParam);
	}

	public  List<Map<String, Object>> selectJoinType() throws Exception {
		return sqlSession.selectList(selectJoinType);
	}

	/**
	 * <pre>
	 * 이미지 사이즈 디폴트 경로 가져오기
	 * 이미지 사이즈 디폴트 경로 가져오기
	 * @return
	 * @exception
	 * @date 2015. 9. 16. 오후 2:04:07
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.dao.web
	 * @비고
	 *
	 * </pre>
	*/
	public String selectSiteDefault() throws Exception{
		return sqlSession.selectOne(selectSiteDefault);
	}

	public Map<String, Object> selectMypushInfo(Map<String, Object> bodyParam) throws Exception{
		return sqlSession.selectOne(selectMypushInfo,bodyParam);
	}

	public int updateMypushInfo(Map<String, Object> bodyParam) {
		return sqlSession.update(updateMypushInfo,bodyParam);
	}

	public Object selectMypageSharInfo(String inParam)throws Exception {
		return sqlSession.selectList(selectMypageSharInfo,inParam);
	}

	public List<Map<String, Object>> selectgetTagList(Map<String, Object> inParam) {
		return sqlSession.selectList(selectgetTagList,inParam);
	}

	public List<Map<String, Object>> selectInterest(Map<String, Object> inParam) {
		return sqlSession.selectList(selectInterest,inParam);
	}

	public Map<String, Object> getMyminiShopInfo(Map<String, Object> inParam)throws Exception {
		return sqlSession.selectOne(getMyminiShopInfo,inParam);
	}

	public int deleteMiniShopFileinfo(Map<String, Object> inParam) {
		return sqlSession.update(deleteMiniShopFileinfo,inParam);
	}

	public int updateMyMiniShopImgReg(Map<String, Object> inParam) {
		logger.debug("updateMyMiniShopImgReg-->");
		return sqlSession.update(updateMyMiniShopImgReg,inParam);
	}

	public int SelectCntMyNewCar(Map<String, Object> inParam) {
		return sqlSession.selectOne(SelectCntMyNewCar,inParam);
	}

	public void insertAlarmReg(Map<String, Object> inParam) {
		int Cnt = sqlSession.selectOne(SelectCheckAlarm,inParam);
		if(Cnt > 0){
			Cnt = 1;
		}else{
			Cnt = sqlSession.insert(insertAlrmReg,inParam);
		}


	}

	public int updateAlarmReg(Map<String, Object> inParam) throws Exception{
		return sqlSession.update(updateAlarmReg,inParam);
	}

	public int updateMberConDevReg(Map<String, Object> inParam) {
		return sqlSession.update(updateMberConDevReg,inParam);
	}

	public List<Map<String, Object>> selectListHitCtry() {
		return sqlSession.selectList(selectListHitCtry);
	}

	public Map<String, Object> selectCtryinfo(String guBun) {
		return sqlSession.selectOne(selectCtryinfo,guBun);
	}

	public int updatePushinfo(Map<String, Object> inParam) {
		// TODO Auto-generated method stub
		int cnt = sqlSession.selectOne(chkPushinfo,inParam);
		if(cnt > 0){
			cnt = sqlSession.update(updatePushinfo,inParam);
		}
		return cnt;
	}

//	public int selectInterestTotCnt(Map<String, Object> inParam) {
//		return sqlSession.selectOne(selectInterestTotCnt,inParam);
//	}
	
	public List<Map<String, Object>> popularSharing(Map<String, Object> inParam) {
		
		List<Map<String, Object>> rtn  = new ArrayList<Map<String, Object>>();
		inParam = new HashMap<String, Object>();
		int minDate = 0;
		
		while ( true ) {
			inParam.put("minDate", minDate);
			
			logger.info("######## minDate : " + minDate);
			rtn = sqlSession.selectList("appCommonMapper.popularSharing", inParam);
			if ( rtn != null && rtn.size() > 5) {
				break;
			} 
			if (minDate > 30) {
				break;
			}
			
			minDate = minDate + 3;
		}
		
		return rtn;
	}
	
	public List<Map<String, Object>> popularSharingDetail(Map<String, Object> inParam) {
		return sqlSession.selectList("appCommonMapper.popularSharingDetail", inParam);
	}
	
	public List<Map<String, Object>> latestSharingList(Map<String, Object> inParam) {
		return sqlSession.selectList("appCommonMapper.latestSharingList", inParam);
	}
	
	public List<Map<String, Object>> checkWishedList(Map<String, Object> inParam) {
		return sqlSession.selectList("appCommonMapper.checkWishedList", inParam);
	}
}
