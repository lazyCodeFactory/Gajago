package com.ssocio.sharing.dao.admin;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 상품관리 Dao
 * 상품관리 Dao
 * @author Y.I.Chun
 * @version 
 * @since 2015. 7. 6. 오후 6:41:07
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 7. 6.   |    Y.I.Chun  | 신규
 * @Todo
 * </pre>
 */
@Component
public class AdminProdDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminProdDao.class);
	
	@Resource(name="sqlSessionAdmin")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * 상품리스트 조회
	 * 상품리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectProdList (Map<String, Object> inParam) throws Exception{
		logger.info("selectProdList Start");
		return sqlSession.selectList("adminProdMapper.selectProdList", inParam);
	}
	
	/**
	 * <pre>
	 * 상품리스트 조회(Excel용)
	 * 상품리스트정보를 조회 합니다.(Excel용)
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectProdListExcel (Map<String, Object> inParam) throws Exception{
		logger.info("selectProdListExcel Start");
		return sqlSession.selectList("adminProdMapper.selectProdListExcel", inParam);
	}
	
	/**
	 * <pre>
	 * 상품검색건수 조회
	 * 상품검색건수를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public int selectProdSearchCnt(Map<String, Object> inParam) throws Exception{
		logger.info("selectProdSearchCnt Start");
		return sqlSession.selectOne("adminProdMapper.selectProdSearchCnt", inParam);
	}
	
	/**
	 * <pre>
	 * 상품 타입,상태별 갯수 조회
	 * 상품 타입,상태별 건수를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public Map<String, Object> selectProdCnt (Map<String, Object> inParam) throws Exception{
		logger.info("selectProdCnt Start");
		return sqlSession.selectOne("adminProdMapper.selectProdCnt", inParam);
	}
	
	/**
	 * <pre>
	 * 상품조회
	 * 상품정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public Map<String, Object> selectProdInfo(Map<String, Object> inParam) throws Exception{
		logger.info("selectProdInfo Start");
		return sqlSession.selectOne("adminProdMapper.selectProdInfo", inParam);
	}
	
	/**
	 * <pre>
	 * 상품등록
	 * 상품정보를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public String insertProdInfo (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdInfo Start");
		sqlSession.insert("adminProdMapper.insertProdInfo", inParam);
		return (String)inParam.get("PROD_CODE");
	}
	
	/**
	 * <pre>
	 * 상품수정
	 * 상품정보를 수정 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void updateProdInfo (Map<String, Object> inParam) throws Exception{
		logger.info("updateProdInfo Start");
		
		sqlSession.update("adminProdMapper.updateProdInfo", inParam);
	}
	
	/**
	 * <pre>
	 * 상품조회
	 * 상품정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 9. 4. 오후 6:41:07
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectProdOption(Map<String, Object> inParam) throws Exception{
		logger.info("selectProdInfo Start");
		return sqlSession.selectList("adminProdMapper.selectProdOption", inParam);
	}
	
	/**
	 * <pre>
	 * 상품이미지 조회
	 * 상품이미지 정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public Map<String, Object> selectProdImg(Map<String, Object> inParam) throws Exception{
		logger.info("selectProdImg Start");
		
		Map<String, Object> imgInfoMap =  new HashMap<String, Object>();
		String[] imgGbList = {"11", "12", "13", "14", "15", "16", "17", "21", "22", "23", "24", "25", "26", "27", "20"};
		List<Map<String, Object>> imgInfoList = sqlSession.selectList("adminProdMapper.selectProdImg", inParam);
		for(String gbCd : imgGbList){
			for(Map<String, Object> imgInfo : imgInfoList){
				if(gbCd.equals(imgInfo.get("PROD_IMG_GB_CD"))){
					imgInfoMap.put("imgGbCd"+gbCd, imgInfo);
					break;
				}
			}
		}
		return imgInfoMap;
	}
	
	/**
	 * <pre>
	 * 상품이미지 등록
	 * 상품이미지를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void insertProdImg (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdImg Start");
		sqlSession.insert("adminProdMapper.insertProdImg", inParam);
	}
	
	/**
	 * <pre>
	 * 상품이미지 수정
	 * 상품이미지를 수정 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void updateProdImg (Map<String, Object> inParam) throws Exception{
		logger.info("updateProdImg Start");
		sqlSession.insert("adminProdMapper.updateProdImg", inParam);
	}
	
	
	/**
	 * <pre>
	 * 셰어링정보 등록
	 * 셰어링정보를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void insertProdSharing (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdSharing Start");
		sqlSession.insert("adminProdMapper.insertProdSharing", inParam);
	}
	
	/**
	 * <pre>
	 * 셰어링정보 수정
	 * 셰어링정보를 수정 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void updateProdSharing (Map<String, Object> inParam) throws Exception{
		logger.info("updateProdSharing Start");
		sqlSession.insert("adminProdMapper.updateProdSharing", inParam);
	}
	
	/**
	 * <pre>
	 * 상품정보고시 등록
	 * 상품정보고시를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void insertProdItem (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdItem Start");
		sqlSession.insert("adminProdMapper.insertProdItem", inParam);
	}
	
	/**
	 * <pre>
	 * 상품정보고시 삭제
	 * 상품정보고시를 삭제 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void deleteProdItem (Map<String, Object> inParam) throws Exception{
		logger.info("deleteProdItem Start");
		sqlSession.insert("adminProdMapper.deleteProdItem", inParam);
	}
	
	/**
	 * <pre>
	 * 판매자리스트 조회
	 * 판매자리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectSellerList(Map<String, Object> inParam) throws Exception{
		logger.info("selectSellerList Start");
		return sqlSession.selectList("adminProdMapper.selectSellerList", inParam);
	}
	
	/**
	 * <pre>
	 * 정보고시리스트 조회
	 * 정보고시리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectItemList() throws Exception{
		logger.info("selectItemList Start");
		return sqlSession.selectList("adminProdMapper.selectItemList");
	}
	
	/**
	 * <pre>
	 * 정보고시상세리스트 조회
	 * 정보고시상세 리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectItemDtlList(Map<String, Object> inParam) throws Exception{
		logger.info("selectItemDtlList Start");
		return sqlSession.selectList("adminProdMapper.selectItemDtlList", inParam);
	}
	
	/**
	 * <pre>
	 * 출하지리스트 조회
	 * 출하지 리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectShipmentList(Map<String, Object> inParam) throws Exception{
		logger.info("selectShipmentList Start");
		return sqlSession.selectList("adminProdMapper.selectShipmentList", inParam);
	}
	
	/**
	 * <pre>
	 * 출하지리스트 등록
	 * 출하지 리스트정보를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public String insertShipment(Map<String, Object> inParam) throws Exception{
		logger.info("insertShipmentList Start");
		sqlSession.selectList("adminProdMapper.insertShipment", inParam);
		return (String)inParam.get("GRP_PROD_SEQ");
	}
	
	/**
	 * <pre>
	 * 상품 출하지맵핑 리스트 조회
	 * 상품 출하지맵핑  리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectShipmentProdMap(Map<String, Object> inParam) throws Exception{
		logger.info("selectShipmentProdMap Start");
		return sqlSession.selectList("adminProdMapper.selectShipmentProdMap", inParam);
	}
	
	/**
	 * <pre>
	 * 상품 출하지맵핑 등록
	 * 상품 출하지맵핑정보를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void insertShipmentProdMap(Map<String, Object> inParam) throws Exception{
		logger.info("insertShipmentList Start");
		sqlSession.selectList("adminProdMapper.insertShipmentProdMap", inParam);
	}
	
	/**
	 * <pre>
	 * 상품 출하지맵핑 삭제
	 * 상품 출하지맵핑정보를 삭제 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void deleteShipmentProdMap(Map<String, Object> inParam) throws Exception{
		logger.info("deleteShipmentProdMap Start");
		sqlSession.selectList("adminProdMapper.deleteShipmentProdMap", inParam);
	}
	
	/**
	 * <pre>
	 * 출하지리스트 수정
	 * 출하지 리스트정보를 수정 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void updateShipment(Map<String, Object> inParam) throws Exception{
		logger.info("updateShipmentList Start");
		sqlSession.selectList("adminProdMapper.updateShipment", inParam);
	}
	
	/**
	 * <pre>
	 * 도서산간 추가배송비 등록
	 * 도서산간 추가배송비정보를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void insertExtLandPrice(Map<String, Object> inParam) throws Exception{
		logger.info("insertExtLandPrice Start");
		sqlSession.selectList("adminProdMapper.insertExtLandPrice", inParam);
	}
	
	/**
	 * <pre>
	 * 도서산간 추가배송비 삭제
	 * 도서산간 추가배송비정보를 삭제 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void deleteExtLandPrice(Map<String, Object> inParam) throws Exception{
		logger.info("deleteExtLandPrice Start");
		sqlSession.selectList("adminProdMapper.deleteExtLandPrice", inParam);
	}
	
	/**
	 * <pre>
	 * 상품 옵션 등록
	 * 상품의 옵션을 저장합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public void insertProdOption(Map<String, Object> inParam) throws Exception{
		logger.info("insertProdOption Start");
		sqlSession.selectList("adminProdMapper.insertProdOption", inParam);
	}
	
	/**
	 * <pre>
	 * 상품 옵션 삭제
	 * 상품의 옵션을 삭제합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public void deleteProdOption(Map<String, Object> inParam) throws Exception{
		logger.info("deleteProdOption Start");
		sqlSession.selectList("adminProdMapper.deleteProdOption", inParam);
	}
	
	
	/**
	 * <pre>
	 * 출하지 상세  조회
	 * 출하지에 등록된 상품 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectShipmentProdList(Map<String, Object> inParam) throws Exception{
		logger.info("selectShipmentList Start");
		return sqlSession.selectList("adminProdMapper.selectShipmentProdList", inParam);
	}
	
	/**
	 * <pre>
	 * 출하지 등록 상품 삭제
	 * 출하지에 등록된 상품을 삭제 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public void deleteShipmentProd(Map<String, Object> inParam) throws Exception{
		logger.info("deleteShipmentProd Start");
		sqlSession.selectList("adminProdMapper.deleteShipmentProd", inParam);
	}
	
	/**
	 * <pre>
	 * 출하지에 등록할 상품  조회
	 * 출하지에 등록할 상품 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectAddShipmentProdList(Map<String, Object> inParam) throws Exception{
		logger.info("selectAddShipmentProdList Start");
		return sqlSession.selectList("adminProdMapper.selectAddShipmentProdList", inParam);
	}
	
	/**
	 * <pre>
	 * 풀하지 등록 상품 삭제
	 * 출하지에 등록된 상품을 삭제 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public void insetShipmentProdMap(Map<String, Object> inParam) throws Exception{
		logger.info("insetShipmentProdMap Start");
		sqlSession.selectList("adminProdMapper.insetShipmentProdMap", inParam);
	}
	
	/**
	 * <pre>
	 * 상품 옵션
	 * 상품 옵션 정보 테이블에 삽입합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public String insertProdOpInfo (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdOpInfo Start");
		sqlSession.insert("adminProdMapper.insertProdOpInfo", inParam);
		String optGrpCd = String.valueOf(inParam.get("OPT_GRP_CD"));
		System.out.println(" ::::::::::::::::::::::::::::::::::optGrpCd: "+optGrpCd);
		return optGrpCd;
	}
	
	/**
	 * <pre>
	 * 상품 옵션
	 * 상품 옵션 정보 테이블에 삽입합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public String insertProdOp (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdInfo Start");
		sqlSession.insert("adminProdMapper.insertProdOp", inParam);
		String optCd = String.valueOf(inParam.get("OPT_CD"));
		return optCd;
	}
	
	/**
	 * <pre>
	 * 해당 상품의 옵션 정보 수정
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void updateProdOpInfo(Map<String, Object> inParam) throws Exception{
		logger.info("updateProdOpInfo Start");
		sqlSession.selectList("adminProdMapper.updateProdOpInfo", inParam);
	}

	/**
	 * <pre>
	 * 해당 상품의 옵션이 존재 하는지 여부 확인
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectProdOp (Map<String, Object> inParam) throws Exception{
		logger.info("selectProdOp Start");
		sqlSession.selectOne("adminProdMapper.selectProdOp", inParam);
		return sqlSession.selectList("adminProdMapper.selectProdOp", inParam);
	}
	
	/**
	 * <pre>
	 * 
	 * 상품의 옵션을 삭제한다..
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author SEKIM
	 * @비고
	 * 
	 * </pre>
	 */
	public void deleteProdOp(Map<String, Object> inParam) throws Exception{
		logger.info("deleteProdOp Start");
		sqlSession.update("adminProdMapper.deleteProdOp", inParam);
	}

	/**
	 * <pre>
	 * 
	 * 출하지 정보 가져오기
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author TAEHOKANG
	 * @비고
	 * 
	 * </pre>
	 */
	public Map<String, Object> selectGrpProfInfo(Map<String, Object> inParam) {
		// TODO Auto-generated method stub
		logger.info("selectGrpProfInfo Start");
		return sqlSession.selectOne("adminProdMapper.selectGrpProfInfo", inParam);
	 
	}

	/**
	 * <pre>
	 * 
	 * 옵션명 정보 가져오기
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author TAEHOKANG
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectProdOptionNm(Map<String, Object> inParam) {
		logger.info("selectProdOptionNm Start");
		return sqlSession.selectList("adminProdMapper.selectProdOptionNm",inParam);
	}

	/**
	 * <pre>
	 * 
	 * 옵션사용 안함
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author TAEHOKANG
	 * @비고
	 * 
	 * </pre>
	 */
	public void deleteProdOpInfo(Map<String, Object> paramDto) {
		// TODO Auto-generated method stub
		logger.info("deleteProdOpInfo Start");
		sqlSession.update("adminProdMapper.deleteProdOpInfo", paramDto);
	}

	/**
	 * <pre>
	 * 
	 * 옵션수정
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author TAEHOKANG
	 * @비고
	 * 
	 * </pre>
	 */
	public void updateProdOp(Map<String, Object> paramDto) {
		// TODO Auto-generated method stub
		logger.info("updateProdInfo Start");
		
		sqlSession.update("adminProdMapper.updateProdOp", paramDto);
	}

	/**
	 * <pre>
	 * 
	 * 기본출하지 N으로 변경
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author TAEHOKANG
	 * @비고
	 * 
	 * </pre>
	 */
	public void updateShipmentStatus(Map<String, Object> inParam) {
		// TODO Auto-generated method stub
		logger.info("updateShipmentStatus Start");
		
		sqlSession.update("adminProdMapper.updateShipmentStatus", inParam);
	}

	/**
	 * <pre>
	 * 렌탈상품일때 구매여부 조회하여 약관가능여부 체크
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public int selectCountProdInfo(Map<String, Object> inParam) {
		// TODO Auto-generated method stub
		logger.info("selectCountProdInfo Start");
		return sqlSession.selectOne("adminProdMapper.selectCountProdInfo", inParam);
	}

	/**
	 * <pre>
	 * 상품등록중 사용하지 않는 이미지 삭제
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public void deleteProdImg(Map<String, Object> imgParam) {
		// TODO Auto-generated method stub
		logger.info("deleteProdImg Start");
		sqlSession.delete("adminProdMapper.deleteProdImg", imgParam);
 
	}

	/**
	 * <pre>
	 * 상품옵션 사용갯수 조회
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public int selectOpUseCnt(Map<String, Object> inParam) {
		// TODO Auto-generated method stub
		logger.info("selectOpUseCnt Start");
		return sqlSession.selectOne("adminProdMapper.selectOpUseCnt", inParam);
	}

	/**
	 * <pre>
	 * 상품옵션 사용안함 처리
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public void updateProdOpUse(Map<String, Object> inParam) {
		// TODO Auto-generated method stub
		logger.info("updateProdOpUse Start");
		sqlSession.delete("adminProdMapper.updateProdOpUse", inParam);
	}

	/**
	 * <pre>
	 * 상품 등록 요청 리스트 카운트 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date
	 * @author arkim
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public int selectProdWantListCount(Map<String, Object> inParam)  throws Exception{
		logger.info("selectProdWantListCount Start");
		int count = 0;
		try {
			count =  sqlSession.selectOne("adminProdMapper.selectProdWantListCount", inParam);
		} catch (Exception e) {
			logger.error("selectProdWantListCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 상품 등록 요청 리스트 조회
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date
	 * @author arkim
	 * @see com.ssocio.sharing.service.admin
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectProdWantList (Map<String, Object> inParam) throws Exception{
		logger.info("selectProdWantList Start");
		return sqlSession.selectList("adminProdMapper.selectProdWantList", inParam);
	}

	/**
	 * <pre>
	 * 상품 등록 요청 건 처리 상태 변경
	 * 상품 등록 요청 건의 처리 상태를 변경 합니다. Y : 처리 완료
	 * @param inParam, wantSeq
	 * @return
	 * @throws Exception
	 * @date 
	 * @author arkim
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public void updateProdWantHandlingInfo(ModelMap mm) throws Exception{
		logger.info("updateProdWantHandlingInfo Start");		
		LoggerUtil.writeMap(mm);	
		try {
			  sqlSession.update("adminProdMapper.updateProdWantHandlingInfo",mm);
		} catch (Exception e) {
			logger.error("updateProdWantHandlingInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		
	}

}