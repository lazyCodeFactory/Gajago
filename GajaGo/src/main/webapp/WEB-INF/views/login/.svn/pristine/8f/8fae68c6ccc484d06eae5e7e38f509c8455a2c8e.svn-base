/**
 * 
 */
package com.ssocio.sharing.cmmn.seller.handler;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.handler.AbstractHandlerInterceptor;
import com.ssocio.sharing.cmmn.instance.cmmncode.CmmnCodeTableManager;
import com.ssocio.sharing.cmmn.instance.config.AppConfigManager;
import com.ssocio.sharing.cmmn.seller.util.SellerCommonUtil;
import com.ssocio.sharing.cmmn.service.CommonService;
import com.ssocio.sharing.service.seller.SellerLogService;

/**
 * <pre>
 *
 *
 * @author Administrator
 * @version
 * @since 2015. 6. 12.. 오후 7:58:34
 * @see
 * @History
 *  Date          |    author    | 변경내용  
 *  2015. 6. 12.  |    S.B.Lee   | 신규
 * @Todo
 * </pre>
 */
public class SellerControllerInterceptor extends AbstractHandlerInterceptor {

	
	/**
	 * 
	 */
	private static final long serialVersionUID = -7203284807070883543L;

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerControllerInterceptor.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	//@Resource(name = "synchrnService")
	@Autowired
	private CommonService commonService;
	
	@Autowired
	private SellerLogService sellerLogService;
	//  private AdminCategoryService adminCategoryService;

	//  public void setCommonService(CommonService commonService){
	//   this.commonService = commonService;
	//  }

	/**
	 * <pre>
	 * preHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 6. 12. 오후 4:28:11
	 * @author adrra
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#preHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

		try {
			
			// ----------------------------------------------------------------------
			// LOGIN VAL CHECK
			// ----------------------------------------------------------------------
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[isLogin]"+SellerCommonUtil.isLogin(request));
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");

			// ----------------------------------------------------------------------
			// Application Config설정파일 Load - application-config.xml
			// ----------------------------------------------------------------------
			AppConfigManager.getInstance(request);
			logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★ domain : " + AppConfigManager.getInstance().getConfig(AppConfigManager.AppConfigKeyDomain));

			// ----------------------------------------------------------------------
			// 공통코드 Instance Check & Create
			// ----------------------------------------------------------------------
			//CmmnCodeTableManager.getInstance(request);
			if (CmmnCodeTableManager.getInstance() == null) {
			logger.info("--------------------------------------------------");
			logger.info("CmmnCodeTableManager Instance Loading...");
			//logger.info("CmmnCodeTableManager.getInstance is null");

			commonService.setComCdInstanceInfo();
			} else {
				logger.info("--------------------------------------------------");
				logger.info("CmmnCodeTableManager Instance Already Loaded");
			}
			logger.info("--------------------------------------------------");

			// ----------------------------------------------------------------------
			// 로그인 체크
			// ----------------------------------------------------------------------
			if(!SellerCommonUtil.isLogin(request)){
				response.sendRedirect("/seller/login.do");
				return false;
			}

			//////////////////////////////
			logger.info("PV_SEQ: " +"");																					//NUMBER(16)                  NULL, 
			logger.info("IP: " +   AppConfigManager.getInstance().getConfig(AppConfigManager.AppConfigKeyDomain));			//VARCHAR2(15 BYTE)           NULL, 
			logger.info("SYS_IP: " +AppConfigManager.getInstance().getConfig(AppConfigManager.AppConfigKeyWasIp));			//VARCHAR2(15 BYTE)           NULL, 
			logger.info("ID: " +"");																						//VARCHAR2(50 BYTE)           NULL, 
			logger.info("REQ_URI: " + request.getRequestURI());            													//VARCHAR2(500 BYTE)          NULL, 
			logger.info("PARAM_VAL: " +"");																					//VARCHAR2(4000 BYTE)         NULL, 
			logger.info("HEADER_VAL: " +"");																				//VARCHAR2(4000 BYTE)         NULL, 
			/*
			logger.info("REGIST_MBER_SN: " +);																				//VARCHAR2(20 BYTE)           NULL, 
			logger.info("REGIST_DT: " +);																					//DATE                        NULL, 
			logger.info("UPDT_MBER_SN: " +);																				//VARCHAR2(20 BYTE)           NULL, 
			logger.info("UPDT_DT: " +);																						//DATE                        NULL
			*/
			logger.info("getContextPath: " + request.getContextPath());
			logger.info("getContentType: " + request.getContentType());
			logger.info("getLocalAddr: " + request.getLocalAddr());
			logger.info("getLocalName: " + request.getLocalName());
			logger.info("getSession: " + request.getSession());
			logger.info("getRequestURI: " + request.getRequestURI());
			logger.info("getRequestedSessionId: " + request.getRequestedSessionId());
			logger.info("getPathInfo: " + request.getPathInfo());
			logger.info("getRemoteAddr: " + request.getRemoteAddr());
			logger.info("getRemoteHost: " + request.getRemoteHost());
			logger.info("getHeaderNames: " + request.getHeaderNames());
			logger.info("getParameterNames: " + request.getParameterNames());

			Map<String, Object> paramDto = new HashMap();
//			sellerLogService.insertProcessLog(paramDto);
			////////////////////////////////////
		} catch (Exception e) {
			logger.error("BatchControllerInterceptor 오류 [" + e.toString() + "]");
			e.printStackTrace();
		}
		return true;
	}
	
	/**
	 * <pre>
	 * postHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param model
	 * @throws Exception 
	 * @exception 
	 * @date 2014. 8. 20. 오후 4:28:31
	 * @author adrra
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#postHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, org.springframework.web.servlet.ModelAndView)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView model) throws Exception {
		// TODO Auto-generated method stub
	}

	/**
	 * <pre>
	 * afterCompletion
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param exception
	 * @throws Exception 
	 * @exception 
	 * @date 2014. 8. 20. 오후 4:28:44
	 * @author adrra
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#afterCompletion(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, java.lang.Exception)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception) throws Exception {
		// TODO Auto-generated method stub
	}

	/**
	 * <pre>
	 * AfterContextPathUri반환
	 *  - request에서 가져옴
	 * @param request
	 * @return 
	 * @exception 
	 * @date 2014. 8. 6. 오전 10:43:38
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	public static String getAfterContextPathUri(HttpServletRequest request) {

		String requestUri             = "";
		String strAfterContextPathUri = "";
		
		requestUri = request.getRequestURI();   // ex) /gapping/web/web.apiTest
		logger.debug("requestUri          : " + requestUri);
		strAfterContextPathUri = requestUri.substring(request.getContextPath().length());
		//logger.debug("@@afterContextPathUri : " + strAfterContextPathUri);
		
		return strAfterContextPathUri;
	}
}
