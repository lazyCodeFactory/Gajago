package com.ssocio.sharing.service.seller;

import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.admin.util.FileUtil;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.dao.seller.SellerCommonDao;
import com.ssocio.sharing.dao.seller.SellerMyInfoDao;
import com.ssocio.sharing.vo.admin.PageNavigation;
import com.ssocio.sharing.vo.seller.SellerSession;

@Service
public class SellerMyInfoServiceImpl implements SellerMyInfoService {

	private static final Logger logger = LoggerFactory.getLogger(SellerMyInfoServiceImpl.class);

	@Resource(name="sellerMyInfoDao")
	private SellerMyInfoDao sellerMyInfoDao;

	@Resource(name="sellerCommonDao")
	private SellerCommonDao sellerCommonDao;

	/**
     * 회원정보 조회
	 */
	@Override
	public ModelMap getMyInfoInfo(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		try {

			mm.put("myInfoInfo", sellerMyInfoDao.getMyInfoInfo(inParam));
		}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mm;
	}
	/**
     * 핸드폰번호 변경 화면으로 이동.
	 */
	@Override
	public ModelMap getMyPhoneChangeForm(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		try {
			mm.put("myInfoInfo", sellerMyInfoDao.getMyPhoneChangeForm(inParam));
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**
     * 휴대폰 변경 처리
	 */
	@Override
	public ModelMap updateMyPhone(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ"	, mberSeq);
		Integer phoneStatus = 0;
		String msg = "";
		try {
			phoneStatus = sellerMyInfoDao.updateMyPhone(inParam);
			logger.debug("phoneStatus:"+phoneStatus);
			if(phoneStatus == null){
                msg = "휴대폰번호가 변경되었습니다.";
			}
            logger.debug("휴대폰번호을 변경 처리");
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
    /****************************************************************************
     * 계좌변경 *******************************************************************************
     * **************************************************************************************/
    /**
     * 계좌변경 화면으로 이동.
     */

	public ModelMap getMyAccountChangeForm(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		try {
			mm.put("myAccountInfo", sellerMyInfoDao.getMyAccountChangeForm(inParam));
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}

	/**
     * 계좌 변경 처리
	 */
	@Override
	public ModelMap updateMyAccount(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ"	, mberSeq);
		Integer acccountStatus = 0;
		String msg = "";
		try {
			acccountStatus = sellerMyInfoDao.updateMyAccount(inParam);
			logger.debug("acccountStatus:"+acccountStatus);
			if(acccountStatus == null){
                msg = "계좌번호가 변경되었습니다.";
			}
            logger.debug("계좌번호을 변경 처리");
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**
     * 비번변경 화면으로 이동.
	 */
	public ModelMap getMyPwChangeForm(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		try {
			mm.put("myAccountInfo", sellerMyInfoDao.getMyPwChangeForm(inParam));
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}

	/**
     * 비밀번호 변경 처리
	 */
	@Override
	public ModelMap saveMyPwChange(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ"	, mberSeq);
		inParam.put("MBER_EMAIL", user.getMBER_EMAIL());
		String msg = "";
		Integer phoneNmStatus = 0;
		try {

            logger.debug("인증번호 유효시간 처리");
			if("".equals(msg)){
                logger.debug("핸드폰 번호을 변경한다. ");
				phoneNmStatus = sellerMyInfoDao.saveMyPwChange(inParam);
				logger.debug("phoneNmStatus:"+phoneNmStatus);
				if(phoneNmStatus == null){
                    msg = "휴대폰번호가 변경되었습니다.";
				}
			}
            logger.debug("핸드폰 번호을 변경 처리");
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**
     * 이메일 수신여부 변경
	 */
	@Override
	public ModelMap changeRadioMail(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ"	, mberSeq);
		String msg = "";
		Integer msgStatus = 0;
		try {
			msgStatus = sellerMyInfoDao.changeRadioMail(inParam);
			logger.debug("msgStatus:"+msgStatus);
			if(msgStatus == null){
                msg = "이메일수신여부가 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**
     * SMS 수신여부 변경
	 */
	@Override
	public ModelMap changeRadioSMS(Map<String, Object> inParam, SellerSession user){
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
        // 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ"	, mberSeq);
		String msg = "";
		Integer msgStatus = 0;
		try {
			msgStatus = sellerMyInfoDao.changeRadioSMS(inParam);
			logger.debug("msgStatus:"+msgStatus);
			if(msgStatus == null){
                msg = "SMS수신여부가 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}

	@Override
	public ModelMap selectProdStats(Map<String, Object> inParam, SellerSession user) throws Exception  {
		ModelMap mm = new ModelMap();
		String mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		inParam.put("MBER_GB_CD", user.getMBER_GB_CD());

		try {
			mm.put("prodStats", sellerMyInfoDao.selectProdStats(inParam));
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}

	@Override
	public void updatePwChg(Map<String, Object> inParam, SellerSession user) throws Exception {

		String pass = CommonUtil.getEncPassword((String)inParam.get("MBER_PASS"));
		String mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		try {

			inParam.put("MBER_PASS", pass);

			LoggerUtil.writeMap(inParam);

			sellerMyInfoDao.updatePwChg(inParam);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return;

	}

	@Override
	public void updateMyInfo(Map<String, Object> inParam, SellerSession user) throws Exception {

		String pass = CommonUtil.getEncPassword((String)inParam.get("MBER_PASS"));
		String mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		try {

			inParam.put("MBER_PASS", pass);

			sellerMyInfoDao.updateMyInfo(inParam);
			sellerMyInfoDao.updateMberInfo(inParam);
			sellerMyInfoDao.updateMberDtlInfo(inParam);


            //가입시 포인트 지급
            //이력 확인

			int retSeller = sellerCommonDao.selectPointUseLogCnt(inParam);
			logger.debug("### updateMberPoint:"+retSeller);
			if(0 == retSeller){
				retSeller = sellerCommonDao.insertPoint(inParam);
				logger.debug("### updateMberPoint:"+retSeller);
				if(retSeller > 0){
					retSeller = sellerCommonDao.updateMberPoint(inParam);
					logger.debug("### updateMberPoint:"+retSeller);
				}
			}

		} catch (Exception e) {

			e.printStackTrace();
			throw e;
		}
		return;

	}

	/***
     * [2015-11-23] [ROCKANG] 판매 경고 조회 팝업
	 *
	 * */
	@Override
	public ModelMap selectSuspectBoard(Map<String, Object> inParam)throws Exception {



		String today = StringUtil.getCurrentDateFormat("yyyy-MM-dd");
		inParam.put("S_END_DATE", StringUtil.nvl((String)inParam.get("S_END_DATE"), today));
		inParam.put("S_START_DATE", StringUtil.nvl((String)inParam.get("S_START_DATE"), today));



		// TODO Auto-generated method stub
		ModelMap mm = new ModelMap();

        //검색총건수
		int rowTotal = sellerMyInfoDao.selectSuspectBoard(inParam);

        //페이지설정
		int nowPage = StringUtil.nvlInt((String)inParam.get("pageNo"), 1);
		//int rowCnt	= StringUtil.nvlInt((String)inParam.get("displayCnt"), CmmnCnst.ADM_LIST_SIZE);;
		int rowCnt	= 5;

		inParam.put("displayCnt", rowCnt);
		PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, rowCnt, CmmnCnst.ADM_BLOCK_SIZE);
		mm.put("PAGE_NO", nowPage);
		mm.put("pageNav", pageNav);
		inParam.put("START_ROW", pageNav.getStartRow());
		inParam.put("END_ROW", pageNav.getEndRow());
		inParam.put("totalPage", pageNav.getTotalPage());
		inParam.put("rowTotal", pageNav.getRowTotal());

//		inParam.put("regFromDate",StringUtil.nvl(String.valueOf(inParam.get("regFromDate")),""));
//		inParam.put("regToDate",StringUtil.nvl(String.valueOf(inParam.get("regToDate")),""));

		LoggerUtil.writeMap(inParam);
		mm.put("prodInfo", sellerMyInfoDao.totalStatInfo(inParam));		// 각 상태값별로 갯수 확인
		mm.put("prodList", sellerMyInfoDao.selectSuspectList(inParam));		// 판매자 신고이력 리스트


		logger.debug("inParam : " + inParam.toString());
		mm.put("params", inParam);

		LoggerUtil.writeMap(inParam);

		return mm;
	}



	/***
     * 판매자 신용점수 조회 팝업
	 *
	 * */
	@Override
	public ModelMap selectSellCredit(Map<String, Object> inParam)throws Exception {
		// TODO Auto-generated method stub
		ModelMap mm = new ModelMap();

        //검색총건수
		int rowTotal = sellerMyInfoDao.selectSellCredit(inParam);

        //페이지설정
		int nowPage = StringUtil.nvlInt((String)inParam.get("pageNo"), 1);
		int rowCnt	= StringUtil.nvlInt((String)inParam.get("displayCnt"), CmmnCnst.ADM_LIST_SIZE);;

		PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, rowCnt, CmmnCnst.ADM_BLOCK_SIZE);
		mm.put("PAGE_NO", nowPage);
		mm.put("pageNav", pageNav);
		inParam.put("START_ROW", pageNav.getStartRow());
		inParam.put("END_ROW", pageNav.getEndRow());
		inParam.put("totalPage", pageNav.getTotalPage());
		inParam.put("rowTotal", pageNav.getRowTotal());

		String today = StringUtil.getCurrentDateFormat("yyyy-MM-dd");
		inParam.put("regFromDate",StringUtil.nvl(String.valueOf(inParam.get("S_START_DATE")),today));
		inParam.put("regToDate",StringUtil.nvl(String.valueOf(inParam.get("S_END_DATE")),today));

		LoggerUtil.writeMap(inParam);
		mm.put("prodList", sellerMyInfoDao.selectSellCreditList(inParam));
		LoggerUtil.writeMap(mm);

		return mm;
	}



	/***
     * [2015-11-23][ROCOKANG] 판매자 신고 이력 조회 팝업
	 *
	 * */
	@Override
	public ModelMap selectSellWarning(Map<String, Object> inParam)throws Exception {
		// TODO Auto-generated method stub
		ModelMap mm = new ModelMap();

		String today = StringUtil.getCurrentDateFormat("yyyy-MM-dd");
		inParam.put("S_END_DATE", StringUtil.nvl((String)inParam.get("S_END_DATE"), today));
		inParam.put("S_START_DATE", StringUtil.nvl((String)inParam.get("S_START_DATE"), today));


		System.out.println("@#$!@%!#@q^$@^#%#$!$@" + inParam
				.get("MBER_SEQ"));
        //검색총건수
		int rowTotal = sellerMyInfoDao.selectSellWarning(inParam);

		System.out.println(" @#!@!$!@$!#@!#" + rowTotal);
        //페이지설정
		int nowPage = StringUtil.nvlInt((String)inParam.get("pageNo"), 1);
		int rowCnt	= StringUtil.nvlInt(  String.valueOf(inParam.get("displayCnt")), CmmnCnst.ADM_LIST_SIZE);

		PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, rowCnt, CmmnCnst.ADM_BLOCK_SIZE);
		mm.put("PAGE_NO", nowPage);
		mm.put("pageNav", pageNav);
		inParam.put("START_ROW", pageNav.getStartRow());
		inParam.put("END_ROW", pageNav.getEndRow());
		inParam.put("totalPage", pageNav.getTotalPage());
		inParam.put("rowTotal", pageNav.getRowTotal());

		inParam.put("regFromDate",StringUtil.nvl(String.valueOf(inParam.get("regFromDate")),""));
		inParam.put("regToDate",StringUtil.nvl(String.valueOf(inParam.get("regToDate")),""));
		LoggerUtil.writeMap(inParam);
		mm.put("prodList", sellerMyInfoDao.selectNewSellWarningList(inParam));
		mm.put("prodInfo", sellerMyInfoDao.selectSellWarningCnt(inParam));

		mm.put("params", inParam);
		return mm;
	}


	/**
     * 미니샵 중복확인
	 * @param inParam
	 * @return
	 * @throws Exception
	 */
	public int selectMiniShopCnt(Map<String, Object> inParam)throws Exception {
		ModelMap mm = new ModelMap();
		int cnt = 0;
		try{
			cnt = sellerMyInfoDao.selectMiniShopCnt(inParam);
		}catch(Exception e){
			e.printStackTrace();
		}


		return cnt;
	};

	@Override
	public int updateMyminiInfoReg(MultipartHttpServletRequest req,Map<String, Object> inParam) throws Exception {
		int cnt = 0;
		try{

			sellerMyInfoDao.updateMyminiInfoImgReg(inParam);

			MultipartFile mainImg = req.getFile("mainImg");//PC 리스트 이미지
			MultipartFile BackgrdImg = req.getFile("BackgrdImg");//모바일 리스트 이미지

			String mainImgfileSeq = null;
			String BackgrdImgfileSeq = null;
			if(mainImg != null && mainImg.getSize() > 0){
				Map<String, Object> fileInfo = FileUtil.saveMultipartFile(mainImg);//파일 저장
				mainImgfileSeq = sellerCommonDao.insertFile(fileInfo);
				inParam.put("MainfileSeq", mainImgfileSeq);
			}

			if(BackgrdImg != null && BackgrdImg.getSize() > 0){
				Map<String, Object> fileInfo = FileUtil.saveMultipartFile(BackgrdImg);//파일 저장
				BackgrdImgfileSeq = sellerCommonDao.insertFile(fileInfo);
				inParam.put("BackgrdfileSeq", BackgrdImgfileSeq);
			}

			cnt = sellerMyInfoDao.updateMyminiInfoReg(inParam);
			logger.info("Cnt :::::::::::::::::::::::::: " + cnt);
		}catch(Exception e){
			e.printStackTrace();
		}
		return cnt;
	}
}
