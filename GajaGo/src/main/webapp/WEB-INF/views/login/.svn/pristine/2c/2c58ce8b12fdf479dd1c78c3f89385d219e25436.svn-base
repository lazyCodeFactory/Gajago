/**<pre>
 * 1. Project Name : Gapping1.0
 * 2. Package Name : com.lottecard.mall.cmmn.instance.config
 * 3. File Name    : AppConfigManager.java
 * 4. Date         : 2014. 8. 26. 오후 3:19:30
 * 5. Author       : adrra
 * 6. Note         : 
 * </pre>
 */

package com.ssocio.sharing.cmmn.instance.config;

import java.net.InetAddress;
import java.net.NetworkInterface;
import java.util.Enumeration;
import javax.servlet.http.HttpServletRequest;
import org.apache.commons.configuration.XMLConfiguration;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.StringUtil;


/**
 * <pre>
 * ApplicationConfig 설정값 Instance
 *  1. src/main/resource/configuration/application-config.xml 에 설정값을 지정한다.
 *  2. commons-configuration.jar, commons-collections.jar, commons-lang-2.6.jar(2.6이상)
 *  
 * @author adrra
 * @version 
 * @since 2014. 8. 26. 오후 3:33:36
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2014. 8. 26.  |    adrra            | 신규 
 * @Todo
 * </pre>
 */
public class AppConfigManager {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AppConfigManager.class);
	
	// --------------------------------------------------------------------------
	// # 설정항목선언
	// - 항목추가될 때마다 아래  final 상수 추가할 것
	// --------------------------------------------------------------------------

	// config.xml경로(application-config.xml_full_path)
	private static  String  AppConfigPath           = "/configuration/application-config.xml"; // 시스템별로 각각 달리 설정되어있음

	// 접속 Domain (운영/개발 판단용)
	public static final   String  AppConfigKeyDomain            = "domain";
	public static final   String  AppConfigKeyDomainTest        = "domainTest";
	public static final   String  AppConfigKeyDomainLocal       = "domainLocal";
	
	// 접속 모바일 Domain
	public static final   String  AppConfigKeyDomainMobile           = "domainMobile";
	public static final   String  AppConfigKeyDomainMobileDev        = "domainMobileDev";
	public static final   String  AppConfigKeyDomainMobileLocal      = "domainMobileLocal";
	
	// IP Web (등록장비)
	public static final   String  AppConfigKeyWebIp             	= "webIp";
	public static final   String  AppConfigKeyWebIpTest         	= "webIpTest";
	public static final   String  AppConfigKeyWebIpLocal        	= "webIpLocal";
	
	// IP Was (등록장비)
	public static final   String  AppConfigKeyWasIp            		= "wasIp";
	public static final   String  AppConfigKeyWasIpTest        		= "wasIpTest";
	public static final   String  AppConfigKeyWasIpDev         		= "wasIpDev";
	public static final   String  AppConfigKeyWasIpLocal       		= "wasIpLocal";
	
	  // Port Was (등록장비)
	  public static final   String  AppConfigKeyWasPort        		= "wasPort";
	  public static final   String  AppConfigKeyWasPortTest        		= "wasPortTest";
	  public static final   String  AppConfigKeyWasPortDev     		= "wasPortDev";
	  public static final   String  AppConfigKeyWasPortLocal   		= "wasPortLocal";
	
	// WasApiPort (Jeus설정에 따라 포트는 동일할 수도 있음)
	public static final   String  AppConfigKeyWasMallPcPort     	= "wasMallPcPort";
	public static final   String  AppConfigKeyWasMallMobilePort 	= "wasMallMobilePort";
	public static final   String  AppConfigKeyWasSellerPort     	= "wasSellerPort";
	public static final   String  AppConfigKeyWasAdminPort      	= "wasAdminPort";
	public static final   String  AppConfigKeyWasBatchPort      	= "wasBatchPort";
	
	// Context
	public static final String  AppConfigKeyContext             	= "context";

	// uri
	public static final   String  AppConfigKeyUriCmmnCodeSync       = "uriCmmnCodeSync";
	  
	// Image Root Path
	public static final String  AppConfigKeyUploadRootPath         = "uploadRootPath";
	public static final String  AppConfigKeyUploadRootPathDev     = "uploadRootPathDev";
	public static final String  AppConfigKeyUploadRootPathLocal    = "uploadRootPathLocal";

	// Misc Root Path
	public static final String  AppConfigKeyUploadMiscRootPath         = "uploadMiscRootPath";
	public static final String  AppConfigKeyUploadMiscRootPathDev     = "uploadMiscRootPathDev";
	public static final String  AppConfigKeyUploadMiscRootPathLocal    = "uploadMiscRootPathLocal";

	// Image Url Path
	public static final String  AppConfigKeyUploadUrlPath         = "uploadUrlPath";
	public static final String  AppConfigKeyUploadUrlPathDev     = "uploadUrlPathDev";
	public static final String  AppConfigKeyUploadUrlPathLocal    = "uploadUrlPathLocal";
	
	// Batch Ip
	public static final String  AppConfigKeyBatchIp             = "batchIp";
	public static final String  AppConfigKeyBatchIpTest         = "batchIpTest";
	public static final String  AppConfigKeyBatchIpLocal        = "batchIpLocal";
	
	// --------------------------------------------------------------------------
	// Instance Define
	// --------------------------------------------------------------------------
	private static XMLConfiguration xmlConfig = null;
	private static AppConfigManager mInstance = null;
	private static String           systemSe  = "";
	private static String           systemIp  = "";
	private static String           uploadRootPath  = "";
	private static String           uploadUrlPath  = "";
	private static String 			uploadMiscRootPath = "";
	
	@SuppressWarnings ("static-access")
	public AppConfigManager() {
		this.loadAppConfig(this.AppConfigPath);
		this.checkSystemSe(null);
		this.checkUploadRootPath();
		this.checkUploadUrlPath();
		this.checkUploadMiscRootPath();
	}

	@SuppressWarnings ("static-access")
	public AppConfigManager(HttpServletRequest request) {
		this.loadAppConfig(this.AppConfigPath);
		this.checkSystemSe(request);
		this.checkUploadRootPath();
		this.checkUploadMiscRootPath();
		this.checkUploadUrlPath();
	}

	/**
	 * <pre>
	 * Instance 반환
	 * 
	 * @return 
	 * @exception 
	 * @date 2014. 8. 26. 오후 3:07:21
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	public static AppConfigManager getInstance() {
		logger.info("--------------------------------------------------");
		if (mInstance == null) {
			//logger.info("AppConfig is null");
			logger.info("AppConfig Instance Loading...");
			mInstance = new AppConfigManager();
		} else {
			//logger.debug("AppConfig Already Loaded");
			logger.info("AppConfig Instance Already Loaded");
		}
		logger.info("--------------------------------------------------");
		return mInstance;
	}

	/**
	 * <pre>
	 * Instance 반환
	 * 
	 * @return 
	 * @exception 
	 * @date 2014. 9. 18. 오전 10:54:48
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	public static AppConfigManager getInstance(HttpServletRequest request) {
		logger.info("--------------------------------------------------");
		
		if (request == null) {
			return getInstance();
		} else {
			if (mInstance == null) {
				//logger.info("AppConfig is null");
				logger.info("AppConfig Instance Loading...");
				mInstance = new AppConfigManager(request);
			} else {
				//logger.debug("AppConfig Already Loaded");
				logger.info("AppConfig Instance Already Loaded");
			}
		}
		logger.info("--------------------------------------------------");
		return mInstance;
	}

	/**
	 * <pre>
	 * configPath 지정 Instance 반환
	 * 
	 * @param configPath
	 * @return 
	 * @exception 
	 * @date 2014. 8. 26. 오후 3:31:29
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	public static AppConfigManager getInstance(String configPath) {
		AppConfigPath= configPath;
		return getInstance();
	}

	/**
	 * <pre>
	 * Config파일 읽기
	 * 
	 * @param contextPath 
	 * @exception 
	 * @date 2014. 8. 26. 오후 3:07:32
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	private void loadAppConfig (String contextPath) {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("loadAppConfig Start");

		// ------------------------------------------------------------------------
		// # 객체/변수 선언
		// ------------------------------------------------------------------------
		
		// ------------------------------------------------------------------------
		// # Biz Start
		// ------------------------------------------------------------------------
		try {
			xmlConfig = new XMLConfiguration(contextPath);
			if (xmlConfig == null) {
				logger.error("xmlConfig 정보 없음");
				// TODO 오류처리
			}
		} catch (Exception e) {
			logger.error("loadAppConfig error : " + e.toString());
			e.printStackTrace();
			// TODO 오류처리
		}
	}

	/**
	 * <pre>
	 * 시스템명 체크
	 *  - SystemIP체크하여 운영기/개발기/로컬 체크 
	 * @exception 
	 * @date 2014. 9. 18. 오전 9:29:18
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	@SuppressWarnings ({ "static-access" })
	private void checkSystemSe (HttpServletRequest request) {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("checkSystemSe Start");
		
		// ------------------------------------------------------------------------
		// # 객체/변수 선언
		// ------------------------------------------------------------------------
		InetAddress addr        = null;
		byte[]      ipAddr      = null;
		String      ipConfigVal = "";
		String[]    ips         = null;
		String      wasIpTest   = "";
		//String hostName   = "";

		// ------------------------------------------------------------------------
		// # Biz Start
		// ------------------------------------------------------------------------
		try {
//			if (request == null) {
//				logger.debug("request is null");
//				// request 정보가 없는 경우
//				addr = InetAddress.getLocalHost();
//				ipAddr = addr.getAddress();
//				for (int i=0; i < ipAddr.length; i++) {
//					if (i > 0) systemIp += ".";
//					systemIp += ipAddr[i]&0xFF;
//				}
//			} else {
//				// request 정보가 있는 경우
//				// Test
//				try {
//					//InetAddress..getHostAddress();
//					logger.debug("InetAddress.getLocalHost().getHostAddress() : " + InetAddress.getLocalHost().getHostAddress());
//					logger.debug("InetAddress.getLocalHost().getHostName()    : " + InetAddress.getLocalHost().getHostName());
//					addr = InetAddress.getLocalHost();
//					ipAddr = addr.getAddress();
//					for (int i=0; i < ipAddr.length; i++) {
//						if (i > 0) systemIp += ".";
//						systemIp += ipAddr[i]&0xFF;
//					}
//					logger.debug("systemIp(Address) : " + systemIp);
//				} catch (Exception e) {
//					logger.error("InetAddress error, e : " + e.toString());
//				}
//				logger.debug("request is not null");
//				systemIp = StringUtil.nvl(request.getLocalAddr());
//			}

			// ------------------------------------------------------------------
			// 자신의 IP 구하기(사설아이피 출력됨)
			// ------------------------------------------------------------------
			try {
	
				for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {
					NetworkInterface intf = en.nextElement();
					for ( Enumeration< InetAddress > enumIpAddr = intf.getInetAddresses( ) ; enumIpAddr.hasMoreElements( );) {
						InetAddress inetAddress = enumIpAddr.nextElement( );
						if ( ! inetAddress.isLoopbackAddress( ) && ! inetAddress.isLinkLocalAddress( ) && inetAddress.isSiteLocalAddress( ) ){
							this.systemIp = inetAddress.getHostAddress().toString();
							logger.debug("inetAddress.getHostAddress() : " + inetAddress.getHostAddress().toString());
							logger.debug("inetAddress.getHostName()    : " + inetAddress.getHostName().toString());
						} else {
							//logger.debug("inetAddress.isLoopbackAddress( )  : " + inetAddress.isLoopbackAddress( ));
							//logger.debug("inetAddress.isLinkLocalAddress( ) : " + inetAddress.isLinkLocalAddress( ));
							//logger.debug("inetAddress.isSiteLocalAddress( ) : " + inetAddress.isSiteLocalAddress( ));
						}
					}
				}
			} catch (Exception e) {
				logger.error("e : " + e.toString());
			}
			logger.info("This systemIp : " + this.systemIp);
			//this.systemIp = StringUtil.nvl(this.xmlConfig.getString(AppConfigManager.AppConfigKeyWasVip), "");;
			//hostName = addr.getHostName();
			//logger.debug("hostName : " + hostName);
	
			// ----------------------------------------------------------------------
			// 운영기여부확인 - Config에 등록된 Real Was Ip (application-config.xml 의 wasIp)
			// ----------------------------------------------------------------------
			// Config에 등록된 Was Ip (application-config.xml 의 wasIp)
			ipConfigVal = StringUtil.nvl(this.xmlConfig.getString(AppConfigManager.AppConfigKeyWasIp), "");
			logger.debug("Config Real Was Ip Value : " + ipConfigVal);
			ips = ipConfigVal.split(";");
	
			if (ips != null && ips.length > 0) {
				for (String ip : ips) {
					if (this.systemIp.equals(ip)) {
						this.systemSe = "REAL";
						break;
					}
				}
			}
			logger.debug("systemSe[1] : " + this.systemSe);
	
			// ----------------------------------------------------------------------
			// 개발기여부확인  - Config에 등록된 Test Was Ip (application-config.xml 의 wasIpTest)
			// ----------------------------------------------------------------------
			if (StringUtil.isEmpty(this.systemSe)) {
				ipConfigVal = StringUtil.nvl(this.xmlConfig.getString(AppConfigManager.AppConfigKeyWasIpTest), "");
				logger.debug("local ipConfigVal : " + ipConfigVal);
				ips = ipConfigVal.split(";");
				if (ips != null && ips.length > 0) {
					boolean isDone = false;
					for (String ip : ips) {
						if (!isDone)  {
							wasIpTest = ip;
							isDone = true;
						}
						if (this.systemIp.equals(ip)) {
							this.systemSe = "TEST";
							break;
						}
					}
				}
				logger.debug("systemSe[2] : " + this.systemSe);
			}
	
			// ----------------------------------------------------------------------
			// 로컬여부확인 - Config에 등록된 Local Was Ip (application-config.xml 의 wasIpLocal)
			// ----------------------------------------------------------------------
			if (StringUtil.isEmpty(this.systemSe)) {
				ipConfigVal = StringUtil.nvl(this.xmlConfig.getString(AppConfigManager.AppConfigKeyWasIpLocal), "");
				logger.debug("local ipConfigVal : " + ipConfigVal);
				ips = ipConfigVal.split(";");
				if (ips != null && ips.length > 0) {
					for (String ip : ips) {
						if (this.systemIp.equals(ip)) {
							this.systemSe = "LOCAL";
							break;
						}
					}
				}
				logger.debug("systemSe[3] : " + this.systemSe);
			}
	
			// ----------------------------------------------------------------------
			// 개발기여부확인 (현재 61.98.130.219 의 경우 InetAddress의 정보가 조회되지 않음)
			//  - 개발기가 변경될 경우 아래 내용도 변경된 내용에 맞게 수정해야 함
			// ----------------------------------------------------------------------
			//if (StringUtil.isEmpty(this.systemSe)) {
			//  
			//  ipConfigVal = StringUtil.nvl(this.xmlConfig.getString(AppConfigManager.AppConfigKeyWasIpTest), "");
			//  logger.debug("test ipConfigVal : " + ipConfigVal);
			//  ips = ipConfigVal.split(";");
			//  
			//  if (ips != null && ips.length > 0) {
			//    for (String ip : ips) {
			//      
			//      if (this.systemIp.equals(ip)) {
			//        this.systemSe = "TEST";
			//        break;
			//      }
			//    }
			//  }
			//  logger.debug("systemSe(3) : " + this.systemSe);
			//}
			//
			//if (request != null) {
			//
			//  logger.debug("request.getRemoteAddr : " + request.getRemoteAddr());
			//  logger.debug("request.getRemoteHost : " + request.getRemoteHost());
			//  logger.debug("request.getRemotePort : " + request.getRemotePort());
			//  logger.debug("request.getRemoteUser : " + request.getRemoteUser());
			//  logger.debug("request.getLocalAddr  : " + request.getLocalAddr());
			//  logger.debug("request.getLocalName  : " + request.getLocalName());
			//  logger.debug("request.getLocalPort  : " + request.getLocalPort());
			//}
			//
			//// 개발기의 InetAddress 정보가 조회가 되지 않으므로  request로 조회해본다.
			//if (StringUtil.isEmpty(this.systemSe)) {
			//  
			//  if (request != null) {
			//    this.systemIp = request.getLocalAddr();
			//    logger.debug("systemIp(4, request is not null) : " + this.systemIp);
			//  }
			//  else {
			//    // 운영기도 아니고 로컬도 아니면서  request 가  null 인 경우 개발기로 인식
			//    this.systemIp = "61.98.130.219";
			//    logger.debug("systemIp(4, request is null) : " + this.systemIp);
			//  }
			//  
			//  if (ips != null && ips.length > 0) {
			//    for (String ip : ips) {
			//
			//      if (this.systemIp.equals(ip)) {
			//        this.systemSe = "TEST";
			//        break;
			//      }
			//    }
			//  }
			//  logger.debug("systemSe(4) : " + this.systemSe);
			//}
	
			// 모든체크에도 IP정보가 없는경우 Config에 등록된 개발 IP 간주
			if (StringUtil.isEmpty(this.systemSe)) {
				this.systemIp = wasIpTest;
				this.systemSe = "TEST";
				logger.debug("systemSe[4] : " + this.systemSe);
			}
		}
		//catch (UnknownHostException uhe) {
		//  logger.error("checkSystemNm uhe : " + uhe.toString());
		//  uhe.printStackTrace();
		//}
		catch (Exception e) {
			logger.error("checkSystemSe e : " + e.toString());
			e.printStackTrace();
		}
	}
	
	/**
	   * <pre>
	   * uploadRootPath Set
	   *  - 반듯이 시스템판단(운영기/개발기/로컬) 판단 후 호출해야 함  
	   * @exception 
	   * @date 2015. 6. 3. 오후 9:58:07
	   * @author PJ00125
	   * @비고
	   *  
	   * </pre>
	   */
	  @SuppressWarnings ("static-access")
	  private void checkUploadRootPath () {
	    
	    try {
	      
	      if (CmmnCnst.SystemReal.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadRootPath), "");
	      }
	      else if (CmmnCnst.SystemDev.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadRootPathDev), "");
	      }
	      else if (CmmnCnst.SystemLocal.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadRootPathLocal), "");
	      }
	      else if (CmmnCnst.SystemTest.equals(this.systemSe)) {
		        
	        AppConfigManager.uploadRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadRootPathLocal), "");
	      }
	      else {
	        AppConfigManager.uploadRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadRootPathDev), "");
	        
	      }
	      logger.info("uploadRootPath : " + uploadRootPath);
	    }
	    catch (Exception e) {
	      logger.error("checkUploadRootPath e : " + e.toString());
	      e.printStackTrace(); 
	    }
	  }
	  
		/**
	   * <pre>
	   * uploadMiscRootPath Set
	   *  - 반듯이 시스템판단(운영기/개발기/로컬) 판단 후 호출해야 함  
	   * @exception 
	   * @date 2015. 12. 1. 오후 9:58:07
	   * @author Okayjava
	   * @비고
	   *  
	   * </pre>
	   */
	  @SuppressWarnings ("static-access")
	  private void checkUploadMiscRootPath () {
	    
	    try {
	      
	      if (CmmnCnst.SystemReal.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadMiscRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadMiscRootPath), "");
	      }
	      else if (CmmnCnst.SystemDev.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadMiscRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadMiscRootPathDev), "");
	      }
	      else if (CmmnCnst.SystemLocal.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadMiscRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadMiscRootPathLocal), "");
	      }
	      else if (CmmnCnst.SystemTest.equals(this.systemSe)) {
		        
	        AppConfigManager.uploadMiscRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadMiscRootPathLocal), "");
	      }
	      else {
	        AppConfigManager.uploadMiscRootPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadMiscRootPathDev), "");
	        
	      }
	      logger.info("uploadMiscRootPath : " + uploadMiscRootPath);
	    }
	    catch (Exception e) {
	      logger.error("checkUploadRootPath e : " + e.toString());
	      e.printStackTrace(); 
	    }
	  }
	  
	  /**
	   * <pre>
	   * uploadRootPath Set
	   *  - 반듯이 시스템판단(운영기/개발기/로컬) 판단 후 호출해야 함  
	   * @exception 
	   * @date 2015. 6. 3. 오후 9:58:07
	   * @author PJ00125
	   * @비고
	   * 
	   * </pre>
	   */
	  @SuppressWarnings ("static-access")
	  private void checkUploadUrlPath () {
	    
	    try {
	      
	      if (CmmnCnst.SystemReal.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadUrlPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadUrlPath), "");
	      }
	      else if (CmmnCnst.SystemDev.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadUrlPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadUrlPathDev), "");
	      }
	      else if (CmmnCnst.SystemLocal.equals(this.systemSe)) {
	        
	        AppConfigManager.uploadUrlPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadUrlPathLocal), "");
	      }
	      else if (CmmnCnst.SystemTest.equals(this.systemSe)) {
		        
	        AppConfigManager.uploadUrlPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadUrlPathLocal), "");
	      }
	      else {

	        AppConfigManager.uploadUrlPath = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyUploadUrlPathDev), "");
	      }
	      logger.info("checkUploadUrlPath : " + uploadUrlPath);
	    }
	    catch (Exception e) {
	      logger.error("checkUploadUrlPath e : " + e.toString());
	      e.printStackTrace(); 
	    }
	  }

	/**
	 * <pre>
	 * Config파일 새로 읽기
	 * 
	 * @param contextPath 
	 * @exception 
	 * @date 2014. 9. 5. 오후 3:36:40
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	@SuppressWarnings ("unused")
	private void reloadAppConfig (String contextPath) {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("reloadAppConfig Start");

		// ------------------------------------------------------------------------
		// # 객체/변수 선언
		// ------------------------------------------------------------------------

		// ------------------------------------------------------------------------
		// # Biz Start
		// ------------------------------------------------------------------------
		try {
			xmlConfig.clear();
			xmlConfig = null;
			xmlConfig = new XMLConfiguration(contextPath);
		} catch (Exception e) {
			logger.error("reloadAppConfig error : " + e.toString());
			e.printStackTrace();
			// TODO 오류처리
		}
	}

	/**
	 * <pre>
	 * 설정항목반환
	 * 
	 * @param key
	 * @return 
	 * @exception 
	 * @date 2014. 8. 26. 오후 3:07:49
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	@SuppressWarnings ("static-access")
	public String getConfig(String key) {
		logger.debug("key : " + key);
		String configVal = "";
		if (this.xmlConfig == null) {
			mInstance = new AppConfigManager();
		}
		
		if (AppConfigManager.AppConfigKeyWasIp.equals(key)) {
			// ip
			if (this.systemSe.equals("REAL")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyWasIp), "");
			} else if (this.systemSe.equals("TEST")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyWasIpTest), "");
			} else if (this.systemSe.equals("LOCAL")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyWasIpLocal), "");
			} else {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyWasIpLocal), "");
			}
		} else if (AppConfigManager.AppConfigKeyDomain.equals(key)) {
			// DomainUrl
			if (this.systemSe.equals("REAL")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyDomain), "");
			} else if (this.systemSe.equals("TEST")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyDomainTest), "");
			} else if (this.systemSe.equals("LOCAL")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyDomainLocal), "");
			} else {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyDomainLocal), "");
			}
		}
		/*
		else if (AppConfigManager.AppConfigKeyBatchIp.equals(key)) {
			// Batch Ip
			if (this.systemSe.equals("REAL")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyBatchIp), "");
			} else if (this.systemSe.equals("TEST")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyBatchIpTest), "");
			} else if (this.systemSe.equals("LOCAL")) {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyBatchIpLocal), "");
			} else {
				configVal = StringUtil.nvl(this.xmlConfig.getString(this.AppConfigKeyBatchIpLocal), "");
			}
		}
		*/
		else {
			configVal = StringUtil.nvl(this.xmlConfig.getString(key), "");
		}
		logger.debug("configVal : " + configVal);
		return configVal; 
	}

	public static String getSystemSe () {
		return systemSe;
	}

	public static void setSystemSe (String systemSe) {
		AppConfigManager.systemSe = systemSe;
	}

	public static String getSystemIp () {
		return systemIp;
	}

	public static void setSystemIp (String systemIp) {
		AppConfigManager.systemIp = systemIp;
	}
	
	public static String getUploadRootPath () {
	    return uploadRootPath;
	}

	public static String getUploadUrlPath() {
		return uploadUrlPath;
	}

	public static String getUploadMiscRootPath() {
		return uploadMiscRootPath;
	}

	
	
}
