package com.ssocio.sharing.service.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.dao.admin.AdminRentalOrderDao;
import com.ssocio.sharing.vo.admin.PageNavigation;


/**
* <pre>
* 1. 패키지명 : com.ssocio.sharing.service.admin
* 2. 타입명 : AdminRentalOrderServiceImpl.java
* 3. 작성일 : 2015. 10. 20. 오후 2:05:22
* 4. 작성자 : guitarhyo
* 5. 설명 :  렌탈 주문 관리
* </pre>
*/
@Service
public class AdminRentalOrderServiceImpl extends AdminReferServiceImpl implements AdminRentalOrderService {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminRentalOrderServiceImpl.class);

	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="adminRentalOrderDao")
	private AdminRentalOrderDao adminRentalOrderDao;
	
	@Override
	public ModelMap selectListRentalOrder(Map<String, Object>inParam, String procStatCd[]) throws Exception {
		logger.debug("AdminRentalOrderServiceImpl.selectListRentalOrder [Start]");
		LoggerUtil.writeMap(inParam);
		
		// return Map
		ModelMap mm = new ModelMap();
		
		try {
			
			//페이지번호
			inParam.put("PAGE_NO",StringUtil.nvl((String)inParam.get("PAGE_NO"), CmmnCnst.cmmn1));
			int nowPage = StringUtil.nvlInt((String)inParam.get("PAGE_NO"), 1);
			int rowCnt	= StringUtil.nvlInt((String)inParam.get("S_ROW_CNT"), CmmnCnst.ADM_LIST_SIZE);
			logger.info("rowCnt : " + rowCnt);
			inParam.put("S_ROW_CNT", rowCnt);

			// 조회일자
			String today = StringUtil.getCurrentDate();
			inParam.put("S_END_DATE", StringUtil.nvl((String)inParam.get("S_END_DATE"), today));
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.DATE, -7);
			inParam.put("S_START_DATE", StringUtil.nvl((String)inParam.get("S_START_DATE"), format.format(cal.getTime())));
		
			// 주문상태
			if (procStatCd != null && procStatCd.length > 0) {
				inParam.put("PROC_STAT_CD", procStatCd);
			}
			else {
				String[] procStatCdArr = {"93","94"};
				inParam.put("PROC_STAT_CD", procStatCdArr);
			}
			
			// 총건수 조회
			int rowTotal = adminRentalOrderDao.selectListRentalOrderCnt(inParam);
			logger.info("rowTotal : " + rowTotal);
			// paging
			PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, rowCnt, CmmnCnst.ADM_BLOCK_SIZE);
			mm.put("PAGE_NO", nowPage);
			mm.put("pageNav", pageNav);
			inParam.put("START_ROW", pageNav.getStartRow());
			inParam.put("END_ROW", pageNav.getEndRow());
			
			// 리스트 조회
			mm.put("selectListOrderRental",adminRentalOrderDao.selectListRentalOrder(inParam));
			mm.put("params", inParam);
			
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	
	
	public ModelMap selectListExcelRentalOrder(Map<String, Object>inParam, String procStatCd[]) throws Exception {
		logger.debug("AdminRentalOrderServiceImpl.selectListExcelRentalOrder [Start]");
		LoggerUtil.writeMap(inParam);
		
		// return Map
		ModelMap mm = new ModelMap();
		
		try {

			// 조회일자
			String today = StringUtil.getCurrentDate();
			inParam.put("S_END_DATE", StringUtil.nvl((String)inParam.get("S_END_DATE"), today));
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.DATE, -7);
			inParam.put("S_START_DATE", StringUtil.nvl((String)inParam.get("S_START_DATE"), format.format(cal.getTime())));
		
			// 주문상태
			if (procStatCd != null && procStatCd.length > 0) {
				inParam.put("PROC_STAT_CD", procStatCd);
			}
			else {
				String[] procStatCdArr = {"93","94"};
				inParam.put("PROC_STAT_CD", procStatCdArr);
			}

			// 리스트 조회
			mm.put("selectListRentalOrdExcel",adminRentalOrderDao.selectListExcelRentalOrder(inParam));
	
			
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	
	
	public String selectRentalAgr(String PROD_CODE) throws Exception {
		logger.debug("AdminRentalOrderServiceImpl.selectRentalAgr [Start]");
		String out = "";
		try {
			out = adminRentalOrderDao.selectRentalAgr(PROD_CODE);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return out;
	}
	
	public int updateRentalOrdCncl(Map<String, Object>inParam) throws Exception {
		logger.debug("AdminRentalOrderServiceImpl.updateRentalOrdCncl [Start]");
		int out = 0;
		try {
			LoggerUtil.writeMap(inParam);
			String prodCode = (String) inParam.get("P_PROD_CODE");
			String prodSeq = (String) inParam.get("P_PROD_SEQ");
			String[] codeArray = prodCode.split(",");
			String[] seqArray = prodSeq.split(",");
			
			for (int i = 0; i < codeArray.length; i++) {
				inParam.put("PROD_CODE", codeArray[i]);
				inParam.put("REQ_SEQ", seqArray[i]);
				out = adminRentalOrderDao.updateRentalOrdCncl(inParam);
			
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return out;
	}
	
	/*==================================================================================================================================================*/
	
}
