package com.ssocio.sharing.dao.seller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 주문 관리
 * 셰어링 주문 관리를 위한 Dao
 * @author S.B.LEE
 * @version
 * @since 2015. 7. 17. 오후 1:28:08
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 17.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
@Component
public class SellerSharOrderDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerSharOrderDao.class);

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//	 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//	 -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionSeller")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	/**
	 * <pre>
	 * 셰어링 주문 리스트
	 * 셰어링 주문 관리 리스트 내역을 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 21
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharOrder(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharOrder Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharOrder", inParam);
		} catch (Exception e) {
			logger.error("selectListSharOrder DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	public int selectListSharOrderCnt(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("sellerSharOrderMapper.selectListSharOrderCnt", inParam);
	}

	/**
	 * <pre>
	 * 셰어링 주문 상품 리스트
	 * 셰어링 주문 관리 리스트 상품내역을 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 21
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharOrderProduct(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharOrderProduct Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharOrderProduct", inParam);
		} catch (Exception e) {
			logger.error("selectListSharOrderProduct DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 셰어링 교환신청 그룹 리스트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharExcGroup(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharExcGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharExcGroup", inParam);
		} catch (Exception e) {
			logger.error("selectListSharExcGroup DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 셰어링 교환신청 그룹 상세 리스트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharExcRtn(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharExc Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharExcRtn", inParam);
		} catch (Exception e) {
			logger.error("selectListSharExcRtn DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 쉐어링 교환 상품 정보 리스트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectSharExcList(Map<String, Object> inParam) throws Exception {
		logger.info("selectSharExcList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectSharExcList", inParam);
		} catch (Exception e) {
			logger.error("selectSharExcList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 *쉐어링 교환 상품 배송지 정보
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Object selectExcDlvInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectExcDlvInfo Start");
		Map<String, Object> result = null;
		try {
			result =  sqlSession.selectOne("sellerSharOrderMapper.selectExcDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("selectExcDlvInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}

	/**
	 * <pre>
	 *셰어링 교환 리스트 카운트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListSharExcRtnCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharExcRtnCnt Start");
		int count = 0;
		try {
			count =  sqlSession.selectOne("sellerSharOrderMapper.selectListSharExcRtnCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListSharExcRtnCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 쉐어링 주문관리 상세 > 주문정보
	 * 셰어링 주문정보 내역을 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Object selectOrdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrdInfo Start");
		Map<String, Object> result = null;
		try {
			result =  sqlSession.selectOne("sellerSharOrderMapper.selectOrdInfo", inParam);
		} catch (Exception e) {
			logger.error("selectOrdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}

	/**
	 * <pre>
	 * 쉐어링 주문관리 상세 > 주문정보 상품 그룹 리스트
	 * 주문정보 상품 그룹 리스트를 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrdProdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectListOrdProdInfo Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListOrdProdInfo", inParam);
		} catch (Exception e) {
			logger.error("selectListOrdProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 쉐어링 주문관리 상세 > 주문정보 상품 리스트
	 * 주문정보 상품 리스트를 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrdProdInfoDetail(Map<String, Object> inParam) throws Exception {
		logger.info("selectListOrdProdInfoDetail Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListOrdProdInfoDetail", inParam);
		} catch (Exception e) {
			logger.error("selectListOrdProdInfoDetail DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 쉐어링 주문관리 상세 > 배송지 정보
	 * 배송지 정보를 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Object selectOrdDlvInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrdDlvInfo Start");
		Map<String, Object> result = null;
		try {
			result =  sqlSession.selectOne("sellerSharOrderMapper.selectOrdDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("selectOrdDlvInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}

	/**
	 * <pre>
	 * 쉐어링 주문관리 상세 > 이용 상품 정보리스트
	 * 이용 상품 정보리스트를 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectSharStatList(Map<String, Object> inParam) throws Exception {
		logger.info("selectSharStatList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectSharStatList", inParam);
		} catch (Exception e) {
			logger.error("selectSharStatList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 쉐어링 주문관리 상세 > 쉐어링 반납 상품 정보리스트
	 * 쉐어링 반납 상품 정보리스트를 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectSharReturnList(Map<String, Object> inParam) throws Exception {
		logger.info("selectSharReturnList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectSharReturnList", inParam);
		} catch (Exception e) {
			logger.error("selectSharReturnList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 쉐어링 주문관리 상세 > 쉐어링 회수 상품 정보리스트
	 * 쉐어링 회수 상품 정보리스트를 조회합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectSharRecoverList(Map<String, Object> inParam) throws Exception {
		logger.info("selectSharRecoverList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectSharRecoverList", inParam);
		} catch (Exception e) {
			logger.error("selectSharRecoverList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 *셰어링 반품 리스트 카운트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListSharReturnCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharReturnCnt Start");
		int count = 0;
		try {
			count =  sqlSession.selectOne("sellerSharOrderMapper.selectListSharReturnCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListSharReturnCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 셰어링 반품신청 그룹 리스트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharReturnGroup(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharReturnGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharReturnGroup", inParam);
		} catch (Exception e) {
			logger.error("selectListSharReturnGroup DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 셰어링 반품신청 그룹 상세 리스트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharReturnGroupList(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharReturnGroupList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharReturnGroupList", inParam);
		} catch (Exception e) {
			logger.error("selectListSharReturnGroupList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 *셰어링 취소 리스트 카운트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectListSharCancelCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharCancelCnt Start");
		int count = 0;
		try {
			count =  sqlSession.selectOne("sellerSharOrderMapper.selectListSharCancelCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListSharCancelCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 셰어링 취소 그룹 리스트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharCancelGroup(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharCancelGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharCancelGroup", inParam);
		} catch (Exception e) {
			logger.error("selectListSharCancelGroup DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 셰어링 취소 그룹 상세 리스트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharCancelGroupList(Map<String, Object> inParam) throws Exception {
		logger.info("selectListSharCancelGroupList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharCancelGroupList", inParam);
		} catch (Exception e) {
			logger.error("selectListSharCancelGroupList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 쉐어링 취소 상품 정보 리스트
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 26
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectSharCancelList(Map<String, Object> inParam) throws Exception {
		logger.info("selectSharCancelList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectSharCancelList", inParam);
		} catch (Exception e) {
			logger.error("selectSharCancelList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 반품,교환 배송지 정보 수정
	 *
	 * @param inParam
	 * @return
	 * @exception
	 * @date 2015. 10. 26
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * @비고
	 *
	 * </pre>
	*/
	public int updateOrdDlvReg(Map<String, Object> inParam) throws Exception {
		logger.info("updateOrdDlvReg Start");
		int count = 0;
		try {
			count =  sqlSession.update("sellerSharOrderMapper.updateOrdDlvReg", inParam);
		} catch (Exception e) {
			logger.error("insertOrdDlv DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문 메모 수정
	 *
	 * @param inParam
	 * @return
	 * @exception
	 * @date 2015. 10. 26
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * @비고
	 *
	 * </pre>
	*/
	public int updateSharAdminMemo(Map<String, Object> inParam) throws Exception {
		logger.info("updateSharAdminMemo Start");
		int count = 0;
		try {
			count =  sqlSession.update("sellerSharOrderMapper.updateSharAdminMemo", inParam);
		} catch (Exception e) {
			logger.error("updateSharAdminMemo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 셰어링 주문 조회 엑셀다운로드
	 *
	 * @param inParam
	 * @return
	 * @exception
	 * @date 2015. 10. 27
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * @비고
	 *
	 * </pre>
	*/
	public Object selectListSharOrderExcel(Map<String, Object> inParam)  throws Exception{
		logger.info("selectListSharOrderExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharOrderExcel",inParam);
		} catch (Exception e) {
			logger.error("selectListSharOrderExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 셰어링 교환신청 조회 엑셀다운로드
	 *
	 * @param inParam
	 * @return
	 * @exception
	 * @date 2015. 10. 27
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * @비고
	 *
	 * </pre>
	*/
	public Object selectListSharExcExcel(Map<String, Object> inParam)  throws Exception{
		logger.info("selectListSharExcExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharExcExcel",inParam);
		} catch (Exception e) {
			logger.error("selectListSharExcExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 셰어링 반품신청 조회 엑셀다운로드
	 *
	 * @param inParam
	 * @return
	 * @exception
	 * @date 2015. 10. 27
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * @비고
	 *
	 * </pre>
	*/
	public Object selectListSharRtnExcel(Map<String, Object> inParam)  throws Exception{
		logger.info("selectListSharRtnExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharRtnExcel",inParam);
		} catch (Exception e) {
			logger.error("selectListSharRtnExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 셰어링 주문취소 조회 엑셀다운로드
	 *
	 * @param inParam
	 * @return
	 * @exception
	 * @date 2015. 10. 27
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * @비고
	 *
	 * </pre>
	*/
	public Object selectListSharCanExcel(Map<String, Object> inParam)  throws Exception{
		logger.info("selectListSharCanExcel Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerSharOrderMapper.selectListSharCanExcel",inParam);
		} catch (Exception e) {
			logger.error("selectListSharCanExcel DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 주문 상태 변경 - -updateSharProcStateChg
	 * </pre>
	 */
	public int updateSharProcStateChg(Map<String, Object> inParam) throws Exception {
		logger.info("updateSharProcStateChg Start");
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharProcStateChg", inParam);
		} catch (Exception e) {
			logger.error("updateSharProcStateChg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문 상태 변경 - updateSharOrdStateChg
	 * </pre>
	 */
	public int updateSharOrdStateChg(Map<String, Object> inParam) throws Exception {
		logger.info("updateSharOrdStateChg Start");
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharOrdStateChg", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrdStateChg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문 상태 변경 - updateSharOrdState
	 * </pre>
	 */
	public int updateSharOrdState(Map<String, Object> inParam) throws Exception {
		logger.info("updateSharOrdState Start");
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharOrdState", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrdState DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문 상태 변경 - updateSharProcState
	 * </pre>
	 */
	public int updateSharProcState(Map<String, Object> inParam) throws Exception {
		logger.info("updateSharProcState Start");
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharProcState", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrderState DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * INVC_INFO 배송완료 상태 변경 - updateSharInvcState
	 * </pre>
	 */
	public int updateSharInvcState(Map<String, Object> inParam) throws Exception {
		logger.info("updateSharInvcState Start");
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharInvcState", inParam);
		} catch (Exception e) {
			logger.error("updateSharInvcState DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문정보를 회수,교환 상태로 변경
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 29
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateSharOrderAllType(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharOrderAllType", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrderAllType DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문정보를 회수,교환 정보 테이블에 삽입
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 29
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertSharOrderAllType(Map<String, Object> inParam) throws Exception {
		String chg_cd = sqlSession.selectOne("sellerSharOrderMapper.maxSeq",inParam);
		inParam.put("CHG_CD", chg_cd);
		int count = 0;
		try {
			count += sqlSession.insert("sellerSharOrderMapper.insertChgRtnProcInfo", inParam);
			count += sqlSession.insert("sellerSharOrderMapper.insertChgProdInfo", inParam);
		} catch (Exception e) {
			logger.error("insertSharOrderAllType DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문취소 - 단일,복합 상품 취소 구분 획득
	 * </pre>
	 */
	public Map<String, Object> selectSharOrderCancelGroupInfo(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("sellerSharOrderMapper.selectSharOrderCancelGroupInfo",inParam);
	}

	/**
	 * <pre>
	 * 주문취소 - cancel code 생성
	 * </pre>
	 */
	public String selectSharOrderCancelCode(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("sellerSharOrderMapper.maxCancelCd",inParam);
	}

	/**
	 * <pre>
	 * 주문취소 - 사유 테이블에 삽입
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertSharOrderCancelReason(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.insert("sellerSharOrderMapper.insertSharOrderCancelReason", inParam);
		} catch (Exception e) {
			logger.error("insertSharOrderCancelReason DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문취소 - 주문 테이블에 상태코드 변경
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateSharOrderTableCancelState(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharOrderTableCancelState", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrderTableCancelState DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문취소 - 주문상품 테이블에 상태코드 변경
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateSharOrderProductTableCancelState(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharOrderProductTableCancelState", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrderProductTableCancelState DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 쿠폰원복 - 쿠폰테이블 변경
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateSharOrderCouponTable(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateSharOrderCouponTable", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrderCouponTable DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 포인트 원복 - 회원테이블 변경
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateMemberTableForPoint(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.updateMemberTableForPoint", inParam);
		} catch (Exception e) {
			logger.error("updateMemberTableForPoint DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 포인트 원복 - 사용이력 쌓기
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertPointLogTable(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("sellerSharOrderMapper.insertPointLogTable", inParam);
		} catch (Exception e) {
			logger.error("insertPointLogTable DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 결제취소 - 카드결제 코드 획득
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectTradeNumber(Map<String, Object> inParam) throws Exception {
		Map<String, Object> result = null;
		try {
			result = sqlSession.selectOne("sellerSharOrderMapper.selectTradeNumber", inParam);
		} catch (Exception e) {
			logger.error("selectTradeNumber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}

	/**
	 * <pre>
	 * 결제취소 - 묶음배송 최종상태 유무
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 02
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectNotCancelDlvGroupCount(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("sellerSharOrderMapper.selectNotCancelDlvGroupCount",inParam);
	}

	/**
	 * <pre>
	 * 결제취소 - 주문 최종상태 유무
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 02
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectOrderNotCancelCount(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("sellerSharOrderMapper.selectOrderNotCancelCount",inParam);
	}

	/**
	 * <pre>
	 * 결제취소 - 상품 결제 기본 정보
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 02
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectDefaultProductCancelInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectDefaultProductCancelInfo Start");
		Map<String, Object> productInfo = null;
		try {
			productInfo =  sqlSession.selectOne("sellerSharOrderMapper.selectDefaultProductCancelInfo", inParam);
		} catch (Exception e) {
			logger.error("selectDefaultProductCancelInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return productInfo;
	}

	/**
	 * <pre>
	 * 주문취소 - 카드결제정보 저장
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertOrdCancelInfo(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.insert("sellerSharOrderMapper.insertOrdCancelInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdCancelInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 반납시 환불금액
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectShareReturnMoney(Map<String, Object> inParam) throws Exception {
		logger.info("selectShareReturnMoney Start");
		int count = 0;
		try {
			count =  sqlSession.selectOne("sellerSharOrderMapper.selectShareReturnMoney", inParam);
		} catch (Exception e) {
			logger.error("selectShareReturnMoney DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 반품시 환불상품 정보
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 03
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectDefaultProductRejectInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectDefaultProductRejectInfo Start");
		Map<String, Object> productInfo = null;
		try {
			productInfo =  sqlSession.selectOne("sellerSharOrderMapper.selectDefaultProductRejectInfo", inParam);
		} catch (Exception e) {
			logger.error("selectDefaultProductRejectInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return productInfo;
	}

	public String selectInvcFlag(Map<String, Object> inParam) throws Exception {
		logger.info("selectInvcFlag start");
		String flag = "N";
		try {
			flag =  sqlSession.selectOne("sellerSharOrderMapper.selectInvcFlag", inParam);
		} catch (Exception e) {
			logger.error("selectInvcFlag DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return flag;
	}

	public int insertCredPoint(Map<String, Object> inParam) throws Exception {
		logger.info("insertCredPoint start");
		int rtn = 0;
		try {
			rtn =  sqlSession.insert("sellerSharOrderMapper.insertCredPoint", inParam);;
		} catch (Exception e) {
			logger.error("insertCredPoint DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	public String selectDlvWayCd(Map<String, Object> inParam) throws Exception {
		logger.info("selectDlvWayCd start");
		String flag = "N";
		try {
			flag =  sqlSession.selectOne("sellerSharOrderMapper.selectDlvWayCd", inParam);
		} catch (Exception e) {
			logger.error("selectDlvWayCd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return flag;
	}


}
