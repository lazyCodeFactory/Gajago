/**
 *
 */
package com.ssocio.sharing.dao.web;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * SaleManage Dao
 * 판매관리
 * @author Kang.h.c
 * @version
 * @since 2015. 8. 19
 * @see
 * @History
 * Date			|	author		| 변경 내용
 * 2015. 8. 19.	|	Kang.h.c	|신규
 * @비고
 * </pre>
 */
@Component
public class WebSaleManageDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebSaleManageDao.class);

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionWeb") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	/**
	 * <pre>
	 * selectSellerInfo
	 * 판매자 정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 22
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> selectSellerInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellerInfo Start");
		Map<String, Object> selectSellerInfo = null;
		try {
			selectSellerInfo =  sqlSession.selectOne("webSaleManageMapper.selectSellerInfo", inParam);
		} catch (Exception e) {
			logger.error("selectSellerInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectSellerInfo;
	}

	/**
	 * <pre>
	 * selectSaleProdCnt
	 * 사용자가 등록한 판매상품의 갯수를 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 19
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> selectSaleProdCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSaleProdCnt Start");
		Map<String, Object> selectSaleProdCnt = null;
		try {
			selectSaleProdCnt =  sqlSession.selectOne("webSaleManageMapper.selectSaleProdCnt", inParam);
		} catch (Exception e) {
			logger.error("selectSaleProdCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectSaleProdCnt;
	}

	/**
	 * <pre>
	 * selectBrandList
	 * 해당하는 카테고리의 브랜드 정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 19
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public List<Map<String, Object>> selectBrandList(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectBrandList Start");
		List<Map<String, Object>> selectBrandList = null;
		try {
			selectBrandList =  sqlSession.selectList("webSaleManageMapper.selectBrandList", inParam);
		} catch (Exception e) {
			logger.error("selectSaleProdCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectBrandList;
	}

	/**
	 * <pre>
	 * selectRelDlvInfo
	 * 제휴택배배송비
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 19
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> selectRelDlvInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRelDlvInfo Start");
		Map<String, Object> selectRelDlvInfo = null;
		try {
			selectRelDlvInfo =  sqlSession.selectOne("webSaleManageMapper.selectRelDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("selectRelDlvInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectRelDlvInfo;
	}

	/**
	 * <pre>
	 * selectRelDlvInfo
	 * 제휴택배배송비
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 19
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public List<Map<String, Object>> selectListRelDlvInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRelDlvInfo Start");
		List<Map<String, Object>> selectRelDlvInfo = null;
		try {
			selectRelDlvInfo =  sqlSession.selectList("webSaleManageMapper.selectListRelDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("selectRelDlvInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectRelDlvInfo;
	}

	/**
	 * <pre>
	 * selectSaleProdCnt
	 * 카테고리 수수료 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 16
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> selectCtryTax(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCtryTax Start");
		Map<String, Object> selectSaleProdCnt = null;
		try {
			selectSaleProdCnt =  sqlSession.selectOne("webSaleManageMapper.selectCtryTax", inParam);
		} catch (Exception e) {
			logger.error("selectCtryTax DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectSaleProdCnt;
	}

	/**
	 * <pre>
	 * selectSaleProdCnt
	 * 결제 수수료 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 16
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> selectSetlTax(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSetlTax Start");
		Map<String, Object> selectSaleProdCnt = null;
		try {
			selectSaleProdCnt =  sqlSession.selectOne("webSaleManageMapper.selectSetlTax", inParam);
		} catch (Exception e) {
			logger.error("selectSetlTax DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectSaleProdCnt;
	}

	/**
	 * <pre>
	 * insertProd
	 * 상품등록
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 24
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public String insertProd (Map<String, Object> inParam) throws Exception{
		logger.info("insertProd Start===>");
		logger.debug("inParam : " + inParam.toString());
		sqlSession.insert("webSaleManageMapper.insertProd", inParam);
		return (String)inParam.get("PROD_CODE");
	}
	

	/**
	 * <pre>
	 * insertProd
	 * 상품등록 [간소화]
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 24
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public String insertProdSimple (Map<String, Object> inParam) throws Exception{
		try {
			logger.info("insertProdSimple Start");
			logger.debug("inParam : " + inParam.toString());
			inParam.put("PROD_CODE", "");
			sqlSession.insert("webSaleManageMapper.insertProdSimple", inParam);
			logger.debug("inParam : " + inParam.toString());
			
		} catch (Exception e) {
			
			e.printStackTrace();
			throw e;
		}
		
		return (String)inParam.get("PROD_CODE");
	}

	/**
	 * <pre>
	 * insertProdShare
	 * 상품등록 - 셰어링
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 24
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public String insertProdShare (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdShare Start");
		sqlSession.insert("webSaleManageMapper.insertProdShare", inParam);
		return (String)inParam.get("PROD_CODE");
	}

	/**
	 * <pre>
	 * 상품이미지 등록
	 * 상품이미지 파일저장
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 27
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public String insertFile(Map<String, Object> inParam) throws Exception {
		logger.info("insertFile Start");

		sqlSession.insert("webSaleManageMapper.insertFile", inParam);

		//파일SEQ를 넘김
		return StringUtil.nvl(inParam.get("FILE_SEQ").toString());
	}

	/**
	 * <pre>
	 * 상품이미지 등록
	 * 상품이미지 파일저장
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 27
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public void deleteFile(Map<String, Object> delMap) throws Exception {
		sqlSession.delete("webSaleManageMapper.deleteFile", delMap);
	}

	/**
	 * <pre>
	 * 상품이미지 등록
	 * 상품이미지를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 24
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int insertProdImg (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdImg Start");
		int rtn = 0;
		try {
			LoggerUtil.writeMap(inParam);
			rtn = sqlSession.insert("webSaleManageMapper.insertProdImg", inParam);
		} catch (Exception e) {
			logger.error("insertProdImg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 기타산간 추가 배송비
	 * 기타산간 추가 배송비 insert
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 25
	 * @author Kang.h.c
	 * @비고
	 *
	 * </pre>
	 */
	public int insertExtLandDlvPrice (Map<String, Object> inParam) throws Exception{
		logger.info("insertExtLandDlvPrice Start");
		int rtn = 0;
		try {
			rtn = sqlSession.insert("webSaleManageMapper.insertExtLandDlvPrice", inParam);
		} catch (Exception e) {
			logger.error("insertExtLandDlvPrice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 기본 출하지 조회
	 * 기본 출하지를 조회한다
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 29
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public String selectGrpProdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectGrpProdInfo start");
		return sqlSession.selectOne("webSaleManageMapper.selectGrpProdInfo", inParam);

	}

	/**
	 * <pre>
	 * 기본 출하지 map
	 * 기본 출하지 map insert
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 25
	 * @author Kang.h.c
	 * @비고
	 *
	 * </pre>
	 */
	public int insertGrpProdMap (Map<String, Object> inParam) throws Exception{
		logger.info("insertGrpProdMap Start");
		int rtn = 0;
		try {
			rtn = sqlSession.insert("webSaleManageMapper.insertGrpProdMap", inParam);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("insertGrpProdMap DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	
	/**
	 * 출하지 map update
	 * @param inParam
	 * @return
	 * @throws Exception
	 */
	public int updateGrpProdMap (Map<String, Object> inParam) throws Exception{
		logger.info("updateGrpProdMap Start");
		int rtn = 0;
		try {
			rtn = sqlSession.update("webSaleManageMapper.updateGrpProdMap", inParam);
		} catch (Exception e) {
			logger.error("updateGrpProdMap DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	
	
	

	/**
	 * <pre>
	 * 브랜드 신청
	 * 해당 카테고리에 맞는 브랜드를 신청합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 25
	 * @author Kang.h.c
	 * @비고
	 *
	 * </pre>
	 */
	public int insertBrandReq (Map<String, Object> inParam) throws Exception{
		logger.info("insertBrandReq Start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.insert("webSaleManageMapper.insertBrandReq", inParam);
		} catch (Exception e) {
			logger.error("insertBrandReq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * Code 그룹별 리스트 조회
	 * Code 그룹별 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 25
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListCodeGroup(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListCodeGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectListCodeGroup", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 등록상품 리스트 조회
	 * 등록상품 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 26
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListProd(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListProd Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectListProd", inParam);
		} catch (Exception e) {
			logger.error("selectListProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 등록상품 리스트 조회
	 * 셰어링 등록상품 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 26
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListShareProd(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListShareProd Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectListShareProd", inParam);
		} catch (Exception e) {
			logger.error("selectListShareProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 등록상품 상세 조회
	 * PROD TABLE 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 27
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectProdDtl(Map<String, Object> inParam) throws Exception {
		logger.info("selectProdDtl Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectProdDtl", inParam);
		} catch (Exception e) {
			logger.error("selectProdDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	
	/**
	 * <pre>
	 * 등록상품 상세 조회
	 * PROD TABLE 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 27
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectProdDtlV2(Map<String, Object> inParam) throws Exception {
		logger.info("selectProdDtl Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectProdDtlV2", inParam);
		} catch (Exception e) {
			logger.error("selectProdDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	

	/**
	 * <pre>
	 * 등록상품 상세 이미지 조회
	 * PROD_IMG, FILE_INFO TABLE 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 27
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectProdImg(String prodCode) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListShareProd Start");
		Map<String, Object> list = null;
		try {
			list =  sqlSession.selectOne("webSaleManageMapper.selectProdImg", prodCode);
		} catch (Exception e) {
			logger.error("selectListShareProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 등록상품 셰어링 상세 조회
	 * PROD TABLE 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 27
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectProdShareInfo(String prodCode) throws Exception {
		logger.info("selectProdShareInfo Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectProdShareInfo", prodCode);
		} catch (Exception e) {
			logger.error("selectProdShareInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 등록상품 추가배송비 조회
	 * EXT_LAND_DLV_PRICE TABLE 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectExtLandDlvPrice(String prodCode) throws Exception {
		logger.info("selectExtLandDlvPrice start");
		List<Map<String, Object>> list = null;
		try {
			list = sqlSession.selectList("webSaleManageMapper.selectExtLandDlvPrice", prodCode);
		} catch (Exception e) {
			logger.error("selectExtLandDlvPrice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 등록상품 삭제
	 * PROD_STAT_CD > '3' 으로 변경
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int deleteProdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("deleteProdInfo start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.update("webSaleManageMapper.deleteProdInfo", inParam);
		} catch (Exception e) {
			logger.error("deleteProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 상품 정보 수정
	 * 상품 정보를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 29
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateProdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("updateProdInfo start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.update("webSaleManageMapper.updateProdInfoV2", inParam);
		} catch (Exception e) {
			logger.error("updateProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 상품 셰어링 정보 수정
	 * 셰어링 정보를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 29
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateProdShare(Map<String, Object> inParam) throws Exception {
		logger.info("updateProdShare start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.update("webSaleManageMapper.updateProdShare", inParam);
		} catch (Exception e) {
			logger.error("updateProdShare DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 추가 배송비 count
	 * 추가 배송비가 있는지 확인한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 29
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int selectExtLandDlvPriceCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectExtLandDlvPriceCnt start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.selectOne("webSaleManageMapper.selectExtLandDlvPriceCnt", inParam);
		} catch (Exception e) {
			logger.error("selectExtLandDlvPriceCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 추가 배송비 수정
	 * 추가 배송비 정보를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 29
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateExtLandDlvPrice(Map<String, Object> inParam) throws Exception {
		logger.info("updateExtLandDlvPrice start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.update("webSaleManageMapper.updateExtLandDlvPrice", inParam);
		} catch (Exception e) {
			logger.error("updateExtLandDlvPrice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 상품이미지 정보 수정
	 * 상품이미지 정보를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 29
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateProdImg(Map<String, Object> inParam) throws Exception {
		logger.info("updateProdImg start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.update("webSaleManageMapper.updateProdImg", inParam);
		} catch (Exception e) {
			logger.error("updateProdImg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 상품이미지 정보 삭제
	 * 상품이미지 정보를 삭제한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 29
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int deleteProdImg(Map<String, Object> inParam) throws Exception {
		logger.info("deleteProdImg start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.delete("webSaleManageMapper.deleteProdImg", inParam);
		} catch (Exception e) {
			logger.error("deleteProdImg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 등록상품 문의 COUNT
	 * 등록상품 문의 COUNT를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 31
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectListProdQnaCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListProdQnaCnt Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectListProdQnaCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListProdQnaCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 등록상품 문의 리스트 조회
	 * 등록상품 문의 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 31
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListProdQna(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListProdQna Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectListProdQna", inParam);
		} catch (Exception e) {
			logger.error("selectListProdQna DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 등록상품 문의 상세 조회
	 * 등록상품 문의 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 31
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectProdQnaDtl(Map<String, Object> inParam) throws Exception {
		logger.info("selectProdQnaDtl start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectProdQnaDtl", inParam);
		} catch (Exception e) {
			logger.error("selectProdQnaDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 등록상품 문의 답변등록
	 * 등록상품 문의의 답변을 등록한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 31
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateProdQna(Map<String, Object> inParam) throws Exception {
		logger.info("updateProdQna start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.update("webSaleManageMapper.updateProdQna", inParam);
		} catch (Exception e) {
			logger.error("updateProdQna DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 등록상품 문의 답변등록
	 * 등록상품 문의의 답변을 등록한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 31
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int selectListOrderShareCount(Map<String, Object> inParam) throws Exception {
		logger.info("selectListOrderShareCount start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.selectOne("webSaleManageMapper.selectListOrderShareCount", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderShareCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 셰어링상품 주문내역 조회
	 * 셰어링상품 주문내역을 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 31
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderShare(Map<String, Object> inParam) throws Exception {
		logger.info("selectListOrderShare start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectListOrderShare", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderShare DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 셰어링상품 반품내역 총건수
	 * 셰어링상품 반품내역 총건수를 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 01
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int selectOrderShareReturnCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderShareReturnCnt start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.selectOne("webSaleManageMapper.selectOrderShareReturnCnt", inParam);
		} catch (Exception e) {
			logger.error("selectOrderShareReturnCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 셰어링상품 주문내역 상태 변경
	 * 셰어링상품 주문의 상태를 변경한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 01
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateOrderProcStat(Map<String, Object> inParam) throws Exception {
		logger.info("updateOrderProcStat start");
		int rtn = 0;
		try {
			rtn =  sqlSession.update("webSaleManageMapper.updateOrderProcStat", inParam);
		} catch (Exception e) {
			logger.error("updateOrderProcStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 주문 관리 > 판매주문관리 
	 * 배송 업체 운송장 정보 입력 - 주문
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 18
	 * @author M.C.JUNG
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertDlvInvcNumber(Map<String, Object> inParam) throws Exception {
		logger.info("insertDlvInvcNumber Start");
		int result = 0;
		try {
			result = sqlSession.insert("webSaleManageMapper.insertDlvInvcNumber", inParam);
		} catch (Exception e) {
			logger.error("insertDlvInvcNumber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}

	/**
	 * <pre>
	 * 주문취소 사유 등록
	 * 주문취소의 사유를 등록한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 02
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public String insertOrdCancInfo(Map<String, Object> inParam) throws Exception {
		logger.info("insertOrdCancInfo start");
		try {
			sqlSession.update("webSaleManageMapper.insertOrdCancInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdCancInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return (String)inParam.get("CANC_CD");
	}

	/**
	 * <pre>
	 * 주문취소 코드 update
	 * 주문취소 코드 update
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 08
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateOrdProdInfoCanc(Map<String, Object> inParam) throws Exception {
		logger.info("updateOrdProdInfoCanc start");
		int rtn = 0;
		try {
			rtn =  sqlSession.update("webSaleManageMapper.updateOrdProdInfoCanc", inParam);
		} catch (Exception e) {
			logger.error("updateOrdProdInfoCanc DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 셰어링상품 주문내역 상품정보 반납완료
	 * 셰어링상품 주문의 상품정보 반납완료 상태를 변경한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 01
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateOrderShareRtnProd(Map<String, Object> inParam) throws Exception {
		logger.info("updateOrderShareRtnProd start");
		int rtn = 0;
		try {
			rtn =  sqlSession.update("webSaleManageMapper.updateOrderShareRtnProd", inParam);
		} catch (Exception e) {
			logger.error("updateOrderShareRtnProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 셰어링상품 주문 상세 조회
	 * 셰어링상품 주문내역을 상세조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 03
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectOrderShareDtl(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderShareDtl start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectOrderShareDtl", inParam);
		} catch (Exception e) {
			logger.error("selectOrderShareDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 셰어링상품 주문취소 상세 조회
	 * 셰어링상품 주문취소 내역을 상세조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 02
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectOrderShareCancDtl(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderShareCancDtl start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectOrderShareCancDtl", inParam);
		} catch (Exception e) {
			logger.error("selectOrderShareCancDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 출하지 조회
	 * 로그인한 사용자의 출하지 정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 05
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectListGrpProdInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListGrpProdInfo Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectListGrpProdInfo", inParam);
		} catch (Exception e) {
			logger.error("selectListGrpProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 출하지 신규등록
	 * 로그인한 사용자의 출하지 신규등록
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 05
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public BigDecimal insertGrpProdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("insertGrpProdInfo Start");
		try {
			sqlSession.insert("webSaleManageMapper.insertGrpProdInfo", inParam);
		} catch (Exception e) {
			logger.error("selectListGrpProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return (BigDecimal)inParam.get("GRP_PROD_SEQ");
	}

	/**
	 * <pre>
	 * 출하지 조회
	 * 출하지 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 05
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int selectGrpProdMapCnt(Map<String, Object> inParam) throws Exception {
		logger.info("selectGrpProdMapCnt Start");
		int rtn = 0;
		try {
			rtn = sqlSession.selectOne("webSaleManageMapper.selectGrpProdMapCnt", inParam);
		} catch (Exception e) {
			logger.error("selectGrpProdMapCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 셰어링상품 주문반품신청 접수내역
	 * 셰어링상품 주문반품신청 접수내역을 상세조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 07
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectBackReqInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectBackReqInfo start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectBackReqInfo", inParam);
		} catch (Exception e) {
			logger.error("selectBackReqInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 판매상품 주문반품신청 접수내역
	 * 판매상품 주문반품신청 접수내역을 상세조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 07
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectSellBackReqInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectSellBackReqInfo start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectSellBackReqInfo", inParam);
		} catch (Exception e) {
			logger.error("selectSellBackReqInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 출하지 조회
	 * 로그인한 사용자의 출하지 정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 07
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListGrpProdByProd(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListGrpProdByProd Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectListGrpProdByProd", inParam);
		} catch (Exception e) {
			logger.error("selectListGrpProdByProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 반품 운송장 정보 생성
	 * 반품 운송장 정보 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 07
	 * @author Kang.h.c
	 * @비고
	 *
	 * </pre>
	 */
	public int insertChgInvcInfo (Map<String, Object> inParam) throws Exception{
		logger.info("insertChgInvcInfo Start");
		int rtn = 0;
		try {
			rtn = sqlSession.insert("webSaleManageMapper.insertChgInvcInfo", inParam);
		} catch (Exception e) {
			logger.error("insertChgInvcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}
	
	/**
	 * <pre>
	 * 판매상품 주문내역 조회
	 * 판매상품 주문내역 카운트
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 11. 26
	 * @author Y.S.KIM
	 * @비고
	 * 조회내역이 달라서 추가함
	 * </pre>
	 */
	public int selectListOrderSellCount(Map<String, Object> inParam) throws Exception{
		logger.info("selectListOrderSellCount Start");
		int rtn = 0;
		try {
			rtn = sqlSession.selectOne("webSaleManageMapper.selectListOrderSellCount", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderSellCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 판매상품 주문내역 조회
	 * 판매상품 주문내역을 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 07
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderSell(Map<String, Object> inParam) throws Exception {
		logger.info("selectListOrderSell start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectListOrderSell", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderSell DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 판매상품 주문 상세 조회
	 * 판매상품 주문내역을 상세조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 08
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectOrderSellDtl(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderSellDtl start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectOrderSellDtl", inParam);
		} catch (Exception e) {
			logger.error("selectOrderSellDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 상품 전체취소 가능유무
	 * 상품 전체취소 가능유무
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 11
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public String selectOrdSellAllCancYn(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrdSellAllCancYn start");
		String rtn = "";
		try {
			rtn =  sqlSession.selectOne("webSaleManageMapper.selectOrdSellAllCancYn", inParam);
		} catch (Exception e) {
			logger.error("selectOrdSellAllCancYn DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 판매상품 주문취소 상세 조회
	 * 판매상품 주문취소 내역을 상세조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 08
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectOrderSellCancDtl(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderSellCancDtl start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectOrderSellCancDtl", inParam);
		} catch (Exception e) {
			logger.error("selectOrderSellCancDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 일반택배 운송장 정보 등록
	 * 일반택배 운송장 정보를 등록한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 07
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int insertInvcInfo(Map<String, Object> inParam) throws Exception {
		logger.info("insertInvcInfo start");
		int rtn = 0;
		try {
			rtn =  sqlSession.insert("webSaleManageMapper.insertInvcInfo", inParam);
		} catch (Exception e) {
			logger.error("insertInvcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 일반택배 운송장 정보 수정 - 배송완료
	 * 일반택배 운송장 정보를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 08
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateInvcInfo(Map<String, Object> inParam) throws Exception {
		logger.info("updateInvcInfo start");
		int rtn = 0;
		try {
			rtn =  sqlSession.update("webSaleManageMapper.updateInvcInfo", inParam);
		} catch (Exception e) {
			logger.error("updateInvcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 주문내역 금액정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 14
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectOrderAmtInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderAmtInfo start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectOrderAmtInfo", inParam);
		} catch (Exception e) {
			logger.error("selectOrderAmtInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 주문내역 쿠폰사용정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 14
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectOrderCpnUseInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderCpnUseInfo start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectOrderCpnUseInfo", inParam);
		} catch (Exception e) {
			logger.error("selectOrderCpnUseInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 나눔신청내역 총건수
	 * 나눔신청내역 총건수를 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 08
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int selectListOrderFreeCnt(Map<String,Object> inParam) throws Exception {
		logger.info("selectListOrderFreeCnt start");
		int rtn = 0;
		try {
			rtn =  sqlSession.selectOne("webSaleManageMapper.selectListOrderFreeCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderFreeCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 나눔신청내역
	 * 나눔신청내역을 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 08
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderFree(Map<String, Object> inParam) throws Exception {
		logger.info("selectListOrderFree start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectListOrderFree", inParam);
		} catch (Exception e) {
			logger.error("selectListOrderFree DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 나눔신청 상세 조회
	 * 나눔신청 상세내역 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 10
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectOrderFreeReqDtl(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderFreeReqDtl start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectOrderFreeReqDtl", inParam);
		} catch (Exception e) {
			logger.error("selectOrderFreeReqDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 나눔신청 상세 조회
	 * 나눔신청 상세내역 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 10
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectOrderFreeConfDtl(Map<String, Object> inParam) throws Exception {
		logger.info("selectOrderFreeConfDtl start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectOrderFreeConfDtl", inParam);
		} catch (Exception e) {
			logger.error("selectOrderFreeConfDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 나눔상품 신청정보 상태변경
	 * 나눔상품 신청정보 상태변경
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 10
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateOrderFreeReq(Map<String, Object> inParam) throws Exception {
		logger.info("updateOrderFreeReq start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.update("webSaleManageMapper.updateOrderFreeReq", inParam);
		} catch (Exception e) {
			logger.error("updateOrderFreeReq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 상품 상태변경
	 * 상품 상태변경
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 23
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int updateProdStatCd(Map<String, Object> inParam) throws Exception {
		logger.info("updateProdStatCd start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.update("webSaleManageMapper.updateProdStatCd", inParam);
		} catch (Exception e) {
			logger.error("updateProdStatCd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 나눔신청 정보 조회
	 * 나눔신청 정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 10
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> selectProdSubmitInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectProdSubmitInfo start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectProdSubmitInfo", inParam);
		} catch (Exception e) {
			logger.error("selectProdSubmitInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 주문정보 생성
	 * 주문정보 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 11
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public String insertOrdInfo(Map<String, Object> inParam) throws Exception{
		logger.info("insertOrdInfo start");
		try {
			sqlSession.insert("webSaleManageMapper.insertOrdInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return StringUtil.nvl((String)inParam.get("ORD_CD"));
	}

	/**
	 * <pre>
	 * 주문 배송지정보 생성
	 * 주문 배송지정보 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 11
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int insertOrdDlvInfo(Map<String, Object> inParam) throws Exception {
		logger.info("insertOrdDlvInfo start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.insert("webSaleManageMapper.insertOrdDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdDlvInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * 주문 상품정보 생성
	 * 주문 상품정보 생성
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 11
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public int insertOrdProdInfo(Map<String, Object> inParam) throws Exception {
		logger.info("insertOrdProdInfo start");
		int rtn = 0 ;
		try {
			rtn =  sqlSession.insert("webSaleManageMapper.insertOrdProdInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	/**
	 * <pre>
	 * insertProdOpInfo
	 * 상품 옵션정보 등록
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 6
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public int insertProdOpInfo (Map<String, Object> inParam) throws Exception{
		logger.info("insertProdOpInfo Start");
		return sqlSession.insert("webSaleManageMapper.insertProdOpInfo", inParam);
	}

	/**
	 * <pre>
	 * selectSellAdjustHist
	 * 판매 정산조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 20
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> selectSellAdjustHist(Map<String, Object> inParam) throws Exception {
		logger.info("selectSellAdjustHist start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectSellAdjustHist", inParam);
		} catch (Exception e) {
			logger.error("selectSellAdjustHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * selectShareAdjustHist
	 * 셰어링 정산조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 21
	 * @author Kang.h.c
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> selectShareAdjustHist(Map<String, Object> inParam) throws Exception {
		logger.info("selectShareAdjustHist start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectShareAdjustHist", inParam);
		} catch (Exception e) {
			logger.error("selectShareAdjustHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * selectProdQnaInfo
	 * 상품문의정보 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 06
	 * @author
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> selectProdQnaInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectProdQnaInfo start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("webSaleManageMapper.selectProdQnaInfo", inParam);
		} catch (Exception e) {
			logger.error("selectProdQnaInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 판매관리 주문상품 내역
	 * 판매관리 주문상품 내역을 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 18
	 * @author obiwan
	 * @비고
	 * </pre>
	 */
	public Map<String, Object> procOrderSearchMain(Map<String, Object> inParam) throws Exception {
		logger.info("procOrderSearchMain start");
		Map<String, Object> result = null;
		try {
			result =  sqlSession.selectOne("webSaleManageMapper.procOrderSearchMain", inParam);
		} catch (Exception e) {
			logger.error("procOrderSearchMain DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	public List<Map<String, Object>> selectDlvInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectDlvInfo start");
		List<Map<String, Object>> result = null;
		try {
			result =  sqlSession.selectList("webSaleManageMapper.selectDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("procOrderSearchMain DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	

	public Map<String, Object> selectCheckDlvInfo(Map<String, Object> inParam) throws Exception {
		logger.info("procOrderSearchMain start");
		Map<String, Object> result = null;
		try {
			result =  sqlSession.selectOne("webSaleManageMapper.selectCheckDlvInfo", inParam);
		} catch (Exception e) {
			logger.error("procOrderSearchMain DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}

	public int insertGrpProdInfoReg(Map<String, Object> insertMap) {
		return sqlSession.insert("webSaleManageMapper.insertGrpProdInfoReg", insertMap);
	}
	

	public int insertGrpProdInfoRegV2(Map<String, Object> insertMap) {
		
		sqlSession.insert("webSaleManageMapper.insertGrpProdInfoRegV2", insertMap);
		return ((BigDecimal)insertMap.get("GRP_PROD_SEQ")).intValue();
	}

	/**
	 * <pre>
	 * 판매관리 나눔상풍 수락여부 체크
	 * 판매관리 나눔상풍 수락여부 체크한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 18
	 * @author obiwan
	 * @see com.ssocio.sharing.service.web
	 * </pre>
	 */
	public int checkFreeConfirm(Map<String, Object> inParam) {
		// TODO Auto-generated method stub
		int rtn = sqlSession.selectOne("webSaleManageMapper.checkFreeConfirm", inParam);
		return rtn;
	}

	public int updateGrpProdInfoRegAll(Map<String, Object> insertMap) throws Exception {
		// TODO Auto-generated method stub
		logger.info("deleteProdInfo start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.update("webSaleManageMapper.updateGrpProdInfoRegAll", insertMap);
		} catch (Exception e) {
			logger.error("deleteProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return rtn;
	}

	
	/**
	 * <pre>
	 * 제휴택배 정보
	 * 제휴택배 정보 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 07
	 * @author Kang.h.c
	 * @비고
	 * </pre>
	 */
	public List<Map<String, Object>> selectRelDevInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectRelDevInfo start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("webSaleManageMapper.selectRelDevInfo", inParam);
		} catch (Exception e) {
			logger.error("selectRelDevInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	
//	public void updateProdInfoV2(Map<String, Object> inParam) throws Exception {
//		logger.info("updateProdInfo start");
//		int rtn = 0 ;
//		try {
//			rtn = sqlSession.update("webSaleManageMapper.updateProdInfoV2", inParam);
//		} catch (Exception e) {
//			logger.error("updateProdInfo DB Error : " + e.toString());
//			throw new Exception(RspnsCnst.RC1000000004);
//		}
//	}

	
	public void updateProdSimple(Map<String, Object> insertMap) throws Exception {
		logger.info("updateProdInfo start");
		int rtn = 0 ;
		try {
			rtn = sqlSession.update("webSaleManageMapper.updateProdInfoV2", insertMap);
		} catch (Exception e) {
			logger.error("updateProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	/**
	 * 사용자 카테고리코드 조회
	 * @param inParam
	 * @return
	 * @throws Exception
	 */
	public String selectUsrCtryCd() throws Exception  {
		return sqlSession.selectOne("webSaleManageMapper.selectUsrCtryCd");
	}

	
	/**
	 * 	11,12,13,14,15,16 번 이미지 삭제
	 */
	public void deleteProdInfoV2(String prodCode) {
		sqlSession.delete("webSaleManageMapper.deleteProdInfoV2" , prodCode);
	}

	/**
	 * 상품의 상태값 조회
	 * @param string
	 * @return
	 */
	public String selectProdStat(String prodCode) {
		return sqlSession.selectOne("webSaleManageMapper.selectProdStat", prodCode);
	}

}
