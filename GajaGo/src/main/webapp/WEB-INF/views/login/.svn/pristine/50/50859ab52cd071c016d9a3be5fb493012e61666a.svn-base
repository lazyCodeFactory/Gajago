package com.ssocio.sharing.service.admin;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.dao.admin.AdminCodeDao;

/**
 * <pre>
 * 공통 코드 서비스 인터페이스
 * 공통 코드 처리를 위한 서비스 인터 페이스
 * @author S.B.LEE
 * @version
 * @since 2015. 7. 9. 오후 5:56:43
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 9.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
@Service
public class AdminCodeServiceImpl extends AdminReferServiceImpl implements AdminCodeService {
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminCodeServiceImpl.class);

	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="adminCodeDao")
	private AdminCodeDao adminCodeDao;
	/**
	 * <pre>
	 * Code 리스트 조회
	 * Code 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 9. 오후 5:58:50
	 * @author SEOKBAE
	 * @see @see com.ssocio.sharing.service.admin.AdminCodeService#selectListCode(java.util.Map)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public ModelMap selectListCode(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.selectListCode [Start]");
		ModelMap mm = new ModelMap();
		try {
			mm.put("selectListCode",adminCodeDao.selectListCode(inParam));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	
	/**
	 * <pre>
	 * 그룹코드 중복 체크
	 * 그룹코드 등록시 그룹코드의 중복 사용을 체크 합니다.
	 * @param strParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 9. 오후 7:43:58
	 * @author SEOKBAE
	 * @see @see com.ssocio.sharing.service.admin.AdminCodeService#chkOverlapGroupCode(java.lang.String)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public boolean chkOverlapGroupCode(String strParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.chkOverlapGroupCode [Start]");
		boolean result = false;
		try {
			result = adminCodeDao.chkOverlapGroupCode(strParam)>0?true:false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 그룹코드 등록
	 * 그룹코드를 등록한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 7:45:33
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public int insertGroupCodeReg(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.insertGroupCodeReg [Start]");
		int outParam = 0;
		try {
			outParam = adminCodeDao.insertGroupCodeReg(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 그룹코드 사용여부 변경
	 * 그룹코드의 사용여부를 변경한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:29:55
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public int updateGroupUseYn(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.updateGroupUseYn [Start]");
		int outParam = 0;
		try {
			outParam = adminCodeDao.updateGroupUseYn(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 그룹코드 조회
	 * 그룹코드를 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:42:45
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public ModelMap selectGroup(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.selectGroup [Start]");
		ModelMap mm = new ModelMap();
		try {
			mm.put("selectGroup",adminCodeDao.selectGroup(inParam).get("selectGroup"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	
	/**
	 * <pre>
	 * Code그룹별 리스트 조회
	 * Code그룹별 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 9:22:19
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public ModelMap selectListCodeGroup(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.selectListCodeGroup [Start]");
		ModelMap mm = new ModelMap();
		try {
			mm.put("selectListCodeGroup",adminCodeDao.selectListCodeGroup(inParam));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	
	/**
	 * <pre>
	 * 그룹코드 수정
	 * 그룹코드를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 9:45:11
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public int updateGroupCodeReg(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.updateGroupCodeReg [Start]");
		int outParam = 0;
		try {
			outParam = adminCodeDao.updateGroupCodeReg(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 그룹코드 삭제
	 * 그룹코드를 삭제한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 9:33:57
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public int deleteGroupReg(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.deleteGroupReg [Start]");
		int outParam = 0;
		try {
			outParam = adminCodeDao.deleteGroupReg(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 공통코드 중복 체크
	 * 공통코드 등록시 그룹코드의 중복 사용을 체크 합니다.
	 * @param strParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 10:17:56
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public boolean chkOverlapCode(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.chkOverlapCode [Start]");
		boolean result = false;
		try {
			result = adminCodeDao.chkOverlapCode(inParam)>0?true:false;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 공통코드 등록
	 * 공통코드를 등록한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 10:34:05
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public int insertCodeReg(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.insertCodeReg [Start]");
		int outParam = 0;
		try {
			outParam = adminCodeDao.insertCodeReg(inParam);
		} catch (Exception e) {
			e.printStackTrace(); 
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 공통코드 수정
	 * 공통코드를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 10:34:33
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public int updateCodeReg(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.updateCodeReg [Start]");
		int outParam = 0;
		try {
			outParam = adminCodeDao.updateCodeReg(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 코드 정렬순서 변경
	 * 코드 정렬순서를 변경합니다.
	 * @param arryGroupCode
	 * @param arryCodeCd
	 * @param arrySortSeq
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 9. 오후 10:55:05
	 * @author SEOKBAE
	 * @see @see com.ssocio.sharing.service.admin.AdminCodeService#updateCodeSort(java.lang.String, java.lang.String[], java.lang.String[])
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public int updateCodeSort(String arryGroupCode, String[] arryCodeCd, String[] arrySortSeq) throws Exception {
		logger.debug("AdminCodeServiceImpl.updateCodeReg [Start]");
		int outParam = 0;
		try {
			for(int i=0; i<arrySortSeq.length;i++){
				Map<String, Object> setParam = new HashMap<String,Object>();
				setParam.put("I_SORT", arrySortSeq[i]);
				setParam.put("I_GROUP_CODE", arryGroupCode);
				setParam.put("I_CODE", arryCodeCd[i]);
				outParam += adminCodeDao.updateCodeSort(setParam);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 공통코드 조회
	 * 공통코드를 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 11:37:42
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public ModelMap selectCode(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.selectCode [Start]");
		ModelMap mm = new ModelMap();
		try {
			mm.put("selectCode",adminCodeDao.selectCode(inParam).get("selectCode"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	
	/**
	 * <pre>
	 * 공통코드 사용여부 변경
	 * 공통코드의 사용여부를 변경한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 11:47:53
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public int updateCodeUseYn(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.updateCodeUseYn [Start]");
		int outParam = 0;
		try {
			outParam = adminCodeDao.updateCodeUseYn(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 공통코드 삭제
	 * 공통코드를 삭제한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 11:54:21
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public int deleteCodeReg(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.deleteCodeReg [Start]");
		int outParam = 0;
		try {
			outParam = adminCodeDao.deleteCodeReg(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 제휴택배사 코드조회
	 * 제휴택배사 코드를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 9:22:19
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	@Override
	public ModelMap selectDlvCompList(Map<String, Object> inParam) throws Exception {
		logger.debug("AdminCodeServiceImpl.selectDlvCompList [Start]");
		ModelMap mm = new ModelMap();
		try {
			mm.put("dlvList",adminCodeDao.selectDlvCompList(inParam));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	
}
