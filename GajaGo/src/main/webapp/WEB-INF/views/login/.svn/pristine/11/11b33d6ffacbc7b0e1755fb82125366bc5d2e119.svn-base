package com.ssocio.sharing.dao.admin;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.cmmn.web.RspnsCnst;

@Component
public class AdminCodeDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminCodeDao.class);
	
	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//	 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//	 -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionAdmin")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * Code 리스트 조회
	 * Code 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 5:58:30
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListCode(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListCode Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminCodeMapper.selectListCode", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 그룹코드 중복 체크
	 * 그룹코드 중복 사용을 체크 합니다.
	 * @param strParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 10:15:55
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int chkOverlapGroupCode(String strParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("chkOverlapGroupCode Start");
		int result = 0;
		try {
			result =  sqlSession.selectOne("adminCodeMapper.chkOverlapGroupCode", strParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 그룹코드 등록
	 * 그룹코드를 등록한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:28:22
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertGroupCodeReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.insertGroupCodeReg Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.insertGroupCodeReg", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 그룹코드 사용여부 변경
	 * 그룹코드의 사용여부를 변경한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:28:57
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateGroupUseYn(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.updateGroupUseYn Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.updateGroupUseYn", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 그룹코드 조회
	 * 그룹코드를 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:42:07
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public ModelMap selectGroup(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectGroup Start");
		ModelMap mm = new ModelMap();
		try {
			mm.put("selectGroup", sqlSession.selectOne("adminCodeMapper.selectGroup", inParam));
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return mm;
	}
	
	/**
	 * <pre>
	 * Code 그룹별 리스트 조회
	 * Code 그룹별 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 9:21:18
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListCodeGroup(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListCodeGroup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminCodeMapper.selectListCodeGroup", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * <pre>
	 * 그룹코드 수정
	 * 그룹코드를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 9:44:32
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateGroupCodeReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.updateGroupCodeReg Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.updateGroupCodeReg", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 그룹코드 삭제
	 * 그룹코드를 삭제한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 9:33:04
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int deleteGroupReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.deleteGroupReg Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.deleteGroupReg", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 공통코드 중복 체크
	 * 공통코드 등록시 그룹코드의 중복 사용을 체크 합니다.
	 * @param strParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 10:17:00
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int chkOverlapCode(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("chkOverlapCode Start");
		int result = 0;
		try {
			result =  sqlSession.selectOne("adminCodeMapper.chkOverlapCode", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}
	
	/**
	 * <pre>
	 * 공통코드 등록
	 * 공통코드를 등록한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 10:32:54
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertCodeReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.insertCodeReg Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.insertCodeReg", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 공통코드 수정
	 * 공통코드를 수정한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 10:33:20
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateCodeReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.updateCodeReg Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.updateCodeReg", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	public int updateCodeSort(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.updateCodeSort Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.updateCodeSort", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 공통코드 조회
	 * 공통코드를 조회한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 11:36:41
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public ModelMap selectCode(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCode Start");
		ModelMap mm = new ModelMap();
		try {
			mm.put("selectCode", sqlSession.selectOne("adminCodeMapper.selectCode", inParam));
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return mm;
	}
	
	/**
	 * <pre>
	 * 공통코드 사용여부 변경
	 * 공통코드의 사용여부를 변경한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 11:46:50
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateCodeUseYn(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.updateCodeUseYn Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.updateCodeUseYn", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 공통코드 삭제
	 * 공통코드를 삭제한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 11:53:47
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int deleteCodeReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("adminCodeMapper.deleteCodeReg Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.insert("adminCodeMapper.deleteCodeReg", inParam);
		} catch (Exception e) {
			logger.error("selectOneLastAutoIncrement DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	public Object selectEvtDtl(String evtGrpCd) {
		// TODO Auto-generated method stub
		return null;
	}

	 
	
	/**
	 * <pre>
	 * Code 그룹별 리스트 조회
	 * Code 그룹별 리스트를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 9:21:18
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectDlvCompList(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectDlvCompList Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminCodeMapper.selectDlvCompList", inParam);
		} catch (Exception e) {
			logger.error("selectDlvCompList DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
}
