package com.ssocio.sharing.service.admin;

import java.io.Reader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.Resource;

import oracle.sql.CLOB;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ssocio.sharing.cmmn.admin.util.FileUtil;
import com.ssocio.sharing.cmmn.elasticsearch.Elasticsearch;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.dao.admin.AdminCommonDao;
import com.ssocio.sharing.dao.admin.AdminSPProdDao;
import com.ssocio.sharing.vo.admin.PageNavigation;
/**
 * <pre>
 * 스마트폰 쉐어링 서비스
 * 쉐어링 스마트폰 상품 관리를 윈한 서비스 
 * @author J.S.LEE
 * @version
 * @since 2015. 7. 10. 오후 6:15:37
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 10.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
@Service
public class AdminSPProdServiceImpl implements AdminSPProdService {
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminSPProdServiceImpl.class);

	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="adminSPProdDao")
	private AdminSPProdDao adminSPProdDao;
	@Resource(name="adminCommonDao")
	private AdminCommonDao adminCommonDao;
	
	@Override
	public ModelMap selectListSPProd(Map<String, Object> inParam) throws Exception {
		
		ModelMap mm = new ModelMap();
		//페이지번호
		int nowPage = StringUtil.nvlInt((String)inParam.get("PAGE_NO"), 1);
		int rowCnt	= StringUtil.nvlInt((String)inParam.get("S_ROW_CNT"), 10);
		String today = StringUtil.getCurrentDate();
		inParam.put("S_END_DATE", StringUtil.nvl((String)inParam.get("S_END_DATE"), today));
		inParam.put("S_START_DATE", StringUtil.nvl((String)inParam.get("S_START_DATE"), today));
		inParam.put("S_ROW_CNT", rowCnt);
		
		LoggerUtil.writeMap(inParam);
		
		int rowTotal = adminSPProdDao.selectListSPProdCount(inParam); //전체 Row Count
		PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, rowCnt, CmmnCnst.ADM_BLOCK_SIZE);
		
		mm.put("PAGE_NO"	   ,nowPage);
		mm.put("pageNav", pageNav);
	
		try {
			inParam.put("START_ROW", pageNav.getStartRow());
			inParam.put("END_ROW", pageNav.getEndRow());
			
			System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			System.out.println("@pageNav.getStartRow() : " + pageNav.getStartRow());
			System.out.println("@pageNav.getEndPage() : " + pageNav.getEndRow());
			System.out.println("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			
			mm.put("selectListProd",adminSPProdDao.selectListSPProd(inParam));
			mm.put("selectListTel",adminSPProdDao.selectListDefaultTelinfo());
			mm.put("selecListProdCnt", adminSPProdDao.selectListRegSPProd());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}

	/**
	 * <pre>
	 * 핸드폰 등록시 필요한 기본 제조사, 통신사 , 용량 리스트 가져오기 
	 * 핸드폰 등록시 필요한 기본 제조사, 통신사 , 용량 리스트 가져오기 
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 13. 오후 1:07:34
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.service.admin.AdminSPProdService#selectListDefaultProdinfo()
	 * @비고
	 * 
	 * </pre>
	*/
	@Override
	public Object selectListDefaultProdinfo() throws Exception {
		ModelMap mm = new ModelMap();
		Map<String,Object> inData = new HashMap<String,Object>();
		try {
			mm.put("selectListTel",adminSPProdDao.selectListDefaultTelinfo());
			mm.put("selectListPeriod",adminSPProdDao.selectListPeriod());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return mm;
	}

	
	/**
	 * <pre>
	 * 콤마 없애기  ( 리스트 건, 단일건 포함 )
	 * 콤마 없애기 ( 리스트 건, 단일건 포함 )
	 * @param inParam
	 * @param str
	 * @param listflag
	 * @param idx
	 * @return
	 * @exception
	 * @date 2015. 9. 16. 오후 11:48:53
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.service.admin
	 * @비고
	 * 
	 * </pre>
	*/
	public String replaceStr(Map<String, Object> inParam,String str,boolean listflag,int idx){
		String convertStr = "";
		if(listflag){
			convertStr = (String) inParam.get(str+idx);   
		}else{
			convertStr = (String) inParam.get(str);   
		}
		return convertStr.replaceAll(",", "");
		
	}
	/**
	 * <pre>
	 * 스마트폰 등록 하기 
	 * 스마트폰 등록 하기 
	 * @param req
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 14. 오후 6:15:56
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.service.admin.AdminSPProdService#insertSPProdREg(org.springframework.web.multipart.MultipartHttpServletRequest, java.util.Map)
	 * @비고
	 * 
	 * </pre>
	*/
	@Override
	public Object insertSPProdREg(MultipartHttpServletRequest req,
			Map<String, Object> inParam) throws Exception {
		int cnt = 0;
		
		
//		inParam.put("SPPROD_SELL_PRCE",replaceStr(inParam,"SPPROD_SELL_PRCE",false,0) );
//		inParam.put("MANUFACTURER_PRCE",replaceStr(inParam,"MANUFACTURER_PRCE",false,0) );
//		inParam.put("REMAIN_AMOUNT_PRCE",replaceStr(inParam,"REMAIN_AMOUNT_PRCE",false,0) );
//		inParam.put("INSURANCE_PRCE",replaceStr(inParam,"INSURANCE_PRCE",false,0) );
//		inParam.put("SERVICIZING_PRCE",replaceStr(inParam,"SERVICIZING_PRCE",false,0) );
		
		// sp_prod tb insert
		String prod_code = adminSPProdDao.insertSPProdTBReg(inParam);
		inParam.put("PROD_CODE", prod_code);
		// prod tb insert 
		cnt = adminSPProdDao.newinserTProdTBReg(inParam);
		int tempData = 0;
		
		String ChkColor = (String) inParam.get("SPPROD_COLOR");
		Pattern p = Pattern.compile(",");
		Matcher m = p.matcher(ChkColor);
		if (m.find()){
			 String[] GUBUN_CD= ChkColor.split(",");
			 
			 for(int i=0; i < GUBUN_CD.length; i++){
				 inParam.put("SPPROD_COLOR", GUBUN_CD[i]);
				 
				 adminSPProdDao.insertColorTB(inParam);
			 }
			
		}else{
			 cnt =	adminSPProdDao.insertColorTB(inParam);
		}
		
		for(int i=0; i < Integer.parseInt((String)inParam.get("TOTAL_LENG")); i++){
			Map<String, Object> insParam = new HashMap<String,Object>();
//			insParam.put("PROD_CODE", inParam.get("PROD_CODE"));
//			insParam.put("PAY_SEL",inParam.get("PAY_SEL"+i));
//			insParam.put("STIP_SEL", inParam.get("STIP_SEL"+i));
//			insParam.put("SALE_SUPP_PRCE", replaceStr(inParam,"SALE_SUPP_PRCE",true,i));
//			insParam.put("SALE_SUPP_PRCE_PERCENT",inParam.get("SALE_SUPP_PRCE_PERCENT"+i) );
//			insParam.put("SALE_GSUPP_PRCE", replaceStr(inParam,"SALE_GSUPP_PRCE",true,i));
//			insParam.put("SALE_GSUPP_PRCE_PERCENT", inParam.get("SALE_GSUPP_PRCE_PERCENT"+i));
//			insParam.put("SALE_DISC_PRCE", replaceStr(inParam,"SALE_DISC_PRCE",true,i));
//			insParam.put("SHARING_PRCE", replaceStr(inParam,"SHARING_PRCE",true,i));

			insParam.put("PROD_CODE", inParam.get("PROD_CODE"));
			insParam.put("PAY_SEL",inParam.get("PAY_SEL"+i));
			insParam.put("STIP_SEL", inParam.get("STIP_SEL"));
			insParam.put("SALE_SUPP_PRCE", inParam.get("SALE_SUPP_PRCE"+i));
			insParam.put("SALE_SUPP_PRCE_PERCENT",inParam.get("SALE_SUPP_PRCE_PERCENT"+i) );
			insParam.put("SALE_GSUPP_PRCE", inParam.get("SALE_GSUPP_PRCE"+i));
			insParam.put("SALE_GSUPP_PRCE_PERCENT", inParam.get("SALE_GSUPP_PRCE_PERCENT"+i));
			insParam.put("SALE_DISC_PRCE", inParam.get("SALE_DISC_PRCE"+i));
			insParam.put("MOVE_AGENCY_URL", inParam.get("MOVE_AGENCY_URL"+i));
			insParam.put("SHARING_FEE_PRCE", inParam.get("SHARING_FEE_PRCE"+i));
			insParam.put("SSOCIO_FEE_PRCE", 0);
			insParam.put("SHARING_PRCE", replaceStr(inParam,"SHARING_PRCE",true,i));
			int test = Integer.parseInt(replaceStr(inParam,"SHARING_PRCE",true,i));
			if(tempData < test){
				tempData = Integer.parseInt(replaceStr(inParam,"SHARING_PRCE",true,i));
			}
			 cnt =	adminSPProdDao.insertSPProdDtlReg(insParam);
		}
		
		
		
		
		Iterator<String> fns = req.getFileNames();
		  while(fns.hasNext()) {
		   String fn = fns.next();
		   logger.debug("FN="+fn);
		   
		   String[] GUBUN_CD= fn.split("_");
		   
		   logger.debug("TESTSETSETSETSETSETSETSET : " + GUBUN_CD[5]);
		   
			MultipartFile file = req.getFile(fn);//PC 리스트 이미지
			
			logger.debug("#$@#$@$@#$@#$@#$@#$@#$@#");
			logger.debug(" modelCode :"+ inParam.get("MODEL_CODE"));
			logger.debug("#$@#$@$@#$@#$@#$@#$@#$@#");
		    	if(file != null){
		    		inParam.put("SP_IMG_GB_CD", GUBUN_CD[5]);
		    		
		    		Map<String, Object> fileInfo= FileUtil.saveMultipartFile(file);//파일 저장				

					logger.debug("[I_FILE_TITLE]"+fileInfo.get("I_FILE_TITLE"));	//파일제목
					logger.debug("[I_FILE_NM]"+fileInfo.get("I_FILE_NM"));			//파일명
					logger.debug("[I_FILE_URL]"+fileInfo.get("I_FILE_URL"));		//파일URL
					logger.debug("[I_FILE_PATH]"+fileInfo.get("I_FILE_PATH"));		//파일경로
					logger.debug("[I_FILE_SIZE]"+fileInfo.get("I_FILE_SIZE"));		//파일사이즈
					logger.debug("[I_FILE_EXT]"+fileInfo.get("I_FILE_EXT"));		//파일확장자

					String FILE_SEQ = adminCommonDao.insertFile(fileInfo);	
					inParam.put("FILE_NO", FILE_SEQ);
					   cnt =	adminSPProdDao.insertSPImageTB(inParam);
		    }
		  }
	    if(cnt > 0){
	    	   try {
	    		   Map<String, Object> indexingMap = new HashMap<String, Object>();
	    	          indexingMap.put("PROD_CODE",(String)inParam.get("PROD_CODE"));//상품코드
	    	          indexingMap.put("PROD_NM",(String)inParam.get("SPPROD_PROD_NM"));//상품명
	    	          indexingMap.put("KEYWORD",(String)inParam.get("SEARCH_KEWORD"));//키워드
	    	          indexingMap.put("VIEW_YN", "Y");//노출여부
	    	          indexingMap.put("ORD_QTY","0");//판매수
	    	          indexingMap.put("SELL_PRCE", String.valueOf(tempData));//가격
	    	          indexingMap.put("REGIST_DT",StringUtil.getCurrentDate());//등록일
	                indexingMap.put("PROD_TYPE_CD","4");//상품타입
	              //1.판매 , 2.셰어링, 3.나눔 4.스마트폰셰어링 5.렌탈
	                indexingMap.put("CTRY","0000");//카테고리  단일이기때문에
                    
	               
	                Elasticsearch.putSearchIndexing(indexingMap);
	      } catch (Exception e) {
	                e.printStackTrace();
	      }
	    }
		  
		  
		return  cnt;
	}

	/**
	 * <pre>
	 * 상품 업데이트 하기 위한 정보 가져오기 
	 * 상품 업데이트 하기 위한 정보 가져오기
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 15. 오후 1:44:49
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.service.admin.AdminSPProdService#updateProd(java.util.Map)
	 * @비고
	 * 
	 * </pre>
	*/
	@Override
	public Object updateProd(Map<String, Object> inParam) throws Exception {
		ModelMap mm = new ModelMap();
		List<Map<String, Object>> ColorData = new ArrayList<Map<String, Object>>();
		List<Map<String, Object>> DtlList = new ArrayList<Map<String, Object>>();
		
		
		try {
			String[] arryKey = new String[2];
			arryKey[0]="PROD_PC_DTL";//PC용상세설명     CLOB=>String
			arryKey[1]="PROD_MB_DTL";//모바일용상품설명 CLOB=>String
			Map<String, Object> prodInfo = clobToString(adminSPProdDao.updateProd(inParam),arryKey);//상품조회 후 CLOB변환
			mm.put("PROD_DEFALT_INFO",prodInfo);
			mm.put("SELECTLISTTEL",adminSPProdDao.selectListDefaultTelinfo());		
			mm.put("PROD_FILE_INFO", adminSPProdDao.selectFileInfo(inParam));
			mm.put("PROD_DTL_INFO", adminSPProdDao.selectListSpProdDtlTb(inParam));
			logger.debug(adminSPProdDao.selectListSpProdDtlTb(inParam).toString());
			inParam.put("TEL_SEL", prodInfo.get("TELCOM_CODE"));
			mm.put("PayPlanInfo", adminSPProdDao.selectListselectListPay(inParam));
			mm.put("selectListPeriod",adminSPProdDao.selectListPeriod());
			mm.put("selectListColor",adminSPProdDao.selectProdColor(inParam));
			ColorData =  adminSPProdDao.selectProdColor(inParam);
			String str = "";
			
			System.out.println("#$%#$%#$%#$%#$%#$%#$%#$%#$%#$%");
			System.out.println(ColorData.size());
			for(int i=0; i<ColorData.size(); i++){
				if( i == 0){
					str = (String) ColorData.get(i).get("COLOR_NAME");
				}else{
					str += "," + (String) ColorData.get(i).get("COLOR_NAME");
				}
				
			}
			mm.put("COLOR_NAME", str);
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return mm;
	}
	

	@Override
	public Object uPdatePProdREg(Map<String, Object> inParam,MultipartHttpServletRequest req) throws Exception {
		Integer retCnt = 0;

		//sp prod tble 정보 수정
		adminSPProdDao.updatePProdTBReg(inParam);
		//prod tbl 수정 ( 상품명 , 상세 , 검색어)
		adminSPProdDao.updateProdTBReg(inParam);

			int tempData = 0;
		
			Iterator<String> fns = req.getFileNames();
		  while(fns.hasNext()) {
			  String fn = fns.next();
			  logger.debug("FN="+fn);
			  String[] GUBUN_CD= fn.split("_");
			  MultipartFile file = req.getFile(fn);//PC 리스트 이미지
		    	if(file != null){
		    		inParam.put("SP_IMG_GB_CD", GUBUN_CD[5]);
		    		
		    		Map<String, Object> fileInfo= FileUtil.saveMultipartFile(file);//파일 저장				
		    										FileUtil.deleteFile(inParam);
					logger.debug("[I_FILE_TITLE]"+fileInfo.get("I_FILE_TITLE"));	//파일제목
					logger.debug("[I_FILE_NM]"+fileInfo.get("I_FILE_NM"));			//파일명
					logger.debug("[I_FILE_URL]"+fileInfo.get("I_FILE_URL"));		//파일URL
					logger.debug("[I_FILE_PATH]"+fileInfo.get("I_FILE_PATH"));		//파일경로
					logger.debug("[I_FILE_SIZE]"+fileInfo.get("I_FILE_SIZE"));		//파일사이즈
					logger.debug("[I_FILE_EXT]"+fileInfo.get("I_FILE_EXT"));		//파일확장자

					String FILE_SEQ = adminCommonDao.insertFile(fileInfo);	
					
					inParam.put("FILE_NO", FILE_SEQ);
					 retCnt = adminSPProdDao.CheckImgData(inParam);
					if(retCnt > 0){
						adminSPProdDao.updateImgTBreg(inParam);	
						String DEL_FILE_NO = (String) inParam.get("H_SP_PROD_IMG_GB_CD_"+GUBUN_CD[5]);
						inParam.put("DEL_FILE_NO", DEL_FILE_NO);
						adminSPProdDao.SPProdfileTBDel(inParam);
					}else{
						adminSPProdDao.insertSPImageTB(inParam);
					}
				}
			}
		  
		  retCnt = adminSPProdDao.deleteSPprodDtlTb(inParam);
		  if(retCnt > 0){
				for(int i=0; i < Integer.parseInt((String)inParam.get("TOTAL_LENG")); i++){
					Map<String, Object> insParam = new HashMap<String,Object>();
					insParam.put("PROD_CODE", inParam.get("PROD_CODE"));
					insParam.put("PAY_SEL",inParam.get("PAY_SEL"+i));
					insParam.put("STIP_SEL", inParam.get("STIP_SEL"));
					insParam.put("SALE_SUPP_PRCE", inParam.get("SALE_SUPP_PRCE"+i));
					insParam.put("SALE_SUPP_PRCE_PERCENT",inParam.get("SALE_SUPP_PRCE_PERCENT"+i) );
					insParam.put("SALE_GSUPP_PRCE", inParam.get("SALE_GSUPP_PRCE"+i));
					insParam.put("SALE_GSUPP_PRCE_PERCENT", inParam.get("SALE_GSUPP_PRCE_PERCENT"+i));
					insParam.put("SALE_DISC_PRCE", inParam.get("SALE_DISC_PRCE"+i));
					insParam.put("MOVE_AGENCY_URL", inParam.get("MOVE_AGENCY_URL"+i));
					insParam.put("SHARING_FEE_PRCE", inParam.get("SHARING_FEE_PRCE"+i));
					insParam.put("SSOCIO_FEE_PRCE", 0);
					insParam.put("SHARING_PRCE", replaceStr(inParam,"SHARING_PRCE",true,i));
					System.out.println("insParam : " + insParam);
					int test = Integer.parseInt(replaceStr(inParam,"SHARING_PRCE",true,i));
					if(tempData < test){
						tempData = Integer.parseInt(replaceStr(inParam,"SHARING_PRCE",true,i));
					}
					retCnt =	adminSPProdDao.insertSPProdDtlReg(insParam);
				}
		  }
		   try {
			   Map<String, Object> indexingMap = new HashMap<String, Object>();
		          indexingMap.put("PROD_CODE",inParam.get("PROD_CODE"));//�곹뭹肄붾뱶
		          indexingMap.put("PROD_NM",inParam.get("SPPROD_PROD_NM"));//�곹뭹紐�
		          indexingMap.put("KEYWORD",inParam.get("KEYWORD"));//�ㅼ썙��
		          indexingMap.put("VIEW_YN", inParam.get("PROD_SHOW_YN"));//�몄텧�щ�
		       
		          indexingMap.put("SELL_PRCE", String.valueOf(tempData));//媛�꺽
		          indexingMap.put("REGIST_DT",StringUtil.getCurrentDate());//�깅줉��
	            indexingMap.put("PROD_TYPE_CD","4");//�곹뭹��엯
	            //1.�먮ℓ , 2.�곗뼱留� 3.�섎닎 4.�ㅻ쭏�명룿�곗뼱留�5.�뚰깉
	            indexingMap.put("CTRY","0000");//移댄뀒怨좊━  �⑥씪�닿린�뚮Ц��
	            
	            Elasticsearch elasticsearch = new Elasticsearch();
	            elasticsearch.upadteSearchIndexing(indexingMap);
	            //Elasticsearch.putSearchIndexing(indexingMap);
	  } catch (Exception e) {
	            e.printStackTrace();
	  }
		  
		return retCnt;
	}   
	/**
	  *  Map<String, Object>에 담긴 Clob를  String[] arryKey로 추출하여 String형태로 변환해서 Map를 Return.
	  *  
	  *  @param   map        Data
	  *  @param   arryKey    CLOB key
	  *  @return   Map<String, Object>
	  */
	public static Map<String, Object> clobToString(Map<String, Object> map, String[] arryKey) throws Exception{
		for(String key : arryKey){
			CLOB clob = (CLOB)map.get(key);
 		if(clob !=null){
 			Reader reader = clob.getCharacterStream();
 			StringBuffer out = new StringBuffer();
 			char[] buff = new char[1024];
 			int nchars = 0;	  
 			
 			while((nchars = reader.read(buff))>0){
 				out.append(buff,0,nchars);
 			}
 			map.put(key, out.toString());
			}else{
			  map.put(key, "");
			}
		}
		return map;
	}

	@Override
	public Object SPProdImageDel(Map<String, Object> inParam) throws Exception {
		int Cnt = 0;
		try {
			Cnt = adminSPProdDao.SPProdImageDel(inParam);
			Cnt = adminSPProdDao.SPProdfileTBDel(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return Cnt;
	}

	@Override
	public Object SPProdpreView(Map<String, Object> inParam) throws Exception {
		ModelMap mm = new ModelMap();
		List<Map<String, Object>> ColorData = new ArrayList<Map<String, Object>>();
		List<Map<String, Object>> FileData = new ArrayList<Map<String, Object>>();
		
		
		try {
			String[] arryKey = new String[2];
			arryKey[0]="PROD_PC_DTL";//PC용상세설명     CLOB=>String
			arryKey[1]="PROD_MB_DTL";//모바일용상품설명 CLOB=>String
			Map<String, Object> prodInfo = clobToString(adminSPProdDao.updateProd(inParam),arryKey);//상품조회 후 CLOB변환
			mm.put("PROD_DEFALT_INFO",prodInfo);
			mm.put("SELECTLISTTEL",adminSPProdDao.selectListDefaultTelinfo());		
			mm.put("PROD_FILE_INFO", adminSPProdDao.selectFileInfo(inParam));
			System.out.println(mm.get("PROD_FILE_INFO"));
			ColorData =  adminSPProdDao.selectProdColor(inParam);
			String str = "";
			
			System.out.println("#$%#$%#$%#$%#$%#$%#$%#$%#$%#$%");
			System.out.println(ColorData.size());
			for(int i=0; i<ColorData.size(); i++){
				if( i == 0){
					str = (String) ColorData.get(i).get("COLOR_NAME");
				}else{
					str += "," + (String) ColorData.get(i).get("COLOR_NAME");
				}
				
			}
			mm.put("COLOR_NAME", str);
			
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return mm;
	}

	@Override
	public List<Map<String, Object>> selectListPayinfo(Map<String, Object> inParam)
			throws Exception {
		return adminSPProdDao.selectListselectListPay(inParam);
	}

	/**
	 * <pre>
	 * 칼라 삭제 여부 확인 
	 * 칼라 삭제 여부 확인 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 25. 오전 1:30:30
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.service.admin.AdminSPProdService#SPProdColorDelConf(java.util.Map)
	 * @비고
	 * 
	 * </pre>
	*/
	@Override
	public int SPProdColorDelConf(Map<String, Object> inParam)
			throws Exception {
		return adminSPProdDao.SPProdColorDelConf(inParam);
	}

	@Override
	public int SPProdColorDelReg(Map<String, Object> inParam)
			throws Exception {
		return adminSPProdDao.SPProdColorDelReg(inParam);
	}

	/**
	 * <pre>
	 * 칼라 추가 하기 
	 * 칼라 추가 하기 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 25. 오전 10:55:27
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.service.admin.AdminSPProdService#SPProdColorAddReg(java.util.Map)
	 * @비고
	 * 
	 * </pre>
	*/
	@Override
	public ModelMap SPProdColorAddReg(Map<String, Object> inParam)
	 		throws Exception {
		String ChkColor = (String) inParam.get("SPPROD_COLOR");
		List<String> insColorData = new ArrayList<String>();
		ModelMap mm = new ModelMap();
		Pattern p = Pattern.compile(",");
		int Cnt = 0;
		Matcher m = p.matcher(ChkColor);
		if (m.find()){
			
			String[] result = ChkColor.split(",");
			
			for(int i=0; i< result.length; i++){
				
				insColorData.add(result[i]);
			}
			 
			 inParam.put("SPPROD_COLOR_LIST", insColorData);
			 
			 Cnt = adminSPProdDao.CheckColorData(inParam);
		}else{
			insColorData.add(ChkColor);
			 inParam.put("SPPROD_COLOR_LIST", insColorData);
			 Cnt = adminSPProdDao.CheckColorData(inParam);
		}
		//이미 같은 이름이 존재하는 경우 
		if(Cnt > 0){
			Cnt = 0;
			mm.put("Cnt", Cnt);
			mm.put("RetGubun", "D");
		}else{
			
			 for(int i=0; i < insColorData.size(); i++){
				 inParam.put("SPPROD_COLOR", insColorData.get(i));
				 Cnt = adminSPProdDao.insertColorTB(inParam);
				}
			 if(Cnt > 0){
				 mm.put("RetGubun", "S");
				 mm.put("Cnt", Cnt);
			 }else{
				 mm.put("RetGubun", "F");
				 mm.put("Cnt", Cnt); 
			 }
		}
		
		mm.put("colorList", adminSPProdDao.selectProdColor(inParam));
		return mm;
	}

	@Override
	public String insertSPPrevImg(MultipartHttpServletRequest req,
			Map<String, Object> inParam) throws Exception {
		String guBun = (String) inParam.get("PRW_IMG");
		MultipartFile TelcomImg = req.getFile(guBun);
		Map<String, Object> fileInfo = null;
		if(TelcomImg != null && TelcomImg.getSize() > 0){
			fileInfo= FileUtil.saveMultipartFile(TelcomImg);//파일 저장
		}
		
		return (String) fileInfo.get("I_FILE_URL");
	}
	
}
