<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ page import="com.fasterxml.jackson.databind.annotation.JsonDeserialize"%>
<%@ page import="java.util.HashMap"%>
<%@ page import="java.util.Map"%>
<%@ page import="java.util.*" %>
<%@ page import="javax.xml.ws.Response"%>
<%@ page import="com.fasterxml.jackson.databind.ObjectMapper" %>
<%@ page import="com.fasterxml.jackson.core.type.TypeReference" %>
<%@ page import="java.io.IOException" %>
<%@ page import="java.io.PrintWriter" %>
<%@ page import="com.util.PaycoUtil" %>
<%@ include file="common_include.jsp" %>
<%
/**-----------------------------------------------------------------------
 * 구매예약처리 페이지(JSP)
 *------------------------------------------------------------------------
 * @Class payco_reserve.jsp
 * @author PAYCO기술지원<dl_payco_ts@nhnent.com>
 * @since
 * @version
 * @Description 
 * 가맹점에서 전달한 파라미터를 받아 JSON 형태로 페이코API 와 통신한다.
 */
%>
<% 
	
	ObjectMapper mapper = new ObjectMapper(); 		  //jackson json object
	PaycoUtil util 		= new PaycoUtil(serverType); //CommonUtil

	/* 이전 페이지에서 전달받은 고객 주문번호 설정 */
	String customerOrderNumber = (String)request.getParameter("customerOrderNumber");

	/*======== 상품정보 변수 선언 ========*/
	int OrderNumber, orderQuantity, productUnitPrice, productUnitPaymentPrice, productAmt, deliveryFeeAmt; 
	int productPaymentAmt, TotalProductPaymentAmt, sortOrdering;
	int totalTaxfreeAmt, totalTaxableAmt, totalVatAmt;
	String iOption;
	String productName;
	String productInfoUrl;
	String orderConfirmUrl;
	String orderConfirmMobileUrl;
	String productImageUrl;
	String sellerOrderProductReferenceKey;
	String taxationType;
	/*=====================================*/
	
	/*======== 변수 초기화 ========*/
	TotalProductPaymentAmt = 0;	//주문 상품이 여러개일 경우 상품들의 총 금액을 저장할 변수
	OrderNumber = 0;			//주문 상품이 여러개일 경우 순번을 매길 변수
	totalTaxfreeAmt = 0;		//총 면세 금액
	totalTaxableAmt = 0;		//총 과세 공급가액
	totalVatAmt = 0;			//총 과세 부가세액
	/*=============================*/
	
	/*==== 첫번째 상품정보 값 입력 ====*/
	OrderNumber = OrderNumber + 1; 										 // 상품에 순번을 정하기 위해 값을 증가합니다.
	orderQuantity = 1;													 //[필수]주문수량 (배송비 상품인 경우 1로 세팅)
	productUnitPrice = 12000;											 //[필수]상품 단가 ( 테스트용으로써 12000원으로 설정)
	productUnitPaymentPrice = 10000 + 1000;					 			 //[필수]상품 결제 단가 ( 테스트용으로써 10000원으로 설정, 배송비 설정시 상품가격에 포함시킴 ex) 1000원)
	productAmt = productUnitPrice * orderQuantity;						 //[필수]상품 결제금액(상품단가 * 수량)
	productPaymentAmt = productUnitPaymentPrice * orderQuantity;		 //[필수]상품 결제금액(상품결제단가 * 수량)
	iOption = "신발사이즈 외";											 //[선택]옵션(최대 100 자리)
	sortOrdering = OrderNumber;											 //[필수]상품노출순서, 10자 이내
	productName = "아디다스 위네오 슈퍼 웨지";							 //[필수]상품명, 4000자 이내
	orderConfirmUrl = "";												 //[선택]주문완료 후 주문상품을 확인할 수 있는 url, 4000자 이내
	orderConfirmMobileUrl = "";											 //[선택]주문완료 후 주문상품을 확인할 수 있는 모바일 url, 1000자 이내
	productImageUrl = "";												 //[선택]이미지URL(배송비 상품이 아닌 경우는 필수), 4000자 이내, productImageUrl에 적힌 이미지를 썸네일해서 PAYCO 주문창에 보여줍니다.
	sellerOrderProductReferenceKey = "ITEM_100001";						 //[필수]가맹점에서 관리하는 상품키, 100자 이내.(외부가맹점에서 관리하는 주문상품 연동 키(sellerOrderProductReferenceKey)는 주문 별로 고유한 key이어야 합니다.)
	taxationType = "TAXATION";											 //[선택]과세타입(기본값 : 과세). DUTYFREE :면세, COMBINE : 결합상품, TAXATION : 과세
	
	//주문정보를 구성하기 위한 상품들 누적 결제 금액(상품결제금액) 
	TotalProductPaymentAmt = TotalProductPaymentAmt + productPaymentAmt; // 주문상품 총 금액
	
	// totalTaxfreeAmt(면세상품 총액) / totalTaxableAmt(과세상품 총액) / totalVatAmt(부가세 총액) => 일부 필요한 가맹점을위한 예제입니다.
	//면세상품일 경우
	if(taxationType.equals("DUTYFREE")){ 
		totalTaxfreeAmt = 11000;
	
	//과세상품일 경우
	}else if(taxationType.equals("TAXATION")){
		totalTaxableAmt = 9900; 
		totalVatAmt = 1100;
				
	//복합상품일 경우
	}else if(taxationType.equals("COMBINE")){
		totalTaxfreeAmt = 0;
		totalTaxableAmt = 9900;
		totalVatAmt = 1100;
	}

	//상품값으로 읽은 변수들로 Json String 을 작성합니다.
	List<Map<String,Object>> orderProducts = new ArrayList<Map<String,Object>>();
	
	Map<String,Object> productInfo = new HashMap<String,Object>(); 
	productInfo.put("cpId", cpId);														//[필수]상점ID
	productInfo.put("productId", productId);											//[필수]상품ID
	productInfo.put("productAmt", productAmt);											//[필수]상품금액(상품단가 * 수량)
	productInfo.put("productPaymentAmt", TotalProductPaymentAmt);						//[필수]상품결제금액(상품결제단가 * 수량)
	productInfo.put("orderQuantity", orderQuantity);									//[필수]주문수량(배송비 상품인 경우 1로 셋팅)
	productInfo.put("option", iOption);													//[선택]상품 옵션
	productInfo.put("sortOrdering", sortOrdering);										//[필수]상품 노출순서
	productInfo.put("productName", productName);										//[필수]상품명
	productInfo.put("orderConfirmUrl", orderConfirmUrl);								//[선택]주문완료 후 주문상품을 확인할 수 있는 URL
	productInfo.put("orderConfirmMobileUrl", orderConfirmMobileUrl); 					//[선택]주문완료 후 주문상품을 확인할 수 있는 모바일 URL
	productInfo.put("productImageUrl", productImageUrl);								//[선택]이미지 URL(배송비 상품이 아닌 경우는 필수)
	productInfo.put("sellerOrderProductReferenceKey", sellerOrderProductReferenceKey);	//[필수]외부가맹점에서 관리하는 주문상품 연동 키
	productInfo.put("taxationType", taxationType);										//[선택]과세타입(면세상품 : DUTYFREE, 과세상품 : TAXATION (기본), 결합상품 : COMBINE)
	orderProducts.add(productInfo);
	/*=====================================================================================================*/
	
	/*======== 주문정보 변수 선언 ========*/
	int totalOrderAmt, totalDeliveryFeeAmt, totalPaymentAmt; 
	String sellerOrderReferenceKey;
	String sellerOrderReferenceKeyType;
	String iCurrency;
	String orderSheetUiType;
	String orderTitle;
	String orderMethod;
	String serviceUrl;
	String serviceUrlParam;
	String returnUrl;
	String returnUrlParam;
	String nonBankbookDepositInformUrl;
	String orderChannel;
	String inAppYn;
	String individualCustomNoInputYn;
	String payMode;
	/*=====================================*/		
			
	/*==== 주문정보 값 입력(가맹점 수정 가능 부분) ========================================================*/		
	sellerOrderReferenceKey 	= customerOrderNumber;						 //[필수]외부가맹점의 주문번호
	sellerOrderReferenceKeyType = "UNIQUE_KEY";								 //[선택]외부가맹점의 주문번호 타입(UNIQUE_KEY : 기본값, DUPLICATE_KEY : 중복가능한 키->외부가맹점의 주문번호가 중복 가능한 경우 사용)
	iCurrency 					= "KRW";									 //[선택]통화(default=KRW)
	totalPaymentAmt 			= TotalProductPaymentAmt;			 		 //[필수]총 결재 할 금액
	orderTitle 					= "payco 결제 테스트 주문(JSP)";			 //[선택]주문 타이틀
	returnUrl 					= domainName+"/payco_return.jsp";			 //[선택]주문완료 후 Redirect 되는 Url
	returnUrlParam 				= "{\"cart_no\":\"20151234567\"}";			 //[선택]주문완료 후 Redirect 되는 URL과 함께 전달되어야 하는 파라미터(Json 형태의 String)
	nonBankbookDepositInformUrl = domainName+"/payco_without_bankbook.jsp";	 //[선택]무통장입금완료통보 URL
	orderMethod					= "EASYPAY";								 //[필수]주문유형
	orderChannel 				= "MOBILE";										 //[선택]주문채널 (default : PC/MOBILE)
	inAppYn 					= "N";										 //[선택]인앱결제 여부(Y/N) (default = N)
	individualCustomNoInputYn 	= "N";										 //[선택]개인통관고유번호 입력 여부 (Y/N) (default = N)
	orderSheetUiType 			= "GRAY";									 //[선택]주문서 UI 타입 선택(선택 가능값 : RED/GRAY)		
	payMode						= "PAY2";									 //[선택]결제모드(PAY1 : 결제인증,승인통합 / PAY2 : 결제인증,승인분리)
																			 
	
	//설정한 주문정보로 Json String 을 작성합니다.		
	Map<String,Object> orderInfo = new HashMap<String,Object>();
	orderInfo.put("sellerKey", sellerKey);										//[필수]가맹점 코드
	orderInfo.put("sellerOrderReferenceKey", sellerOrderReferenceKey); 			//[필수]외부가맹점 주문번호
	orderInfo.put("sellerOrderReferenceKeyType", sellerOrderReferenceKeyType);  //[선택]외부가맹점의 주문번호 타입
	orderInfo.put("currency", iCurrency);										//[선택]통화
	orderInfo.put("totalPaymentAmt", totalPaymentAmt);							//[필수]총 결제금액(면세금액,과세금액,부가세의 합) totalTaxfreeAmt + totalTaxableAmt + totalVatAmt
	orderInfo.put("totalTaxfreeAmt", totalTaxfreeAmt);							//[선택]면세금액(면세상품의 공급가액 합)
	orderInfo.put("totalTaxableAmt", totalTaxableAmt);							//[선택]과세금액(과세상품의 공급가액 합)
	orderInfo.put("totalVatAmt", totalVatAmt);									//[선택]부가세(과세상품의 부가세 합)
	orderInfo.put("orderTitle", orderTitle); 									//[선택]주문 타이틀
	orderInfo.put("returnUrl", returnUrl);										//[선택]주문완료 후 Redirect 되는 URL
	orderInfo.put("returnUrlParam", returnUrlParam);							//[선택]주문완료 후 Redirect 되는 URL과 함께 전달되어야 하는 파라미터(Json 형태의 String)
	orderInfo.put("nonBankbookDepositInformUrl", nonBankbookDepositInformUrl); 	//[선택]무통장입금완료 통보 URL
	orderInfo.put("orderMethod", orderMethod);									//[필수]주문유형
	orderInfo.put("orderChannel", orderChannel);								//[선택]주문채널
	orderInfo.put("inAppYn", inAppYn);											//[선택]인앱결제 여부
	orderInfo.put("individualCustomNoInputYn", individualCustomNoInputYn);		//[선택]개인통관 고유번호 입력 여부
	orderInfo.put("orderSheetUiType", orderSheetUiType);						//[선택]주문서 UI타입 선택
	orderInfo.put("payMode", payMode);											//[선택]결제모드(PAY1 : 결제인증,승인통합 / PAY2 : 결제인증,승인분리)
	orderInfo.put("orderProducts", orderProducts);								//[필수]주문상품 리스트
	
	Map<String,Object> extraData = new HashMap<String,Object>();
	extraData.put("payExpiryYmdt", "20160210180000");							//[선택]해당 주문예약건 만료 처리 일시 (해당 일시 이후에는 결제 불가)
	extraData.put("virtualAccountExpiryYmd", "20160512150000");					//[선택]가상계좌만료일시
	extraData.put("cancelMobileUrl", "http://www.payco.com");					//[선택]모바일 결제페이지에서 취소 버튼 클릭시 이동할 URL (결제창 이전 URL 등). 미입력시 메인 URL로 이동
	
	Map<String,Object> viewOptions = new HashMap<String,Object>();
	viewOptions.put("showMobileTopGnbYn", "N");									//[선택]모바일 상단 GNB 노출여부
	viewOptions.put("iframeYn", "N");											//[선택]Iframe 호출(모바일에서 접근하는경우 iframe 사용시 이값을 "Y"로 보내주셔야 합니다.)
	
	extraData.put("viewOptions", viewOptions);									//[선택]화면 UI 옵션
																				
	orderInfo.put("extraData",  mapper.writeValueAsString(extraData).toString().replaceAll("\"", "\\\""));	//[선택]부가정보 - Json 형태의 String
	
	// 주문예약 API 호출 함수
	String result = util.payco_reserve(orderInfo,logYn);
	// {"code":1002,"message":"인증 정보가 유효하지 않습니다."}
	
	
	try {
	    PrintWriter pw;
	    pw = response.getWriter();
	    response.setContentType("application/json; charset=utf-8");
	    pw.print(result);
	    pw.flush();
	    pw.close();
	    
	} catch (IOException e) {
		e.printStackTrace();
	}

%>