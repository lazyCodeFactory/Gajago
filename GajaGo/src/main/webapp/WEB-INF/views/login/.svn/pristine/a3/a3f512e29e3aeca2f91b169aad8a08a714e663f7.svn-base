package com.ssocio.sharing.dao.web;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

@Component
public class WebBoardDao {
//	 --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebBoardDao.class);
	
	//	코드 리스트 조회	
	private static final String SELECT_LIST_TYPE_CD = "webBoardMapper.selectListTypeCd";
	
	//	FAQ
	private static final String SELECT_LIST_FAQ = "webBoardMapper.selectListFaq";
	private static final String SELECT_LIST_NOTICE = "webBoardMapper.selectListNotice";
	
	//	공지 사항
	private static final String SELECT_NOTICE = "webBoardMapper.selectNotice";
	private static final String SELECT_MAIN_NOTICE = "webBoardMapper.selectMainNotice";
	
	//	1대1 문의
	private static final String SELECT_USER_INFO = "webBoardMapper.selectUserInfo";
	private static final String INSERT_ONE_REG = "webBoardMapper.insertOneReg";
	
	//	상품 문의 
	private static final String INSERT_PROD_QNA = "webBoardMapper.insertProdQna";

	//	상품 후기
	private static final String SELECT_COUNT_REVIEW = "webBoardMapper.selectCountReview";
	private static final String SELECT_LIST_REVIEW = "webBoardMapper.selectListReview";
	private static final String SELECT_REVIEW = "webBoardMapper.selectReview";
	private static final String SELECT_REVIEW_MOD = "webBoardMapper.selectReviewMod";
	
	//	게시글 신고
	private static final String SELECT_SUSPECT = "webBoardMapper.selectSuspect";
	private static final String INSERT_SUSPECT = "webBoardMapper.insertSuspect";
	
	// 판매자 신고
	private static final String INSERT_SELLER_SUSPECT = "webBoardMapper.insertSellerSuspect";
	private static final String SELECT_SELLER_SUSPECT = "webBoardMapper.selectSellerSuspect";
	
	
	
	// 나눔 댓글
	private static final String SELECT_NANUM = "webBoardMapper.selectNanum";
	private static final String SELECT_NANUM_CNT = "webBoardMapper.selectNanumCnt";

	//	상품 댓글
	private static final String SELECT_LIST_COMMENT = "webBoardMapper.selectListComment";
	private static final String SELECT_LIST_COMMENT_BY_PROD = "webBoardMapper.selectListCommentByProd";
	private static final String SELECT_LIST_RE_COMMENT_BY_PROD = "webBoardMapper.selectListReCommentByProd";
	private static final String SELECT_LIST_ADD_COMMENT_BY_PROD = "webBoardMapper.selectProdComment";
	private static final String INSERT_COMMENT = "webBoardMapper.insertProdComment";
	private static final String UPDATE_COMMENT = "webBoardMapper.updateComment";
	private static final String DELETE_COMMENT = "webBoardMapper.deleteComment";
	private static final String select_ProdNanum_list = "webBoardMapper.selectProdNanumlist";
	
	//PUSH URL
	private static final String SELECT_PUSH_IF_URL = "webBoardMapper.selectPushIFUrl";
	
	//판매자 시퀀스 가져오기
	private static final String SELECT_PROD_MBER_SEQ = "webBoardMapper.selectProdMberSeq";
	
	//상품후기 카운트 
	private static final String SELECT_REVIEW_CNT = "webBoardMapper.selectCntReview";
	
	private static final String SELECT_LIST_PC_REVIEW_CNT = "webBoardMapper.selectListPcReviewCnt";
	private static final String SELECT_LIST_PC_REVIEW = "webBoardMapper.selectListPcReview";
	
	private static final String SELECT_LIST_PC_COMMENT_BY_PROD = "webBoardMapper.selectListPcCommentByProd";
	private static final String SELECT_LIST_PC_COMMENT_BY_PROD_CNT = "webBoardMapper.selectListPcCommentByProdCnt";
	
	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	public List<Map<String, Object>> selectListTypeCd(String typeCd) throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_TYPE_CD, typeCd);
	}

	/**
	 * <pre>
	 * 자주묻는 질문 리스트 
	 * 자주묻는 질문 리스트 
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 18. 오후 8:13:36
	 * @author LeeJinSe
	 * @param inParam 
	 * @see com.ssocio.sharing.dao.web
	 * @비고
	 * 
	 * </pre>
	*/
	public List<Map<String, Object>> selectFaqList(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECTFAQLIST START");
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		try {
			list =  sqlSession.selectList(SELECT_LIST_FAQ, inParam);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	/**
	 * <pre>
	 * 공지사항 리스트 가져오기 
	 * 공지사항 리스트 가져오기 
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 17. 오후 4:56:25
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.dao.web
	 * @비고
	 * 
	 * </pre>
	*/
	public  List<Map<String, Object>> selectListNotice() throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_NOTICE START");
		return sqlSession.selectList(SELECT_LIST_NOTICE);
	}

	public Map<String, Object> selectNotice(String boardSeq)  throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_NOTICE START");
		return sqlSession.selectOne(SELECT_NOTICE, boardSeq);
	}
	
	public Map<String, Object> selectMainNotice(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_MAIN_NOTICE START");
		return this.sqlSession.selectOne(SELECT_MAIN_NOTICE, inParam);
	}
	public List<Map<String, Object>> selectMainNoticeList(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_MAIN_NOTICE START");
		return sqlSession.selectList("webBoardMapper.selectMainNotice", inParam);
	}
	
	public Map<String, Object> selectUserInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_USER_INFO Start");

		return sqlSession.selectOne(SELECT_USER_INFO, inParam);
	}

	public int insertOneReg(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("INSERT_ONE_REG Start");

		return sqlSession.insert(INSERT_ONE_REG, inParam);
	}
	
	public int insertProdQna(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("INSERT_PROD_QNA START");
		return this.sqlSession.insert(INSERT_PROD_QNA, inParam);
	}
	
	public int selectCountReview(String prodCode) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_REVIEW START");
		return this.sqlSession.selectOne(SELECT_COUNT_REVIEW, prodCode);
	}
	
	public Map<String, Object> selectListReview(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_REVIEW START");
		return this.sqlSession.selectOne(SELECT_LIST_REVIEW, inParam);
	}
	
	public Map<String, Object> selectReview(String boardSeq) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_REVIEW START");
		return this.sqlSession.selectOne(SELECT_REVIEW, boardSeq);
	}
	
	public Map<String, Object> selectReviewMod(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_REVIEW START");
		return this.sqlSession.selectOne(SELECT_REVIEW_MOD, inParam);
	}
	
	public int selectSuspect(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_SUSPECT START");
		return this.sqlSession.selectOne(SELECT_SUSPECT, inParam);
	}
	
	public int insertSuspect(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("INSERT_SUSPECT START");
		return this.sqlSession.insert(INSERT_SUSPECT, inParam);
	}
	
	public Map<String, Object> selectListComment(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_COMMENT START");
		return this.sqlSession.selectOne(SELECT_LIST_COMMENT, inParam);
	}
	
	public Map<String, Object> selectListCommentByProd(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_COMMENT_BY_PROD START");
		return this.sqlSession.selectOne(SELECT_LIST_COMMENT_BY_PROD, inParam);
	}
	
	public Map<String, Object> selectListReCommentByProd(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_RE_COMMENT_BY_PROD START");
		return this.sqlSession.selectOne(SELECT_LIST_RE_COMMENT_BY_PROD, inParam);
	}
	
	public Map<String, Object> selectProdComment(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_RE_COMMENT_BY_PROD START");
		return this.sqlSession.selectOne(SELECT_LIST_ADD_COMMENT_BY_PROD, inParam);
	}
	
	public int insertComment(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("INSERT_COMMENT START");
		return this.sqlSession.insert(INSERT_COMMENT, inParam);
	}

	public int updateComment(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("UPDATE_COMMENT START");
		return this.sqlSession.update(UPDATE_COMMENT, inParam);
	}
	
	public int deleteComment(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("DELETE_COMMENT START");
		return this.sqlSession.delete(DELETE_COMMENT, inParam);
	}
	
	public int selectSellerSuspect(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_SELLER_SUSPECT START");
		return this.sqlSession.selectOne(SELECT_SELLER_SUSPECT, inParam);
	}
	
	public int insertSellerSuspect(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("INSERT_SELLER_SUSPECT START");
		return this.sqlSession.insert(INSERT_SELLER_SUSPECT, inParam);
	}

	public Map<String,Object> selectProdNanum(Map<String, Object> inParam) {
		// ------------------------------------------------------------------------
		// # 나눔신청 목록
		// ------------------------------------------------------------------------
		logger.info("SELECT PROD NANUM START");		
		return this.sqlSession.selectOne(SELECT_NANUM, inParam);
	}

	public int selectCountProdNanumCnt(Map<String, Object> inParam) {
		// ------------------------------------------------------------------------
		// # 나눔신청 목록
		// ------------------------------------------------------------------------
		logger.info("SELECT PROD NANUM START START");	
		return this.sqlSession.selectOne(SELECT_NANUM_CNT, inParam);
//		return this.sqlSession.selectOne(SELECT_NANUM_CNT, inParam);
	}

	public int selectListPcReviewCnt(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_PC_REVIEW_CNT START");
		return this.sqlSession.selectOne(SELECT_LIST_PC_REVIEW_CNT, inParam);
	}
	
	public Map<String, Object> selectListPcReview(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListPcReview START");
		return this.sqlSession.selectOne(SELECT_LIST_PC_REVIEW, inParam);
	}

	public int selectListPcCommentByProdCnt(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_PC_COMMENT_BY_PROD_CNT START");
		return this.sqlSession.selectOne(SELECT_LIST_PC_COMMENT_BY_PROD_CNT, inParam);
	}
	
	public Map<String, Object> selectListPcCommentByProd(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("SELECT_LIST_PC_COMMENT_BY_PROD START");
		return this.sqlSession.selectOne(SELECT_LIST_PC_COMMENT_BY_PROD, inParam);
	}

	public String selectPushIFUrl() throws Exception{
		return this.sqlSession.selectOne(SELECT_PUSH_IF_URL);
	}
	
	
	public String selectProdMberSeq(Map<String, Object> inParam) throws Exception{

		return this.sqlSession.selectOne(SELECT_PROD_MBER_SEQ,inParam);
	}

	public int selectCntReview(Map<String, Object> paramDto) {
		logger.debug("paramDto : 	" + paramDto.toString());
		return this.sqlSession.selectOne(SELECT_REVIEW_CNT, paramDto);
	}
}
