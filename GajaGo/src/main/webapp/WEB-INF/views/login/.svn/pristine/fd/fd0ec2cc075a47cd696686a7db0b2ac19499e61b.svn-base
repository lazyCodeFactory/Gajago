package com.ssocio.sharing.service.admin;

import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.admin.util.FileUtil;
import com.ssocio.sharing.cmmn.instance.config.AppConfigManager;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.dao.admin.AdminCommonDao;
import com.ssocio.sharing.vo.admin.AdminSession;
import com.ssocio.sharing.vo.admin.MenuInfoVO;

/**
 * <pre>
 * 공통 서비스
 * 공통 처리를 위한 서비스
 * @author S.B.LEE
 * @version
 * @since 2015. 6. 22.. 오후 4:19:34
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 6. 22.	|	S.B.LEE	|신규
 * @쌔애
 * </pre>
 */
@Service
public class AdminCommonServiceImpl extends AdminReferServiceImpl implements AdminCommonService {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminCommonServiceImpl.class);

	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="adminCommonDao")
	private AdminCommonDao adminCommonDao;


	/**
	 * <pre>
	 * 관리자 로그인
	 * 관리자의 로그인을 처리한다.
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 6. 22. 오후 4:22:03
	 * @author SEOKBAE
	 * @see @see com.ssocio.sharing.admin.service.AdminCommonService#setLogin(java.util.Map)
	 * @비고
	 *
	 * </pre>
	 */
	@Override
	public AdminSession setLogin(Map<String, Object> inParam) throws Exception {
		logger.debug("[AdminCommonService.setLogin]");
		AdminSession manager = null;
		try {
			manager = adminCommonDao.setLogin(inParam);
			if(manager != null){
				String pwd = manager.getADM_PSSWD();
				String inputPwd = CommonUtil.getEncPassword((String)inParam.get("ADM_PSSWD"));
				if(pwd.equals(inputPwd)){
					if(manager.getFAIL_CNT() <= 5){
						manager.setLogin(true);
					}
				}else{
					adminCommonDao.updateLoginFailCnt(inParam);
				}
			}
		}catch (Exception e) {
			throw e;
		}
		return manager;
	}

	public ModelMap selectListMenu(Map<String, Object> inParam) throws Exception {
		logger.debug("[AdminCommonService.selectListMenu]");
		ModelMap mm = new ModelMap();
		List<Map<String, Object>> list = null;
		try {
			list = adminCommonDao.selectListMenu(inParam);
			List<MenuInfoVO> menuList = new ArrayList<MenuInfoVO>();//전체메뉴 목록
			MenuInfoVO menu = null; //상위메뉴(Map)+하위메뉴(List<Map>)

			for (int i = 0; i < list.size(); i++) {
				Map<String, Object> item = list.get(i);
				if(item.get("PARENT_MENU_CD")==null || item.get("PARENT_MENU_CD").equals("")){
					if(i>0) {
						menuList.add(menu);
					}//이전 loop 에서 만들어진 메뉴 등록
					menu = new MenuInfoVO();    //새로운 메뉴 클래스 생성
					menu.setTopMenuInfo(item);  //상위메뉴 set
				} else {
					menu.putSubMenuList(item);//메뉴 클래스에 하위메뉴 put
				}
			} // End of for(Map<String, Object> item : list)
			menuList.add(menu);//마지막 Loop에서 생성한 메뉴 등록
			mm.put("selectListMenu", menuList);

			
			// [2015-12-28] rocokang // 일치하는 링크를 찾아서, top_content 부분에 사용
			String reqUri = StringUtils.defaultString((String)inParam.get("reqUri"), "");
			logger.debug("reqUri : " + reqUri);
			
			List<Map<String,String>> topContentMenuList = new ArrayList<Map<String,String>>();
			Map<String,String> topContentMenuMap = new HashMap<String,String>();
			
			// 홈메뉴
			topContentMenuMap.put("menuNm", "Home");
			topContentMenuMap.put("menuLink", "#");
			topContentMenuList.add(topContentMenuMap);
			
			
			// 중간메뉴
			for (MenuInfoVO menuInfoVO : menuList) {
				
				if(menuInfoVO.getSubMenuList().size()==0){
					continue;
				}
				
				// 하위메뉴 일치
				for ( Map<String,Object> subMap : menuInfoVO.getSubMenuList()){
					String subMenuLink = (String) subMap.get("LINK_ADDR");
					String subMenuNm = (String) subMap.get("MENU_NM");
					String topMenuLink = (String) menuInfoVO.getTopMenuInfo().get("LINK_ADDR");
					String topMenuNm = (String) menuInfoVO.getTopMenuInfo().get("MENU_NM");
					
					
					if(reqUri.equals(subMenuLink)){
						topContentMenuMap = new HashMap<String,String>();
						topContentMenuMap.put("menuNm", topMenuNm);
						topContentMenuMap.put("menuLink", topMenuLink);
						topContentMenuList.add(topContentMenuMap);
						
						topContentMenuMap = new HashMap<String,String>();
						topContentMenuMap.put("menuNm", subMenuNm);
						topContentMenuMap.put("menuLink", subMenuLink);
						topContentMenuList.add(topContentMenuMap);
						

						logger.debug("sub메뉴 일치" + menuInfoVO.toString());
						break;
					}
				}
			}
			mm.put("topContentMenuList", topContentMenuList);
			
			logger.debug("mm : " + mm.toString());
			
		}catch (Exception e) {
			e.printStackTrace();
		}
		logger.debug("mm : " + mm.toString());
		return mm;
	}

	/**
	 * <pre>
	 * 에디터 이미지 업로드
	 * 에디터에서 첨부한 이미지를 등록합니다.
	 * @param req
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 16. 오후 5:28:07
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public String uploadImgEditor(MultipartHttpServletRequest req) throws Exception{
		logger.debug("☆★☆★[Editor Img Upload]☆★☆★");
		String rtn="";

		List<MultipartFile> files = req.getFiles("UPLOAD_FILE");
	    for(MultipartFile file: files){
			Map<String, Object> fileInfo= FileUtil.saveMultipartFile(file);//파일 저장
			String fileSeq = adminCommonDao.insertFile(fileInfo);
			Map<String, Object> fileMap = adminCommonDao.selectFileInfo(fileSeq);

			rtn+="sFileURL="+fileMap.get("FILE_URL")+"&";
	    }
	    logger.debug("[rtn]"+rtn);

		return rtn;
	}

	public String selectShareUrl() throws Exception{
		return adminCommonDao.selectShareUrl();
	}

	@Override
	public ModelMap shareImg(Map<String, Object> inParam) throws Exception {
		String targetUrl = null;
		ModelAndView mav = new ModelAndView("jsonView");
		String url = adminCommonDao.selectShareUrl();
		ModelMap mm = new ModelMap();

		HttpClient httpClient = HttpClientBuilder.create().build();
		try {
			logger.info("shareImg no URL = " + url);

			HttpPost httpPost = new HttpPost(url);

			JSONObject json = new JSONObject();
	        json.put("seq", (String)inParam.get("fileSeq"));
	        json.put("type_cd", (String)inParam.get("type_cd"));
	        StringEntity params = new StringEntity(json.toJSONString());

	        logger.info("StringEntity = " + params.toString());
	        httpPost.addHeader("content-type", "application/json");
	        httpPost.addHeader("Accept","application/json");
	        httpPost.setEntity(params);

	        HttpResponse httpResponse = httpClient.execute(httpPost);
	        String shareImg = EntityUtils.toString(httpResponse.getEntity());

	        JSONParser parser = new JSONParser();
			JSONObject jsonString = (JSONObject)parser.parse(shareImg);

			logger.debug("json : " + jsonString.get("url"));
			logger.debug("json : " + jsonString.get("error"));

			targetUrl = (String)jsonString.get("url");

			if (jsonString.get("error") == null ||!"0000".equals(jsonString.get("error"))) {
				throw new Exception("[==== url not Found Exception ====] Check the File in the Server.");
			}

	        httpPost.abort();
	    }catch (Exception e) {
	    	logger.warn(e.getMessage());
	    }

		String localImg = (String)inParam.get("title");//파일명(*.jpg)
		String strDir = StringUtil.getCurrentDateFormat("yyyy")+"/"+StringUtil.getCurrentDateFormat("MM")+"/"+StringUtil.getCurrentDateFormat("dd");//기본파일 업로드 경로에 년/월/일 폴더를 추가.
		String uploadRootPath = AppConfigManager.getInstance().getUploadRootPath();
		File realUploadDir = new File(uploadRootPath+ CmmnCnst.UploadRealDir + strDir);// 위의 내용을 저장하기 위한 경로 생성
		if(!realUploadDir.exists())realUploadDir.mkdirs();//존재하지않을때 경로 생성

		// 위의 내용을 저장하기 위한 경로 생성
		String path = realUploadDir + "/" + localImg;
		try {

			//url로 http 커넥션 한다
			URL imgUrl = new URL(targetUrl); //다운로드 받을 주소 생성을 위한 변수
			HttpURLConnection conn = (HttpURLConnection)imgUrl.openConnection();

			//다운로드 받을 파일의 크기 가져오기
			int len = conn.getContentLength();
			int read;    //데이터를 바이트 단위로 다운로드 받을 때 사용할 임시변수

			//다운로드 받은 내용을 저장할 바이트 배열 생성
			byte[] raster = new byte[len];
			//url에서 바이트 단위로 읽기위한 스트림 생성
			InputStream is = conn.getInputStream();

			//파일에 기록하기 위한 파일 스트림생성
			FileOutputStream fos = new FileOutputStream(path);
			while (true) {
				read = is.read(raster);

				//읽어온 값이 없으면 종료
				if(read <= 0) break;
				fos.write(raster,0,read);
			}

			is.close();
			fos.close();
			conn.disconnect();

			mm.put("saveAs", localImg);
			mm.put("fileDelete", "N");
			mm.put("localFilePath", path);

		} catch (Exception e) {

			System.out.println("예외 발생: " + e.getMessage());
		}

		return mm;
	}
}
