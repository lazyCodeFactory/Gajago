package com.ssocio.sharing.dao.seller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 설명
 * 설명
 * @author J.K.CHOI
 * @version
 * @since 2015. 7. 21. 오후 7:41:45
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 21.	|	J.K.CHOI	|신규
 * @비고
 * </pre>
 */
@Component
public class SellerQAAdviceDao {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerQAAdviceDao.class);
	
	/* --------------------------------------------------------------------------
		# sqlSession 설정
		 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
		 -- 하나만 사용할 경우 @Autowired
	   --------------------------------------------------------------------------*/
	@Resource(name="sqlSessionSeller")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * 상품문의 리스트 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 21. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListQAAdvice(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		
		logger.info("selectListQAAdvice Start");
		List<Map<String, Object>> list = null;
		try {
			// 상품문의일 경우
			if(inParam.get("BOARD_TYPE_CD").equals("72")){
				list = sqlSession.selectList(
						"sellerQAAdviceMapper.selectListQAAdvice", inParam);
				System.out.println("상품문의@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
				//LoggerUtil.writeMap(inParam);
				System.out.println("상품문의@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			}else if(inParam.get("BOARD_TYPE_CD").equals("40")){
				
				// 1:1문의일 경우
				list = sqlSession.selectList(
						"sellerQAAdviceMapper.selectListQAA", inParam);
				LoggerUtil.writeMap(inParam);
				System.out.println("1:1문의@@@@@@@@@@$$$$$$$$$$$$$$$$$$$$$$$$");
			}
		} catch (Exception e) {
			logger.error("selectListQAAdvice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		System.out.println(" @#@#@#@#@#@#@#@#@#@#@#@#@#@#@#@#@#@#@#@#@#@# " + list.size());
		return list;
	 }

	  /**
	   * <pre>
	   * 리스트 카운트 조회
	   * 
	   * @param inParam
	   * @return
	   * @throws Exception
	   * @date 2015. 7. 21. 오후 2:10:39
	   * @author J.K.CHOI
	   * @see com.ssocio.sharing.dao.admin
	   * </pre>
	   */
	  public int selectListQAAdviceCount(Map<String, Object> inParam) throws Exception{
		  // // ------------------------------------------------------------------------
		  // # 시작로그
		  // ------------------------------------------------------------------------
		  
		  logger.info("selectListQAAdviceCount Start");
		  LoggerUtil.writeMap(inParam);
		  int count= 0;
		  try {
			// 상품문의일 경우
				if("72".equals(inParam.get("BOARD_TYPE_CD"))){
					logger.info("상품 문의 DAO");
					count = sqlSession.selectOne("sellerQAAdviceMapper.selectListQAAdviceCount", inParam);
				}else if("40".equals(inParam.get("BOARD_TYPE_CD"))){
					logger.info("1:1 문의 DAO");
					// 1:1문의일 경우
					count = sqlSession.selectOne("sellerQAAdviceMapper.selectListQAACount", inParam);
				}
		  }catch (Exception e) {
			  logger.error("selectListQAAdviceCount DB Error : " + e.toString());
			  throw new Exception(RspnsCnst.RC1000000004);
		  }
		  return count;
	  }
	  
	/**
	 * <pre>
	 *처리상태 건수 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 21. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object>  selectStatusCount(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectStatusCount Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerQAAdviceMapper.selectStatusCount", inParam);
		} catch (Exception e) {
			logger.error("selectStatusCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * <pre>
	 * 상담관리 상세 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 21. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object>  selectQAAdvice(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectQAAdvice Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerQAAdviceMapper.selectQAAdvice", inParam);
		} catch (Exception e) {
			logger.error("selectQAAdvice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	
	/**
	 * 1:1문의 
	 * 
	 * */
	public Map<String, Object>  selectQAAdviceeReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectQAAdvice Start");
		Map<String, Object> map = null;
		try {
			LoggerUtil.writeMap(inParam);
			map =  sqlSession.selectOne("sellerQAAdviceMapper.selectQAAdviceReg", inParam);
		} catch (Exception e) {
			logger.error("selectQAAdvice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * <pre>
	 * 상담관리등록
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 21. 오후 3:34:20
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertQAAdviceReg(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertQAAdviceReg Start");
		int outParam = 0;
		try {
			outParam = sqlSession.insert("sellerQAAdviceMapper.insertQAAdviceReg", inParam);
		}
		catch (Exception e) {
			logger.error("insertQAAdviceReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 상담관리 수정
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 21. 오후 3:34:26
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateQAAdviceReg(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateQAAdviceReg Start");
		int outParam = 0;
		try {
			outParam = sqlSession.update("sellerQAAdviceMapper.updateQAAdviceReg", inParam);
		}
		catch (Exception e) {
			logger.error("updateQAAdviceReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	

	
	/**
	 * <pre>
	 * 상담관리 삭제
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 21. 오후 3:34:26
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int deleteQAAdvice(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("deleteQAAdvice Start");
		int outParam = 0;
		try {
			outParam = sqlSession.delete("sellerQAAdviceMapper.deleteQAAdvice", inParam);
		}
		catch (Exception e) {
			logger.error("deleteQAAdvice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
}
