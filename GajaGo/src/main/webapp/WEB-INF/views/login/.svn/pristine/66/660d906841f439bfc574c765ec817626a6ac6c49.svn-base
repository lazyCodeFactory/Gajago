package com.ssocio.sharing.controller.seller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.admin.util.HttpUrlConnectionUtil;
import com.ssocio.sharing.cmmn.seller.util.SellerCommonUtil;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.service.seller.SellerFindService;
import com.ssocio.sharing.vo.seller.SellerSession;

/**
 * <pre>
 * 아이디찾기 및 비밀번호 찾기
 * @author S.B.LEE
 * @version
 * @since 2015. 7. 7. 오전 10:52:37
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 7.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
@Controller
public class SellerFindController {
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerFindController.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private SellerFindService sellerFindService;
	
	
	
	/**
	 * <pre>
	 * 아이디 찾기 페이지로 이동
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 7. 오후 8:43:58
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/find/selectFindIdPopup.do")
	public ModelAndView sellerFindIdOpen(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("sellerFindIdOpen START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		try {
			mav.setViewName("seller/find/selectFindIdPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	

	

	/**
	 * <pre>
	 * 아이디찾기 회원정보 가져오기
	 * 입력값의 대한 결과 Return
	 * 입력값의 대한 결과를 JSON 로 리턴한다 
	 * @param request
	 * @param response
	 * @param inParam
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 31. 오후 8:30:07
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	
	@RequestMapping(value="/seller/find/sellerFindId.do")
	public  ModelAndView sellerFindId(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{

		logger.info("☆★☆★☆★☆★☆★☆★☆ sellerFindId START☆★☆★☆★☆★☆★☆★☆");
		
		List<SellerSession> sellerSession = null;
		ModelAndView mav = new ModelAndView("jsonView");
		String ret = "F";
		try {

			sellerSession = sellerFindService.sellerFindId(inParam);
			
			if(sellerSession != null && sellerSession.size() >0){
				ret = "S";
				
				logger.debug(sellerSession.toString());
			}
			mav.addObject("list", sellerSession);	
			mav.addObject("ret", ret);	
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ sellerFindId END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}

	
	
	/**
	 * <pre>
	 * 아이디찾기 결과 페이지
	 * @param request
	 * @param response
	 * @param inParam
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 31. 오후 8:30:07
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/seller/find/selectFindIdRetPopup.do")
	public ModelAndView selectFindIdRetPopup(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectFindIdRetPopup START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");

			LoggerUtil.writeMap(inParam);
			List<SellerSession> sellerSession = null;

			try {

			sellerSession = sellerFindService.sellerFindId(inParam);

			mav.addObject("sellerIdList", sellerSession);	
			mav.addObject("MBER_GB_CD", StringUtil.nvl((String)inParam.get("MBER_GB_CD")));
			mav.setViewName("seller/find/selectFindIdRetPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
	
	
	/**
	 * <pre>
	 * 비밀번호 찾기 페이지로 이동
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 7. 오후 8:43:58
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/find/selectFindPwPopup.do")
	public ModelAndView sellerFindPwOpen(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("sellerFindPwOpen START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		try {
			mav.setViewName("seller/find/selectFindPwPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	
	
	/**
	 * <pre>
	 * 비밀번호찾기 회원정보 가져오기
	 * 입력값의 대한 결과 Return
	 * 입력값의 대한 결과를 JSON 로 리턴한다 
	 * @param request
	 * @param response
	 * @param inParam
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 31. 오후 8:30:07
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	
	@RequestMapping(value="/seller/find/sellerFindPw.do")
	public  ModelAndView sellerFindPw(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{

		logger.info("☆★☆★☆★☆★☆★☆★☆ sellerFindPW START☆★☆★☆★☆★☆★☆★☆");
		
		
		SellerSession sellerSession =  new SellerSession();
		ModelMap mm = new ModelMap();
		
		try {
			LoggerUtil.writeMap(inParam);
			sellerSession = sellerFindService.sellerFindPw(inParam);
			mm.put("sellerSession", sellerSession);
			if(sellerSession != null){
				sellerSession.setRetCode("S");
				
				logger.debug(sellerSession.toString());
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ sellerFindPW END☆★☆★☆★☆★☆★☆★☆");
		return new ModelAndView("jsonView", mm);
	}
	
	
	/**
	 * <pre>
	 * 아이디찾기 결과 페이지 및 이메일 전송
	 * @param request
	 * @param response
	 * @param inParam
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 31. 오후 8:30:07
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/seller/find/selectFindPwRetPopup.do")
	public ModelAndView selectFindPwRetPopup(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectFindPwRetPopup START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		try {
			LoggerUtil.writeMap(inParam);
			
			//임시 비밀 번호 발급
			String tempPass = CommonUtil.newPasswordEight();
			
			 
					//테스트용 나중에 지울것 START
//					System.out.println(tempPass);
//					tempPass = "rcm123";
					//테스트용 나중에 지울것 END
			
			inParam.put("MBER_PASS",  SellerCommonUtil.getEncPassword(tempPass));
			 
			int ret = sellerFindService.updatePass(inParam);
			
			
			//DB update 후 이메일 발급 START
			try {
				Map<String, Object> emailParam = new HashMap<String, Object>();
				String innerHtml = "<html>";
				emailParam.put("gubun", "join_auth");
				emailParam.put("from_email", "ssocio@rocomo.com");
				emailParam.put("from_nm", "SSOCIO");
				emailParam.put("to_email", inParam.get("MBER_EMAIL"));
				emailParam.put("to_nm", inParam.get("MBER_EMAIL"));
				emailParam.put("ishtml", "Y");
				emailParam.put("subject", "[SSOCIO] 임시 비밀번호 발급");
				emailParam.put("msg", innerHtml);
				emailParam.put("req_site", "seller");
				
				
				emailParam.put("tplcode", "JOIN_LOST_PWD");
				emailParam.put("tmppwd", tempPass);
				
				HttpUrlConnectionUtil hcu = new HttpUrlConnectionUtil();
				hcu.sendEmail(sellerFindService.selectsiteIFUrl(), "POST", emailParam);
			} catch (Exception e) {
				e.printStackTrace();
			}
	
			//이메일 발급 END
			
			
			logger.info("selectFindPwRetPopup PASS update : ret "+ret);
			mav.addObject("MBER_EMAIL",(String)inParam.get("MBER_EMAIL"));
			mav.addObject("MBER_NM",(String)inParam.get("MBER_NM"));
			mav.addObject("CMPNY_NM",(String)inParam.get("CMPNY_NM"));
			mav.addObject("REGIST_DT",(String)inParam.get("REGIST_DT"));
			mav.addObject("MBER_GB_CD", StringUtil.nvl((String)inParam.get("MBER_GB_CD")));
			mav.setViewName("seller/find/selectFindPwRetPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	@RequestMapping("/seller/find/sendremail.do")
	public ModelAndView sendremail(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		
		ModelMap mm = new ModelMap();
		try {
			String mbrGbCd = (String)inParam.get("MBER_GB_CD");	
			Map<String, Object> emailParam = new HashMap<String, Object>();
			//신청서 이메일 발송
			String innerHtml = "<html>";
			emailParam.put("gubun", "join_auth");
			emailParam.put("from_email", "ssocio@rocomo.com");
			emailParam.put("from_nm", "SSOCIO");
			emailParam.put("to_email", inParam.get("MBER_EMAIL"));
			emailParam.put("to_nm", inParam.get("MBER_EMAIL"));
			emailParam.put("ishtml", "Y");
			emailParam.put("subject", "[SSOCIO]가입 완료 안내");
			emailParam.put("req_site", "seller");
			emailParam.put("msg", innerHtml);
			//emailParam.put("tplcode", "JOIN_COMP_SELLER");
			
			if(mbrGbCd.equals("0")){
				emailParam.put("tplcode", "JOIN_PER_SELLER");
				System.out.println("개인 메일 전송 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ");
			}
			else{
				emailParam.put("tplcode", "JOIN_COMP_SELLER");
				System.out.println("사업자 메일 전송 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ");
			}
			
			HttpUrlConnectionUtil hcu = new HttpUrlConnectionUtil();
			hcu.sendEmail(sellerFindService.selectsiteIFUrl(), "POST", emailParam); 
			//hcu.sendEmail("http://sso-api.vmclub.co.kr:30080/email/fast_email.html", "POST", emailParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("jsonView", mm);
	}
	
	
}
