package com.ssocio.sharing.service.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ssocio.sharing.cmmn.admin.util.FileUtil;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.dao.admin.AdminBrandDao;
import com.ssocio.sharing.dao.admin.AdminCommonDao;
import com.ssocio.sharing.vo.admin.PageNavigation;

/**
 * <pre>
 * 브랜드 서비스
 * 브랜드 관리를 위한 서비스
 * @author Y.I.Chun
 * @version 
 * @since 2015. 7. 6. 오후 6:41:07
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 7. 6.   |    Y.I.Chun  | 신규
 * @Todo
 * </pre>
 */
@Service
public class AdminBrandServiceImpl implements AdminBrandService {
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminBrandServiceImpl.class);

	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="adminCommonDao")
	private AdminCommonDao adminCommonDao;
	@Resource(name="adminBrandDao")
	private AdminBrandDao adminBrandDao;
	
	/**
	 * <pre>
	 * 브랜드 리스트
	 * 브랜드 리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap selectBrandList(Map<String, Object> inParam) throws Exception {

		ModelMap mm = new ModelMap();
		//노출여부관계없이 조회
		inParam.put("viewYn", null);
		mm.put("brandList", adminBrandDao.selectBrandList(inParam));
		return mm;
	}
	
	/**
	 * <pre>
	 * 브랜드정보 조회
	 * 브랜드정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap selectBrandInfo(Map<String, Object> inParam) throws Exception {

		ModelMap mm = new ModelMap();
		mm.put("brandInfo", adminBrandDao.selectBrandInfo(inParam));
		mm.put("brandCtryList", adminBrandDao.selectBrandCtryList(inParam));
		return mm;
	}
	
	/**
	 * <pre>
	  브랜드 신청 내역 조회
	 * 등록 신청한 브랜드 내역을 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap selectBrandReqList(Map<String, Object> inParam) throws Exception {

		ModelMap mm = new ModelMap();
		try {
			//조회조건 기간 처리 start
			String today = StringUtil.getCurrentDate();
			inParam.put("S_END_DATE", StringUtil.nvl((String)inParam.get("S_END_DATE"), today));
			
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
			Calendar cal = Calendar.getInstance();
			cal.add(Calendar.DATE, -7);
			inParam.put("S_START_DATE", StringUtil.nvl((String)inParam.get("S_START_DATE"), format.format(cal.getTime())));
			//조회조건 기간 처리 end
			
			//페이징처리 start
			inParam.put("PAGE_NO", StringUtil.nvl((String)inParam.get("PAGE_NO"), "1"));
			int nowPage = StringUtil.nvlInt((String)inParam.get("PAGE_NO"), 1);
			int rowTotal = adminBrandDao.selectBrandReqListCount(inParam);
			
			System.out.println(">>>>>>>>>>>>>>PAGE_NO " + inParam.get("PAGE_NO"));
			System.out.println(">>>>>>>>>>>>>>nowPage " + nowPage);
			System.out.println(">>>>>>>>>>>>>>rowTotal " + rowTotal);
			
			PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, CmmnCnst.ADM_LIST_SIZE, CmmnCnst.ADM_BLOCK_SIZE );
			mm.put("PAGE_NO", nowPage);
			mm.put("pageNav", pageNav);
		    inParam.put("START_ROW"	,pageNav.getStartRow());
		    inParam.put("END_ROW"	,pageNav.getEndRow());
		    //페이징처리 end
			System.out.println(">>>>>>>>>>>>>>START_ROW " + inParam.get("START_ROW"));
			System.out.println(">>>>>>>>>>>>>>END_ROW " + inParam.get("END_ROW"));
			LoggerUtil.writeMap(inParam);
			mm.put("brandReqList",adminBrandDao.selectBrandReqList(inParam));
			mm.put("params",inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	
	/**
	 * <pre>
	 * 브랜드 신청 내역 삭제
	 * 등록 신청한 브랜드를 삭제 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author SEKIM
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap deleteBrandReqList(Map<String, Object> inParam) throws Exception {
		
		String delCell = (String)inParam.get("deleteList");
		String delList[] = delCell.split(",");
		for (int i=0; i<delList.length; i++){
			inParam.put("brandCd", delList[i]);
			adminBrandDao.deleteBrandReq(inParam);
		}
		
		ModelMap mm = new ModelMap();
		mm.put("brandReqList", adminBrandDao.selectBrandReqList(inParam));
		return mm;
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 정보 등록
	 * 브랜드카테고리 정보를 등록 합니다.
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:13
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap insertBrandCtry (Map<String, Object> inParam) throws Exception {
		//브랜드카테고리 삭제
		adminBrandDao.insertBrandCtry(inParam);
		
		//삭제후 브랜드카테고리정보 재조회
		ModelMap mm = new ModelMap();
		mm.put("brandCtryList", adminBrandDao.selectBrandCtryList(inParam));
		return mm;
		
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 정보 삭제
	 * 브랜드카테고리 정보를 삭제 합니다.
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:13
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap deleteBrandCtry (Map<String, Object> inParam) throws Exception {
		//브랜드카테고리 삭제
		adminBrandDao.deleteBrandCtry(inParam);
		
		//삭제후 브랜드카테고리정보 재조회
		ModelMap mm = new ModelMap();
		mm.put("brandCtryList", adminBrandDao.selectBrandCtryList(inParam));
		return mm;
		
	}
	
	/**
	 * <pre>
	 * 브랜드정보 수정
	 * 브랜드정보를 수정 합니다.
	 * @param req
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:13
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public void updateBrandInfo (MultipartHttpServletRequest req, Map<String, Object> inParam) throws Exception {
		
		//브랜드이미지 파일
		MultipartFile brandImg = req.getFile("brandImg");
		
		//브랜드이미지 등록
		String fileSeq = null;
		if(brandImg != null && brandImg.getSize() > 0){
			Map<String, Object> fileInfo = FileUtil.saveMultipartFile(brandImg);//파일 저장
			fileSeq = adminCommonDao.insertFile(fileInfo);
		}
		inParam.put("fileSeq", fileSeq);

		adminBrandDao.updateBrandInfo(inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드정보 삭제
	 * 브랜드정보를 삭제 합니다.
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:13
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public void deleteBrandInfo(Map<String, Object> inParam) throws Exception {
		adminBrandDao.deleteBrandInfo(inParam);
		adminBrandDao.deleteBrandCtry(inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드정보 등록
	 * 브랜드정보를 등록 합니다.
	 * @param req
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:31
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public void insertBrandInfo (MultipartHttpServletRequest req, Map<String, Object> inParam) throws Exception {

		
		
		//브랜드이미지 파일
		MultipartFile brandImg = req.getFile("regBrandImg");
		
		
		//브랜드이미지 등록
		String fileSeq = null;
		if(brandImg != null && brandImg.getSize() > 0){
			Map<String, Object> fileInfo = FileUtil.saveMultipartFile(brandImg);//파일 저장
			fileSeq = adminCommonDao.insertFile(fileInfo);
		}
		inParam.put("fileSeq", fileSeq);
				
		String brandCd = adminBrandDao.insertBrandInfo(inParam);
		
		String[] ctryCdList = (String[])inParam.get("brandCtryCd");
		if(ctryCdList != null && ctryCdList.length > 0){
			Map<String, Object> param = new HashMap<String, Object>();
			param.put("brandCd", brandCd);
			for(String ctryCd : ctryCdList){
				param.put("ctryCd", ctryCd);
				adminBrandDao.insertBrandCtry(param);
			}
		}
		//브랜드 신청내역  업데이트
		String reqSeq =(String) inParam.get("reqSeq");
		if(reqSeq!=null){
			adminBrandDao.updateBrandReq(inParam);
		}
	}
	
	/**
	 * 브랜드 신청 내역 상세  조회 
	 */
	public ModelMap selectBrandReq(Map<String, Object> inParam) throws Exception {
		ModelMap mm = new ModelMap();
		mm.put("brandReq", adminBrandDao.selectBrandReq(inParam));
		return mm;
	}
	
	/**
	 * 브랜드 신청 내역 상세  삭제 
	 */
	public void deleteBrandReq(Map<String, Object> inParam) throws Exception {
		String[] reqSeq = ((String) inParam.get("reqSeq")).split(",");
		for(int i =0; i < reqSeq.length; i++){
			inParam.put("reqSeq", reqSeq[i]);
			adminBrandDao.deleteBrandReq(inParam);
		}
	}
	
	/**
	 */
	public String selectBrandInfoDupBrandNm(Map<String, Object> inParam) throws Exception {
		return adminBrandDao.selectBrandInfoDupBrandNm(inParam);
	}
}