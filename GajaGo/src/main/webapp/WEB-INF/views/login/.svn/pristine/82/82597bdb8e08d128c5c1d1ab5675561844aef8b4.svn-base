<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="webBoardMapper">

	<resultMap id="faqResultMap" type="hashmap">
		<id property="BOARD_SEQ"				column="BOARD_SEQ" />
		<result property="BOARD_TYPE_CD"		column="BOARD_TYPE_CD" />
		<result property="TITLE"				column="TITLE" />
		<result property="NO"					column="NO" />
		<result property="CONTENTS"				column="CONTENTS" jdbcType="CLOB" javaType="string"/>
	</resultMap>

    <resultMap id="noticeResultMap" type="hashmap" >
		<id property="BOARD_SEQ"				column="BOARD_SEQ" />
		<result property="BOARD_TYPE_CD"		column="BOARD_TYPE_CD" />
		<result property="TITLE"				column="TITLE" />
		<result property="CONTENTS"				column="CONTENTS" jdbcType="CLOB" javaType="string"/>
		<result property="NEXT_SEQ"				column="NEXT_SEQ" />
		<result property="PREV_SEQ"				column="PREV_SEQ" />
	</resultMap>

    <resultMap id="noticeMainResultMap" type="hashmap" >
		<id property="BOARD_SEQ"				column="BOARD_SEQ" />
		<result property="TITLE"				column="TITLE" />
		<result property="CONTENTS"				column="CONTENTS" jdbcType="CLOB" javaType="string"/>
		<result property="FILE_URL"				column="FILE_URL" />
	</resultMap>

	<resultMap id="reviewResultMap" type="hashmap">
		<id property="BOARD_SEQ" 				column="BOARD_SEQ" />
		<result property="AVG_SCORE"			column="AVG_SCORE" />
		<result property="CONTENTS"				column="CONTENTS" jdbcType="CLOB" javaType="string"/>
		<result property="MBER_SEQ"				column="MBER_SEQ" />
		<result property="BAN_YN" 				column="BAN_YN" />
		<result property="REGIST_DT"			column="REGIST_DT" />
		<result property="MBER_EMAIL"			column="MBER_EMAIL" />
		<result property="MBER_FILE_URL"		column="MBER_FILE_URL" />
		<result property="LEVEL_IMG"				column="LEVEL_IMG" />
		<collection property="files"			javaType="java.util.ArrayList" ofType="java.util.HashMap">
			<id property="FILE_SEQ"					column="FILE_SEQ" />
			<result property="FILE_URL"				column="FILE_URL" />
		</collection>
	</resultMap>

	<resultMap id="reviewListResultMap" type="hashmap">
		<id property="PROD_CODE" 				column="PROD_CODE" />
		<result property="CNT"					column="CNT" />
		<result property="AVG_SCORE"			column="AVG_SCORE" />
		<collection property="list" 			javaType="java.util.ArrayList" ofType="java.util.HashMap">
			<id property="BOARD_SEQ" 				column="BOARD_SEQ" />
			<result property="SCORE" 				column="SCORE" />
			<result property="CONTENTS" 			column="CONTENTS" jdbcType="CLOB" javaType="string"/>
			<result property="MBER_SEQ" 			column="MBER_SEQ" />
			<result property="PROD_CODE" 			column="PROD_CODE" />
			<result property="BAN_YN" 				column="BAN_YN" />
			<result property="REGIST_DT" 			column="REGIST_DT"/>
			<result property="TIME_GAP" 			column="TIME_GAP"/>
			<result property="BOARD_FILE_URL" 		column="BOARD_FILE_URL" />
			<result property="EMAIL" 				column="EMAIL" />
			<result property="FILE_URL" 			column="FILE_URL" />
			<result property="LEVEL_IMG" 			column="LEVEL_IMG" />
		</collection>
	</resultMap>

	<resultMap id="commentResultMap" type="hashmap">
		<id property="PROD_CODE" 				column="PROD_CODE" />
		<result property="CNT"					column="CNT" />
		<collection property="list"			 	javaType="java.util.ArrayList" ofType="java.util.HashMap">
			<id property="BOARD_SEQ" 				column="BOARD_SEQ" />
			<result property="MBER_SEQ"				column="MBER_SEQ" />
			<result property="MBER_EMAIL"			column="MBER_EMAIL" />
			<result property="SSO_GB_CD"			column="SSO_GB_CD" />
			<result property="MBER_NICK"			column="MBER_NICK" />
			<result property="CONTENTS"				column="CONTENTS" jdbcType="CLOB" javaType="string"/>
			<result property="REGIST_DT"			column="REGIST_DT"/>
			<result property="TIME_GAP"				column="TIME_GAP"/>
			<result property="FILE_URL"				column="FILE_URL" />
			<result property="BAN_YN"				column="BAN_YN" />
			<result property="LEVEL_IMG"			column="LEVEL_IMG" />
		</collection>
	</resultMap>



	<!-- [2015-11-13] 나눔신청 맵 -->
	<resultMap id="freeshareResultMap"		type="hashmap">
		<id property="PROD_CODE" 			column="PROD_CODE" />
		<result property="CNT" 				column="CNT" />
		<collection property="list" 		javaType="java.util.ArrayList" ofType="java.util.HashMap">
			<id property="MBER_SEQ" 		column="MBER_SEQ" />
			<result property="MBER_EMAIL" 	column="MBER_EMAIL" />
			<result property="REGIST_DT" 	column="REGIST_DT" />
			<result property="RCV_NM" 		column="RCV_NM" />
			<result property="SSO_GB_CD" 		column="SSO_GB_CD" />
			<result property="MBER_NICK" 		column="MBER_NICK" />
			<result property="REQ_MEMO" 	column="REQ_MEMO" />
			<result property="REQ_MEMO_HTML" 	column="REQ_MEMO_HTML" />
			<result property="FILE_URL" 	column="FILE_URL" />
			<result property="LEVEL_IMG" 	column="LEVEL_IMG" />
			<result property="TIME_GAP" 	column="TIME_GAP" />
		</collection>
	</resultMap>



	<!-- [2015-11-13] 나눔신청 목록 -->
	<select id="selectNanum" parameterType="hashmap" resultMap="freeshareResultMap">
		SELECT Z.CNT             AS CNT
		    , Z.PROD_CODE       AS PROD_CODE
		    , Z.REQ_SEQ         AS REQ_SEQ
		    , Z.REQ_MEMO        AS REQ_MEMO
	<![CDATA[, replace(REPLACE(REPLACE(REPLACE(REPLACE(Z.REQ_MEMO, chr(39), '"'), '<', '&lt'), '>', '&gt'), chr(13), '<br />'), chr(10), '')  ]]>AS REQ_MEMO_HTML
<!-- 		    , Z.REGIST_DT       AS REGIST_DT -->
			, TO_CHAR(Z.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
		    , Z.RCV_NM          AS RCV_NM
		    , Z.MBER_SEQ        AS MBER_SEQ
 			 , Z.MBER_NICK  AS MBER_NICK
		    , Z.MBER_EMAIL      AS MBER_EMAIL
		    , Z.SSO_GB_CD       AS SSO_GB_CD
		    , Z.FILE_URL       AS FILE_URL
		    , FI1.FILE_URL				    AS LEVEL_IMG
		FROM (
				SELECT Y.RNUM           AS RNUM
				    , W.CNT             AS CNT
				    , Y.PROD_CODE       AS PROD_CODE
				    , Y.REQ_SEQ         AS REQ_SEQ
				    , Y.REQ_MEMO        AS REQ_MEMO
				    , Y.REGIST_DT       AS REGIST_DT
				    , Y.RCV_NM          AS RCV_NM
				      , Y.MBER_NICK  AS MBER_NICK
			      	, Y.SSO_GB_CD       AS SSO_GB_CD
				    , Y.MBER_SEQ        AS MBER_SEQ
				    , Y.MBER_EMAIL      AS MBER_EMAIL
				    , FI.FILE_URL       AS FILE_URL
				    , ML.FILE_SEQ		AS LEVEL_IMG_SEQ
				FROM (
				        SELECT COUNT(*) 		AS CNT
				        FROM PROD_SUBMIT_INFO
				        WHERE PROD_TYPE_CD = '3'
				            AND PROD_CODE = #{PROD_CODE}
				    )W,
				    (
				    SELECT ROWNUM       AS RNUM
				    	, X.PROD_CODE   AS PROD_CODE
				        , X.REQ_SEQ     AS REQ_SEQ
				        , X.REQ_MEMO    AS REQ_MEMO
				        , X.REGIST_DT   AS REGIST_DT
				        , X.RCV_NM      AS RCV_NM
				        , MI.MBER_SEQ   AS MBER_SEQ
				        , MI.SSO_GB_CD  AS SSO_GB_CD
				        , MI.MBER_NICK  AS MBER_NICK
				        , MI.MBER_EMAIL AS MBER_EMAIL
				        , MI.MBER_IMG   AS MBER_IMG
				        , MDI.BUY_MBER_LEV_SEQ AS BUY_MBER_LEV_SEQ
				    FROM (
				        SELECT PROD_CODE    AS PROD_CODE
				        	, REQ_SEQ       AS REQ_SEQ
				            , REQ_MEMO      AS REQ_MEMO
				            , REGIST_DT     AS REGIST_DT
				            , RCV_NM        AS RCV_NM
				            , MBER_SEQ      AS MBER_SEQ
				        FROM PROD_SUBMIT_INFO
				        WHERE PROD_TYPE_CD = '3'
				            AND PROD_CODE = #{PROD_CODE}
				        ORDER BY REGIST_DT DESC
				    ) X
		                INNER JOIN MBER_INFO MI ON X.MBER_SEQ = MI.MBER_SEQ
		                LEFT OUTER JOIN MBER_DTL_INFO MDI ON MI.MBER_SEQ = MDI.MBER_SEQ
				) Y
		            LEFT OUTER JOIN FILE_INFO FI ON Y.MBER_IMG = FI.FILE_SEQ
		            LEFT OUTER JOIN MBER_LEV ML ON Y.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
		         WHERE Y.RNUM <![CDATA[>=]]> #{S_NUM}
		   			AND Y.RNUM <![CDATA[<=]]> #{E_NUM}
		    ) Z
		    LEFT OUTER JOIN FILE_INFO FI1 ON Z.LEVEL_IMG_SEQ = FI1.FILE_SEQ


	</select>


	<!-- [2015-11-13] 나눔신청 카운트 -->
	<select id="selectNanumCnt" parameterType="hashmap" resultType="Integer">

	SELECT COUNT(*) FROM (

		SELECT Z.CNT             AS CNT
		    , Z.PROD_CODE       AS PROD_CODE
		    , Z.REQ_SEQ         AS REQ_SEQ
		    , Z.REQ_MEMO        AS REQ_MEMO
		    , Z.REGIST_DT       AS REGIST_DT
		    , Z.RCV_NM          AS RCV_NM
		    , Z.MBER_SEQ        AS MBER_SEQ
		    , Z.MBER_EMAIL      AS MBER_EMAIL
		    , Z.FILE_URL       AS FILE_URL
		    , FI1.FILE_URL				    AS LEVEL_IMG
		FROM (
				SELECT Y.RNUM           AS RNUM
				    , W.CNT             AS CNT
				    , Y.PROD_CODE       AS PROD_CODE
				    , Y.REQ_SEQ         AS REQ_SEQ
				    , Y.REQ_MEMO        AS REQ_MEMO
				    , Y.REGIST_DT       AS REGIST_DT
				    , Y.RCV_NM          AS RCV_NM
				    , Y.MBER_SEQ        AS MBER_SEQ
				    , Y.MBER_EMAIL      AS MBER_EMAIL
				    , FI.FILE_URL       AS FILE_URL
				    , ML.FILE_SEQ		AS LEVEL_IMG_SEQ
				FROM (
				        SELECT COUNT(*) 		AS CNT
				        FROM PROD_SUBMIT_INFO
				        WHERE PROD_TYPE_CD = '3'
				            AND PROD_CODE = #{PROD_CODE}
				    )W,
				    (
				    SELECT ROWNUM       AS RNUM
				    	, X.PROD_CODE   AS PROD_CODE
				        , X.REQ_SEQ     AS REQ_SEQ
				        , X.REQ_MEMO    AS REQ_MEMO
				        , X.REGIST_DT   AS REGIST_DT
				        , X.RCV_NM      AS RCV_NM
				        , MI.MBER_SEQ   AS MBER_SEQ
				        , MI.MBER_EMAIL AS MBER_EMAIL
				        , MI.MBER_IMG   AS MBER_IMG
				        , MDI.BUY_MBER_LEV_SEQ AS BUY_MBER_LEV_SEQ
				    FROM (
				        SELECT PROD_CODE    AS PROD_CODE
				        	, REQ_SEQ       AS REQ_SEQ
				            , REQ_MEMO      AS REQ_MEMO
				            , REGIST_DT     AS REGIST_DT
				            , RCV_NM        AS RCV_NM
				            , MBER_SEQ      AS MBER_SEQ
				        FROM PROD_SUBMIT_INFO
				        WHERE PROD_TYPE_CD = '3'
				            AND PROD_CODE = #{PROD_CODE}
				        ORDER BY REGIST_DT DESC
				    ) X
		                INNER JOIN MBER_INFO MI ON X.MBER_SEQ = MI.MBER_SEQ
		                LEFT OUTER JOIN MBER_DTL_INFO MDI ON MI.MBER_SEQ = MDI.MBER_SEQ
				) Y
		            LEFT OUTER JOIN FILE_INFO FI ON Y.MBER_IMG = FI.FILE_SEQ
		            LEFT OUTER JOIN MBER_LEV ML ON Y.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
		    ) Z
		    LEFT OUTER JOIN FILE_INFO FI1 ON Z.LEVEL_IMG_SEQ = FI1.FILE_SEQ
		) A
	</select>



	<!-- 상품 문의 타입 조회-->
	<select id="selectListTypeCd" parameterType="string" resultType="hashmap">
		SELECT COM_CD
		    , COM_CD_NM
		    , SORT_SEQ
		FROM CODE
		WHERE GRP_CD = #{typeCd}
		    AND USE_YN = 'Y'
		ORDER BY SORT_SEQ ASC
	</select>


	<!-- 고객센터 - 공지사항 리스트 가져오기  -->
	<select id="selectListFaq" resultMap="faqResultMap">
		SELECT BOARD_SEQ
      		, BOARD_TYPE_CD
      		, TITLE
      		, ROW_NUMBER() OVER(ORDER BY BOARD_SEQ DESC ) AS NO
      		, CONTENTS
		FROM BOARD_INFO
		WHERE BOARD_TYPE_CD = '20'
       	<if test="FAQ_GUBUN != null and FAQ_GUBUN != ''">
    		AND FAQ_TYPE_CD = #{FAQ_GUBUN}
  		</if>
	</select>

	<select id="selectListNotice" resultType="hashmap">
		SELECT BOARD_TYPE_CD
			, BOARD_SEQ
			, TITLE
			, IMPT_NOTI_YN
			, NOTI_GB_CD
			, ROW_NUMBER() OVER(ORDER BY BOARD_SEQ DESC ) AS NO
	    FROM BOARD_INFO
	    WHERE BOARD_TYPE_CD = '10'
	    	AND VIEW_YN = 'Y'
	    	AND NOTI_GB_CD IN ('10','20')
	    ORDER BY IMPT_NOTI_YN DESC, BOARD_SEQ DESC
	</select>

	<select id="selectNotice" parameterType="string"  resultMap="noticeResultMap">
		SELECT A.BOARD_SEQ
			, A.BOARD_TYPE_CD
			, A.TITLE
			, A.CONTENTS
			, A.NEXT_SEQ
			, A.PREV_SEQ
			, (SELECT TITLE
				 FROM BOARD_INFO
				WHERE BOARD_TYPE_CD = '10'
				  AND BOARD_SEQ = A.PREV_SEQ
			   ) AS PREV_TITLE
			, (SELECT TITLE
				 FROM BOARD_INFO
				WHERE BOARD_TYPE_CD = '10'
				  AND BOARD_SEQ = A.NEXT_SEQ
			   ) AS NEXT_TITLE
		FROM (
		    SELECT BOARD_SEQ
		        , BOARD_TYPE_CD
		        , TITLE
		        , CONTENTS
		        , LEAD(BOARD_SEQ, 1, '') OVER (ORDER BY BOARD_SEQ) AS NEXT_SEQ
		        , LAG(BOARD_SEQ, 1, '') OVER (ORDER BY BOARD_SEQ) AS PREV_SEQ
		    FROM BOARD_INFO
		    WHERE BOARD_TYPE_CD = '10'
		)A
		WHERE BOARD_SEQ = #{boardSeq}
	</select>

		<!-- 서팀장 수정함... 한개만 갖어다 써야지요!!!! -->
	<select id="selectMainNotice" parameterType="hashmap" resultMap="noticeMainResultMap">
		SELECT X.BOARD_SEQ		AS BOARD_SEQ
		    , X.TITLE			AS TITLE
		    , X.CONTENTS		AS CONTENTS
		    , FI.FILE_URL		AS FILE_URL
		FROM (
		    SELECT BI.BOARD_SEQ
		        , BI.TITLE
		        , BI.CONTENTS
		        , BI.VIEW_YN
		        , BI.IMPT_NOTI_YN
		        , BI.NOTI_GB_CD
		        , BI.MAIN_NOTI_YN
		        , BI.POP_YN
		        , BF.FILE_SEQ
		    FROM BOARD_INFO BI
		        LEFT OUTER JOIN BOARD_FILE BF ON BI.BOARD_SEQ = BF.BOARD_SEQ
		    WHERE BI.BOARD_TYPE_CD = '10'
		        AND BI.MAIN_NOTI_YN = 'Y'
		        AND BI.NOTI_GB_CD <![CDATA[<>]]> #{NOT_IN_NOTI_GB_CD}
		        AND BI.VIEW_YN = 'Y'
		)X LEFT OUTER JOIN FILE_INFO FI ON X.FILE_SEQ = FI.FILE_SEQ
	</select>

	<select id="selectUserInfo" resultType="hashmap">
     	SELECT MBER_SEQ
			 , MBER_GB_CD
			 , MBER_EMAIL
			 , MBER_PASS
			 , MBER_NICK
			 , MBER_NM
			 , TO_CHAR(MBER_PHONE) as MBER_PHONE
			 , MBER_REG_GB_CD
		  FROM MBER_INFO
		 WHERE MBER_SEQ = #{MBER_SEQ}
	</select>

	<insert id="insertOneReg">
		INSERT INTO BOARD_INFO(
				BOARD_TYPE_CD
			  , BOARD_SEQ
			  , WRITE_ID
			  , WRITE_NM
			  , EMAIL
			  , TEL
			  , TITLE
			  , CONTENTS
			  , QNA_TYPE_CD
			  , SMS_YN
			  , EMAIL_YN
			  , MBER_SEQ
			  , WRITE_DATE
			  , UPDT_DATE
			  , REGIST_DT
			  , UPDT_DT
			  , ANS_GB_CD
		  )VALUES(
			  '40'
			  , (SELECT MAX(BOARD_SEQ)+1 FROM BOARD_INFO)
			  , #{USER_EMAIL}
			  , #{WRITE_NM}
			  , #{USER_EMAIL}
			  , #{TEL}
			  , #{QNA_TITLE}
			  , #{QNA_CONTENTS}
			  , #{QNA_TYPE_CD}
			  , #{SMS_YN}
			  , #{EMAIL_YN}
			  , #{MBER_SEQ}
			  , TO_CHAR(SYSDATE, 'YYYYMMDD')
		      , TO_CHAR(SYSDATE, 'YYYYMMDD')
			  , SYSDATE
			  , SYSDATE
			  , '10'
		  )
	</insert>

	<!-- 상품 문의 등록-->
	<insert id="insertProdQna" parameterType="hashmap">
		INSERT INTO BOARD_INFO(BOARD_SEQ
			, BOARD_TYPE_CD
			, TITLE
			, QNA_TYPE_CD
			, CONTENTS
			, WRITE_DATE
			, UPDT_DATE
			, ANS_GB_CD
			, MBER_SEQ
			, PROD_CODE
			, BAN_YN
			, REGIST_DT
			, UPDT_DT)
		VALUES((SELECT NVL(MAX(BOARD_SEQ), 0) + 1 FROM BOARD_INFO)
			, #{BOARD_TYPE_CD}
			, #{TITLE}
			, #{QNA_TYPE_CD}
			, #{CONTENTS}
			, TO_CHAR(SYSDATE, 'YYYYMMDD')
			, TO_CHAR(SYSDATE, 'YYYYMMDD')
			, '20'
			, #{MBER_SEQ}
			, #{PROD_CODE}
			, 'N'
			, SYSDATE
			, SYSDATE)
	</insert>

	<select id="selectCountReview" parameterType="string" resultType="int">
		SELECT COUNT(*) AS CNT
		FROM BOARD_INFO
		WHERE BOARD_TYPE_CD = '70'
			AND PROD_CODE = #{prodCode}
	</select>


	<!-- 상품 후기 목록 조회-->
	<select id="selectListReview" parameterType="hashmap" resultMap="reviewListResultMap">
		SELECT RVW.RNUM					AS RNUM
		     , RVW.CNT           	AS CNT
		     , RVW.AVG_SCORE     	AS AVG_SCORE
		     , RVW.BOARD_SEQ     	AS BOARD_SEQ
		     , RVW.SCORE         	AS SCORE
		     , RVW.CONTENTS      	AS CONTENTS
		     , RVW.MBER_SEQ      	AS MBER_SEQ
		     , RVW.PROD_CODE     	AS PROD_CODE
		     , RVW.BAN_YN			AS BAN_YN
		     , RVW.REGIST_DT    	AS REGIST_DT
		     , RVW.TIME_GAP			AS TIME_GAP
		     , RVW.BOARD_FILE_URL 	AS BOARD_FILE_URL
		     , RVW.EMAIL          	AS EMAIL
		     , RVW.MBER_IMG_URL     AS MBER_IMG_URL
		     , FI1.FILE_URL				    AS LEVEL_IMG
		  FROM (
		        SELECT ROWNUM          	AS RNUM
		             , WW.CNT           AS CNT
		             , WW.AVG_SCORE      AS AVG_SCORE
		             , XX.BOARD_SEQ      AS BOARD_SEQ
		             , XX.SCORE          AS SCORE
		             , XX.CONTENTS       AS CONTENTS
		             , XX.MBER_SEQ       AS MBER_SEQ
		             , XX.PROD_CODE      AS PROD_CODE
		             , XX.BAN_YN			AS BAN_YN
		             , XX.REGIST_DT    	AS REGIST_DT
		             , XX.TIME_GAP		AS TIME_GAP
		             , XX.BOARD_FILE_URL AS BOARD_FILE_URL
		             , XX.EMAIL          AS EMAIL
		             , FF.FILE_URL       AS MBER_IMG_URL
		             , ML.FILE_SEQ		AS LEVEL_IMG_SEQ
		          FROM (
		                SELECT COUNT(BOARD_SEQ) AS CNT
		                     , AVG(AVG_SCORE)    AS AVG_SCORE
		                  FROM BOARD_INFO
		                 WHERE PROD_CODE = #{PROD_CODE}
		                   AND BOARD_TYPE_CD = '70'
		               ) WW,
		               (
		                SELECT BI.BOARD_SEQ      AS BOARD_SEQ
		                     , BI.AVG_SCORE       AS SCORE
		                     , BI.CONTENTS        AS CONTENTS
		                     , BI.MBER_SEQ        AS MBER_SEQ
		                     , BI.PROD_CODE       AS PROD_CODE
		                     , BI.BAN_YN			AS BAN_YN
		                     , X.REGIST_DT    	AS REGIST_DT
		                     , X.TIME_GAP		AS TIME_GAP
		                     , X.FILE_URL        AS BOARD_FILE_URL
		                     , MI.MBER_EMAIL      AS EMAIL
		                     , MI.MBER_IMG        AS MBER_IMG
		                     , MDI.BUY_MBER_LEV_SEQ AS BUY_MBER_LEV_SEQ
		                  FROM (
		                        SELECT T.BOARD_SEQ      	AS BOARD_SEQ
		                             , T.REGIST_DT  		AS REGIST_DT
		                             , TO_CHAR(T.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
		                             , FI.FILE_URL      	AS FILE_URL
		                          FROM (
		                                SELECT BI.BOARD_SEQ     AS BOARD_SEQ
		                                     , BI.REGIST_DT    	AS REGIST_DT
		                                     , MIN(BF.FILE_SEQ)  AS FILE_SEQ
		                                  FROM BOARD_INFO BI LEFT OUTER JOIN BOARD_FILE BF ON BI.BOARD_SEQ = BF.BOARD_SEQ
		                                 WHERE BI.PROD_CODE = #{PROD_CODE}
		                                   AND BI.BOARD_TYPE_CD = '70'
		                                GROUP BY BI.BOARD_SEQ, BI.REGIST_DT
		                               ) T LEFT OUTER JOIN FILE_INFO FI ON T.FILE_SEQ = FI.FILE_SEQ
		                       ) X
		                            INNER JOIN BOARD_INFO BI ON X.BOARD_SEQ = BI.BOARD_SEQ
		                            INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
		                            LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
		                ORDER BY X.REGIST_DT DESC
		            ) XX LEFT OUTER JOIN FILE_INFO FF ON XX.MBER_IMG = FF.FILE_SEQ
		            LEFT OUTER JOIN MBER_LEV ML ON XX.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
		       ) RVW
       				LEFT OUTER JOIN FILE_INFO FI1 ON RVW.LEVEL_IMG_SEQ = FI1.FILE_SEQ
       		 WHERE RVW.RNUM <![CDATA[>=]]> #{S_NUM}
		   		AND RVW.RNUM <![CDATA[<=]]> #{E_NUM}
	</select>
	
	<!-- 상품 후기 목록 조회-->
	<select id="selectListPcReviewCnt" parameterType="hashmap" resultType="int">
		SELECT COUNT(*)
		  FROM (
		        SELECT ROWNUM          	AS RNUM
		             , WW.CNT           AS CNT
		             , WW.AVG_SCORE      AS AVG_SCORE
		             , XX.BOARD_SEQ      AS BOARD_SEQ
		             , XX.SCORE          AS SCORE
		             , XX.CONTENTS       AS CONTENTS
		             , XX.MBER_SEQ       AS MBER_SEQ
		             , XX.PROD_CODE      AS PROD_CODE
		             , XX.BAN_YN			AS BAN_YN
		             , XX.REGIST_DT    	AS REGIST_DT
		             , XX.TIME_GAP		AS TIME_GAP
		             , XX.BOARD_FILE_URL AS BOARD_FILE_URL
		             , XX.EMAIL          AS EMAIL
		             , FF.FILE_URL       AS MBER_IMG_URL
		             , ML.FILE_SEQ		AS LEVEL_IMG_SEQ
		          FROM (
		                SELECT COUNT(BOARD_SEQ) AS CNT
		                     , AVG(AVG_SCORE)    AS AVG_SCORE
		                  FROM BOARD_INFO
		                 WHERE PROD_CODE = #{PROD_CODE}
		                   AND BOARD_TYPE_CD = '70'
		               ) WW,
		               (
		                SELECT BI.BOARD_SEQ      AS BOARD_SEQ
		                     , BI.AVG_SCORE       AS SCORE
		                     , BI.CONTENTS        AS CONTENTS
		                     , BI.MBER_SEQ        AS MBER_SEQ
		                     , BI.PROD_CODE       AS PROD_CODE
		                     , BI.BAN_YN			AS BAN_YN
		                     , X.REGIST_DT    	AS REGIST_DT
		                     , X.TIME_GAP		AS TIME_GAP
		                     , X.FILE_URL        AS BOARD_FILE_URL
		                     , MI.MBER_EMAIL      AS EMAIL
		                     , MI.MBER_IMG        AS MBER_IMG
		                     , MDI.BUY_MBER_LEV_SEQ AS BUY_MBER_LEV_SEQ 
		                  FROM (
		                        SELECT T.BOARD_SEQ      	AS BOARD_SEQ
		                             , T.REGIST_DT  		AS REGIST_DT
		                             , TO_CHAR(T.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
		                             , FI.FILE_URL      	AS FILE_URL
		                          FROM (
		                                SELECT BI.BOARD_SEQ     AS BOARD_SEQ
		                                     , BI.REGIST_DT    	AS REGIST_DT
		                                     , MIN(BF.FILE_SEQ)  AS FILE_SEQ
		                                  FROM BOARD_INFO BI LEFT OUTER JOIN BOARD_FILE BF ON BI.BOARD_SEQ = BF.BOARD_SEQ
		                                 WHERE BI.PROD_CODE = #{PROD_CODE}
		                                   AND BI.BOARD_TYPE_CD = '70'
		                                GROUP BY BI.BOARD_SEQ, BI.REGIST_DT
		                               ) T LEFT OUTER JOIN FILE_INFO FI ON T.FILE_SEQ = FI.FILE_SEQ
		                       ) X
		                            INNER JOIN BOARD_INFO BI ON X.BOARD_SEQ = BI.BOARD_SEQ
		                            INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
		                            LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
		                ORDER BY X.REGIST_DT DESC
		            ) XX LEFT OUTER JOIN FILE_INFO FF ON XX.MBER_IMG = FF.FILE_SEQ
		            LEFT OUTER JOIN MBER_LEV ML ON XX.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ    
		       ) RVW
       				LEFT OUTER JOIN FILE_INFO FI1 ON RVW.LEVEL_IMG_SEQ = FI1.FILE_SEQ
	</select>

	<!-- 상품 후기 목록 조회-->
	<select id="selectListPcReview" parameterType="hashmap" resultMap="reviewListResultMap">
		<include refid="webCommonMapper.pagingHeader" />
		SELECT RVW.RNUM					AS RNUM
		     , RVW.CNT           	AS CNT
		     , RVW.AVG_SCORE     	AS AVG_SCORE
		     , RVW.BOARD_SEQ     	AS BOARD_SEQ
		     , RVW.SCORE         	AS SCORE
		     , RVW.CONTENTS      	AS CONTENTS
		     , RVW.MBER_SEQ      	AS MBER_SEQ
		     , RVW.PROD_CODE     	AS PROD_CODE
		     , RVW.BAN_YN			AS BAN_YN
		     , RVW.REGIST_DT    	AS REGIST_DT
		     , RVW.TIME_GAP			AS TIME_GAP
		     , RVW.BOARD_FILE_URL 	AS BOARD_FILE_URL
		     , RVW.EMAIL          	AS EMAIL
		     , RVW.MBER_IMG_URL     AS MBER_IMG_URL
		     , FI1.FILE_URL				    AS LEVEL_IMG
		     , ROW_NUMBER() OVER(PARTITION BY RVW.PROD_CODE ORDER BY RVW.REGIST_DT DESC ) AS NO
		  FROM (
		        SELECT ROWNUM          	AS RNUM
		             , WW.CNT           AS CNT
		             , WW.AVG_SCORE      AS AVG_SCORE
		             , XX.BOARD_SEQ      AS BOARD_SEQ
		             , XX.SCORE          AS SCORE
		             , XX.CONTENTS       AS CONTENTS
		             , XX.MBER_SEQ       AS MBER_SEQ
		             , XX.PROD_CODE      AS PROD_CODE
		             , XX.BAN_YN			AS BAN_YN
		             , XX.REGIST_DT    	AS REGIST_DT
		             , XX.TIME_GAP		AS TIME_GAP
		             , XX.BOARD_FILE_URL AS BOARD_FILE_URL
		             , XX.EMAIL          AS EMAIL
		             , FF.FILE_URL       AS MBER_IMG_URL
		             , ML.FILE_SEQ		AS LEVEL_IMG_SEQ
		          FROM (
		                SELECT COUNT(BOARD_SEQ) AS CNT
		                     , AVG(AVG_SCORE)    AS AVG_SCORE
		                  FROM BOARD_INFO
		                 WHERE PROD_CODE = #{PROD_CODE}
		                   AND BOARD_TYPE_CD = '70'
		               ) WW,
		               (
		                SELECT BI.BOARD_SEQ      AS BOARD_SEQ
		                     , BI.AVG_SCORE       AS SCORE
		                     , BI.CONTENTS        AS CONTENTS
		                     , BI.MBER_SEQ        AS MBER_SEQ
		                     , BI.PROD_CODE       AS PROD_CODE
		                     , BI.BAN_YN			AS BAN_YN
		                     , X.REGIST_DT    	AS REGIST_DT
		                     , X.TIME_GAP		AS TIME_GAP
		                     , X.FILE_URL        AS BOARD_FILE_URL
		                     , MI.MBER_EMAIL      AS EMAIL
		                     , MI.MBER_IMG        AS MBER_IMG
		                     , MDI.BUY_MBER_LEV_SEQ AS BUY_MBER_LEV_SEQ 
		                  FROM (
		                        SELECT T.BOARD_SEQ      	AS BOARD_SEQ
		                             , T.REGIST_DT  		AS REGIST_DT
		                             , TO_CHAR(T.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
		                             , FI.FILE_URL      	AS FILE_URL
		                          FROM (
		                                SELECT BI.BOARD_SEQ     AS BOARD_SEQ
		                                     , BI.REGIST_DT    	AS REGIST_DT
		                                     , MIN(BF.FILE_SEQ)  AS FILE_SEQ
		                                  FROM BOARD_INFO BI LEFT OUTER JOIN BOARD_FILE BF ON BI.BOARD_SEQ = BF.BOARD_SEQ
		                                 WHERE BI.PROD_CODE = #{PROD_CODE}
		                                   AND BI.BOARD_TYPE_CD = '70'
		                                GROUP BY BI.BOARD_SEQ, BI.REGIST_DT
		                               ) T LEFT OUTER JOIN FILE_INFO FI ON T.FILE_SEQ = FI.FILE_SEQ
		                       ) X
		                            INNER JOIN BOARD_INFO BI ON X.BOARD_SEQ = BI.BOARD_SEQ
		                            INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
		                            LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
		                ORDER BY X.REGIST_DT DESC
		            ) XX LEFT OUTER JOIN FILE_INFO FF ON XX.MBER_IMG = FF.FILE_SEQ
		            LEFT OUTER JOIN MBER_LEV ML ON XX.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ    
		       ) RVW
       				LEFT OUTER JOIN FILE_INFO FI1 ON RVW.LEVEL_IMG_SEQ = FI1.FILE_SEQ
<!--        		 WHERE RVW.RNUM <![CDATA[>=]]> #{S_NUM} -->
<!-- 		   		AND RVW.RNUM <![CDATA[<=]]> #{E_NUM} -->
		<include refid="webCommonMapper.pagingFooter" />
	</select>

	<!-- 상품 후기 조회 -->
	<select id="selectReview" parameterType="string" resultMap="reviewResultMap">
		SELECT X.BOARD_SEQ			AS BOARD_SEQ
		    , X.AVG_SCORE			AS AVG_SCORE
		    , X.CONTENTS			AS CONTENTS
		    <![CDATA[, REPLACE(REPLACE(REPLACE(REPLACE(REPLACE(X.CONTENTS, chr(39), '"'), '<', '&lt'), '>', '&gt'), chr(13), '<br />'), chr(10), '')  ]]>AS CONTENTS_HTML	
		    , X.MBER_SEQ			AS MBER_SEQ
		    , X.BAN_YN				AS BAN_YN
		    , X.REGIST_DT			AS REGIST_DT
		    , X.MBER_EMAIL			AS MBER_EMAIL
		    , X.MBER_FILE_URL		AS MBER_FILE_URL
		    , Y.FILE_SEQ			AS FILE_SEQ
		    , Y.FILE_URL			AS FILE_URL
		    , FI1.FILE_URL         AS LEVEL_IMG
		FROM (
		    SELECT T.BOARD_SEQ      AS BOARD_SEQ
		        , T.AVG_SCORE       AS AVG_SCORE
		        , T.CONTENTS        AS CONTENTS
		        , T.MBER_SEQ        AS MBER_SEQ
		        , T.BAN_YN			AS BAN_YN
		        , T.REGIST_DT       AS REGIST_DT
		        , T.MBER_EMAIL      AS MBER_EMAIL
		        , FI.FILE_URL       AS MBER_FILE_URL
		        , BF.FILE_SEQ       AS FILE_SEQ
		        , ML.FILE_SEQ		AS LEVEL_IMG_SEQ
		    FROM (
		        SELECT BI.BOARD_SEQ     AS BOARD_SEQ
		            , BI.AVG_SCORE      AS AVG_SCORE
		            , BI.CONTENTS       AS CONTENTS
		            , BI.MBER_SEQ       AS MBER_SEQ
		            , BI.BAN_YN			AS BAN_YN
		            , BI.REGIST_DT      AS REGIST_DT
		            , MI.MBER_EMAIL     AS MBER_EMAIL
		            , MI.MBER_IMG       AS MBER_IMG
		            , MDI.BUY_MBER_LEV_SEQ AS BUY_MBER_LEV_SEQ
		        FROM BOARD_INFO BI, MBER_INFO MI, MBER_DTL_INFO MDI
		        WHERE BI.BOARD_SEQ = #{boardSeq}
		            AND BI.MBER_SEQ = MI.MBER_SEQ
		            AND MI.MBER_SEQ = MDI.MBER_SEQ(+)
		    ) T LEFT OUTER JOIN FILE_INFO FI ON T.MBER_IMG = FI.FILE_SEQ
		        LEFT OUTER JOIN BOARD_FILE BF ON T.BOARD_SEQ = BF.BOARD_SEQ
		        LEFT OUTER JOIN MBER_LEV ML ON ML.MBER_LEV_SEQ = T.BUY_MBER_LEV_SEQ
		)X LEFT OUTER JOIN FILE_INFO Y ON X.FILE_SEQ = Y.FILE_SEQ
		 LEFT OUTER JOIN FILE_INFO FI1 ON X.LEVEL_IMG_SEQ = FI1.FILE_SEQ
	</select>

	<!-- 상품 후기 조회 -->
	<select id="selectReviewMod" parameterType="hashmap" resultMap="reviewResultMap">
		SELECT X.BOARD_SEQ			AS BOARD_SEQ
		    , X.AVG_SCORE			AS AVG_SCORE
		    , X.CONTENTS			AS CONTENTS
		    , X.MBER_SEQ			AS MBER_SEQ
		    , X.BAN_YN				AS BAN_YN
		    , X.REGIST_DT			AS REGIST_DT
		    , X.MBER_EMAIL			AS MBER_EMAIL
		    , X.MBER_FILE_URL		AS MBER_FILE_URL
		    , Y.FILE_SEQ			AS FILE_SEQ
		    , Y.FILE_URL			AS FILE_URL
		FROM (
		    SELECT T.BOARD_SEQ      AS BOARD_SEQ
		        , T.AVG_SCORE       AS AVG_SCORE
		        , T.CONTENTS        AS CONTENTS
		        , T.MBER_SEQ        AS MBER_SEQ
		        , T.BAN_YN			AS BAN_YN
		        , T.REGIST_DT       AS REGIST_DT
		        , T.MBER_EMAIL      AS MBER_EMAIL
		        , FI.FILE_URL       AS MBER_FILE_URL
		        , BF.FILE_SEQ       AS FILE_SEQ
		    FROM (
		        SELECT BI.BOARD_SEQ     AS BOARD_SEQ
		            , BI.AVG_SCORE      AS AVG_SCORE
		            , BI.CONTENTS       AS CONTENTS
		            , BI.MBER_SEQ       AS MBER_SEQ
		            , BI.BAN_YN			AS BAN_YN
		            , BI.REGIST_DT      AS REGIST_DT
		            , MI.MBER_EMAIL     AS MBER_EMAIL
		            , MI.MBER_IMG       AS MBER_IMG
		        FROM BOARD_INFO BI, MBER_INFO MI
		        WHERE BI.BOARD_SEQ = #{BOARD_SEQ}
		            AND BI.MBER_SEQ = MI.MBER_SEQ
		            AND BI.MBER_SEQ = #{MBER_SEQ}
		    ) T LEFT OUTER JOIN FILE_INFO FI ON T.MBER_IMG = FI.FILE_SEQ
		        LEFT OUTER JOIN BOARD_FILE BF ON T.BOARD_SEQ = BF.BOARD_SEQ
		)X LEFT OUTER JOIN FILE_INFO Y ON X.FILE_SEQ = Y.FILE_SEQ
	</select>

	<select id="selectSuspect" parameterType="hashmap" resultType="int">
		SELECT COUNT(BOARD_SEQ)
		FROM BOARD_SUSPECT_INFO
		WHERE BOARD_SEQ = #{BOARD_SEQ}
			AND MBER_SEQ = #{MBER_SEQ}
	</select>

	<insert id="insertSuspect" parameterType="hashmap">
		INSERT INTO BOARD_SUSPECT_INFO(SUSPECT_SEQ
								    , BOARD_SEQ
								    , BOARD_TYPE_CD
								    , SUSPECT_GB_CD
								    , SUSPECT_REASON
								    , MBER_SEQ
								    , REGIST_DT
								    , UPDT_DT)
		VALUES( (SELECT NVL(MAX(SUSPECT_SEQ), 0) + 1 FROM BOARD_SUSPECT_INFO)
		    , #{BOARD_SEQ}
		    , #{BOARD_TYPE_CD}
		    , #{SUSPECT_GB_CD}
		    , #{SUSPECT_REASON}
		    , #{MBER_SEQ}
		    , SYSDATE
		    , SYSDATE)
	</insert>

	<!-- 상품 댓글 조회-->
	<select id="selectListComment" parameterType="hashmap" resultMap="commentResultMap">

		SELECT CMT.RNUM
			 , CMT.CNT						AS CNT
			 , CMT.PROD_CODE				AS PROD_CODE
			 , CMT.BOARD_SEQ				AS BOARD_SEQ
			 , CMT.MBER_SEQ					AS MBER_SEQ
			 , CMT.CONTENTS					AS CONTENTS
			 , CMT.MBER_EMAIL				AS MBER_EMAIL
			 , CMT.SSO_GB_CD				AS SSO_GB_CD
			 , CMT.MBER_NICK				AS MBER_NICK
			 , CMT.BAN_YN					AS BAN_YN
			 , CMT.REGIST_DT				AS REGIST_DT
			 , CMT.TIME_GAP				  	AS TIME_GAP
			 , CMT.FILE_URL					AS FILE_URL
			 , FI1.FILE_URL				    AS LEVEL_IMG
		  FROM (
				SELECT ROWNUM       AS RNUM
					 , W.CNT						AS CNT
					 , X.PROD_CODE					AS PROD_CODE
					 , X.BOARD_SEQ					AS BOARD_SEQ
					 , X.MBER_SEQ					AS MBER_SEQ
					 , X.CONTENTS					AS CONTENTS
					 , X.MBER_EMAIL					AS MBER_EMAIL
					 , X.SSO_GB_CD					AS SSO_GB_CD
					 , X.MBER_NICK					AS MBER_NICK
					 , X.BAN_YN						AS BAN_YN
					 , X.REGIST_DT				  	AS REGIST_DT
					 , X.TIME_GAP				  	AS TIME_GAP
					 , ML.FILE_SEQ					AS LEVEL_IMG_SEQ
					 , FI.FILE_URL					AS FILE_URL
				  FROM (
						SELECT COUNT(BOARD_SEQ) AS CNT
						  FROM BOARD_INFO
						 WHERE BOARD_TYPE_CD = '50'
						   AND PROD_CODE = #{PROD_CODE}
						   AND (DEL_YN <![CDATA[<>]]> 'Y' OR DEL_YN IS NULL)
						) W,
					   (
						SELECT BI.BOARD_SEQ
							 , BI.PROD_CODE
							 , BI.MBER_SEQ
							 , BI.CONTENTS
							 , BI.BAN_YN
							 , BI.REGIST_DT
							 , TO_CHAR(BI.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
							 , MI.MBER_IMG
							 , MI.MBER_EMAIL
							 , MI.SSO_GB_CD
							 , MI.MBER_NICK
							 , MDI.BUY_MBER_LEV_SEQ
						  FROM BOARD_INFO BI
			                    INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
			                    LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
						 WHERE BI.BOARD_TYPE_CD = '50'
						   AND BI.PROD_CODE = #{PROD_CODE}
						   AND (BI.DEL_YN <![CDATA[<>]]> 'Y' OR BI.DEL_YN IS NULL)
					  ORDER BY BI.REGIST_DT DESC
					  ) X
					  		LEFT OUTER JOIN FILE_INFO FI ON X.MBER_IMG = FI.FILE_SEQ
					  		LEFT OUTER JOIN MBER_LEV ML ON X.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
			   ) CMT
			   		LEFT OUTER JOIN FILE_INFO FI1 ON CMT.LEVEL_IMG_SEQ = FI1.FILE_SEQ
		 WHERE CMT.RNUM <![CDATA[>=]]> #{S_NUM}
		   AND CMT.RNUM <![CDATA[<=]]> #{E_NUM}

	</select>

		<!-- 상품 댓글 조회-->
	<select id="selectListCommentByProd" parameterType="hashmap" resultMap="commentResultMap">

		SELECT CMT.RNUM
			 , CMT.CNT						AS CNT
			 , CMT.PROD_CODE				AS PROD_CODE
			 , CMT.BOARD_SEQ				AS BOARD_SEQ
			 , CMT.MBER_SEQ					AS MBER_SEQ
			 , CMT.CONTENTS					AS CONTENTS
			 , CMT.MBER_EMAIL				AS MBER_EMAIL
			 , CMT.SSO_GB_CD				AS SSO_GB_CD
			 , CMT.MBER_NICK				AS MBER_NICK
			 , CMT.BAN_YN					AS BAN_YN
			 , CMT.REGIST_DT				AS REGIST_DT
			 , CMT.TIME_GAP				  	AS TIME_GAP
			 , CMT.FILE_URL					AS FILE_URL
			 , FI1.FILE_URL				    AS LEVEL_IMG
		  FROM (
				SELECT ROWNUM       AS RNUM
					 , W.CNT						AS CNT
					 , X.PROD_CODE					AS PROD_CODE
					 , X.BOARD_SEQ					AS BOARD_SEQ
					 , X.MBER_SEQ					AS MBER_SEQ
					 , X.CONTENTS					AS CONTENTS
					 , X.MBER_EMAIL					AS MBER_EMAIL
					 , X.SSO_GB_CD					AS SSO_GB_CD
					 , X.MBER_NICK					AS MBER_NICK
					 , X.BAN_YN						AS BAN_YN
					 , X.REGIST_DT				  	AS REGIST_DT
					 , X.TIME_GAP				  	AS TIME_GAP
					 , ML.FILE_SEQ					AS LEVEL_IMG_SEQ
					 , FI.FILE_URL					AS FILE_URL
				  FROM (
						SELECT COUNT(BOARD_SEQ) AS CNT
						  FROM BOARD_INFO
						 WHERE BOARD_TYPE_CD = '50'
						   AND PROD_CODE = #{PROD_CODE}
						   AND (DEL_YN <![CDATA[<>]]> 'Y' OR DEL_YN IS NULL)
						) W,
					   (
						SELECT BI.BOARD_SEQ
							 , BI.PROD_CODE
							 , BI.MBER_SEQ
							 , BI.CONTENTS
							 , BI.BAN_YN
							 , BI.REGIST_DT
							 , TO_CHAR(BI.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
							 , MI.MBER_IMG
							 , MI.MBER_EMAIL
							 , MI.SSO_GB_CD
							 , MI.MBER_NICK
							 , MDI.BUY_MBER_LEV_SEQ
						  FROM BOARD_INFO BI
			                    INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
			                    LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
						 WHERE BI.BOARD_TYPE_CD = '50'
						   AND BI.PROD_CODE = #{PROD_CODE}
						   AND (BI.DEL_YN <![CDATA[<>]]> 'Y' OR BI.DEL_YN IS NULL)
						   AND (BI.BAN_YN <![CDATA[<>]]> 'Y' OR BI.BAN_YN IS NULL)
					  ORDER BY BI.REGIST_DT DESC
					  ) X
					  		LEFT OUTER JOIN FILE_INFO FI ON X.MBER_IMG = FI.FILE_SEQ
					  		LEFT OUTER JOIN MBER_LEV ML ON X.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
			   ) CMT
			   		LEFT OUTER JOIN FILE_INFO FI1 ON CMT.LEVEL_IMG_SEQ = FI1.FILE_SEQ
		 WHERE CMT.RNUM <![CDATA[>=]]> 1
		   AND CMT.RNUM <![CDATA[<=]]> 3

	</select>

	<!-- 상품 댓글 조회-->
	<select id="selectListReCommentByProd" parameterType="hashmap" resultMap="commentResultMap">

		SELECT CMT.RNUM
			 , CMT.CNT						AS CNT
			 , CMT.PROD_CODE				AS PROD_CODE
			 , CMT.BOARD_SEQ				AS BOARD_SEQ
			 , CMT.MBER_SEQ					AS MBER_SEQ
			 , CMT.CONTENTS					AS CONTENTS
			 , CMT.MBER_EMAIL				AS MBER_EMAIL
			 , CMT.SSO_GB_CD				AS SSO_GB_CD
			 , CMT.MBER_NICK				AS MBER_NICK
			 , CMT.BAN_YN					AS BAN_YN
			 , CMT.REGIST_DT				AS REGIST_DT
			 , CMT.TIME_GAP				  	AS TIME_GAP
			 , CMT.FILE_URL					AS FILE_URL
			 , FI1.FILE_URL				    AS LEVEL_IMG
		  FROM (
				SELECT ROWNUM       AS RNUM
					 , W.CNT						AS CNT
					 , X.PROD_CODE					AS PROD_CODE
					 , X.BOARD_SEQ					AS BOARD_SEQ
					 , X.MBER_SEQ					AS MBER_SEQ
					 , X.CONTENTS					AS CONTENTS
					 , X.MBER_EMAIL					AS MBER_EMAIL
					 , X.SSO_GB_CD					AS SSO_GB_CD
					 , X.MBER_NICK					AS MBER_NICK
					 , X.BAN_YN						AS BAN_YN
					 , X.REGIST_DT				  	AS REGIST_DT
					 , X.TIME_GAP				  	AS TIME_GAP
					 , ML.FILE_SEQ					AS LEVEL_IMG_SEQ
					 , FI.FILE_URL					AS FILE_URL
				  FROM (
						SELECT COUNT(BOARD_SEQ) AS CNT
						  FROM BOARD_INFO
						 WHERE BOARD_TYPE_CD = '50'
						   AND PROD_CODE = #{PROD_CODE}
						   AND (DEL_YN <![CDATA[<>]]> 'Y' OR DEL_YN IS NULL)
						) W,
					   (
						SELECT BI.BOARD_SEQ
							 , BI.PROD_CODE
							 , BI.MBER_SEQ
							 , BI.CONTENTS
							 , BI.BAN_YN
							 , BI.REGIST_DT
							 , TO_CHAR(BI.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
							 , MI.MBER_IMG
							 , MI.MBER_EMAIL
							 , MI.SSO_GB_CD
							 , MI.MBER_NICK
							 , MDI.BUY_MBER_LEV_SEQ
						  FROM BOARD_INFO BI
			                    INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
			                    LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
						 WHERE BI.BOARD_TYPE_CD = '50'
						   AND BI.PROD_CODE = #{PROD_CODE}
						   AND (BI.DEL_YN <![CDATA[<>]]> 'Y' OR BI.DEL_YN IS NULL)
						   AND (BI.BAN_YN <![CDATA[<>]]> 'Y' OR BI.BAN_YN IS NULL)
					  ORDER BY BI.REGIST_DT DESC
					  ) X 
					  		LEFT OUTER JOIN FILE_INFO FI ON X.MBER_IMG = FI.FILE_SEQ
					  		LEFT OUTER JOIN MBER_LEV ML ON X.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
			   ) CMT
			   		LEFT OUTER JOIN FILE_INFO FI1 ON CMT.LEVEL_IMG_SEQ = FI1.FILE_SEQ
		 WHERE CMT.RNUM <![CDATA[>=]]> 1
		   AND CMT.RNUM <![CDATA[<=]]> 5
		 ORDER BY CMT.REGIST_DT ASC

	</select>
	<!-- 상품 댓글 조회-->
	<select id="selectProdComment" parameterType="hashmap" resultMap="commentResultMap">

		SELECT CMT.RNUM
			 , CMT.CNT						AS CNT
			 , CMT.PROD_CODE				AS PROD_CODE
			 , CMT.BOARD_SEQ				AS BOARD_SEQ
			 , CMT.MBER_SEQ					AS MBER_SEQ
			 , CMT.CONTENTS					AS CONTENTS
			 , CMT.MBER_EMAIL				AS MBER_EMAIL
			 , CMT.SSO_GB_CD				AS SSO_GB_CD
			 , CMT.MBER_NICK				AS MBER_NICK
			 , CMT.BAN_YN					AS BAN_YN
			 , CMT.REGIST_DT				AS REGIST_DT
			 , CMT.TIME_GAP				  	AS TIME_GAP
			 , CMT.FILE_URL					AS FILE_URL
			 , FI1.FILE_URL				    AS LEVEL_IMG
		  FROM (
				SELECT ROWNUM       AS RNUM
					 , W.CNT						AS CNT
					 , X.PROD_CODE					AS PROD_CODE
					 , X.BOARD_SEQ					AS BOARD_SEQ
					 , X.MBER_SEQ					AS MBER_SEQ
					 , X.CONTENTS					AS CONTENTS
					 , X.MBER_EMAIL					AS MBER_EMAIL
					 , X.SSO_GB_CD					AS SSO_GB_CD
					 , X.MBER_NICK					AS MBER_NICK
					 , X.BAN_YN						AS BAN_YN
					 , X.REGIST_DT				  	AS REGIST_DT
					 , X.TIME_GAP				  	AS TIME_GAP
					 , ML.FILE_SEQ					AS LEVEL_IMG_SEQ
					 , FI.FILE_URL					AS FILE_URL
				  FROM (
						SELECT COUNT(BOARD_SEQ) AS CNT
						  FROM BOARD_INFO
						 WHERE BOARD_TYPE_CD = '50'
						   AND PROD_CODE = #{PROD_CODE}
						   AND (DEL_YN <![CDATA[<>]]> 'Y' OR DEL_YN IS NULL)
						) W,
					   (
						SELECT BI.BOARD_SEQ
							 , BI.PROD_CODE
							 , BI.MBER_SEQ
							 , BI.CONTENTS
							 , BI.BAN_YN
							 , BI.REGIST_DT
							 , TO_CHAR(BI.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
							 , MI.MBER_IMG
							 , MI.MBER_EMAIL
							 , MI.SSO_GB_CD
							 , MI.MBER_NICK
							 , MDI.BUY_MBER_LEV_SEQ
						  FROM BOARD_INFO BI
			                    INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
			                    LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
						 WHERE BI.BOARD_TYPE_CD = '50'
						   AND BI.PROD_CODE = #{PROD_CODE}
						   AND (BI.DEL_YN <![CDATA[<>]]> 'Y' OR BI.DEL_YN IS NULL)
						   AND (BI.BAN_YN <![CDATA[<>]]> 'Y' OR BI.BAN_YN IS NULL)
					  ORDER BY BI.REGIST_DT DESC
					  ) X 
					  		LEFT OUTER JOIN FILE_INFO FI ON X.MBER_IMG = FI.FILE_SEQ
					  		LEFT OUTER JOIN MBER_LEV ML ON X.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
			   ) CMT
			   		LEFT OUTER JOIN FILE_INFO FI1 ON CMT.LEVEL_IMG_SEQ = FI1.FILE_SEQ
		 WHERE CMT.RNUM <![CDATA[>=]]> 1
		   AND CMT.RNUM <![CDATA[<=]]> #{E_NUM}
		 ORDER BY CMT.REGIST_DT ASC

	</select>
	
<!-- 	상품 댓글 총 갯수 -->
	<select id="selectListPcCommentByProdCnt" parameterType="hashmap" resultType="int">

		SELECT COUNT(*) AS CNT
		  FROM (
				SELECT ROWNUM       AS RNUM
					 , W.CNT						AS CNT
					 , X.PROD_CODE					AS PROD_CODE
					 , X.BOARD_SEQ					AS BOARD_SEQ
					 , X.MBER_SEQ					AS MBER_SEQ
					 , X.CONTENTS					AS CONTENTS
					 , X.MBER_EMAIL					AS MBER_EMAIL
					 , X.SSO_GB_CD					AS SSO_GB_CD
					 , X.MBER_NICK					AS MBER_NICK
					 , X.BAN_YN						AS BAN_YN
					 , X.REGIST_DT				  	AS REGIST_DT
					 , X.TIME_GAP				  	AS TIME_GAP
					 , ML.FILE_SEQ					AS LEVEL_IMG_SEQ
					 , FI.FILE_URL					AS FILE_URL
				  FROM (
						SELECT COUNT(BOARD_SEQ) AS CNT
						  FROM BOARD_INFO
						 WHERE BOARD_TYPE_CD = '50'
						   AND PROD_CODE = #{PROD_CODE}
						   AND (DEL_YN <![CDATA[<>]]> 'Y' OR DEL_YN IS NULL)
						) W,
					   (
						SELECT BI.BOARD_SEQ
							 , BI.PROD_CODE
							 , BI.MBER_SEQ
							 , BI.CONTENTS
							 , BI.BAN_YN
							 , BI.REGIST_DT
							 , TO_CHAR(BI.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
							 , MI.MBER_IMG
							 , MI.MBER_EMAIL
							 , MI.SSO_GB_CD
							 , MI.MBER_NICK
							 , MDI.BUY_MBER_LEV_SEQ
						  FROM BOARD_INFO BI
			                    INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
			                    LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
						 WHERE BI.BOARD_TYPE_CD = '50'
						   AND BI.PROD_CODE = #{PROD_CODE}
						   AND (BI.DEL_YN <![CDATA[<>]]> 'Y' OR BI.DEL_YN IS NULL)
						   AND (BI.BAN_YN <![CDATA[<>]]> 'Y' OR BI.BAN_YN IS NULL)
					  ORDER BY BI.REGIST_DT DESC
					  ) X 
					  		LEFT OUTER JOIN FILE_INFO FI ON X.MBER_IMG = FI.FILE_SEQ
					  		LEFT OUTER JOIN MBER_LEV ML ON X.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
			   ) CMT
			   		LEFT OUTER JOIN FILE_INFO FI1 ON CMT.LEVEL_IMG_SEQ = FI1.FILE_SEQ
	</select>
	
	<!-- 상품 댓글 조회-->
	<select id="selectListPcCommentByProd" parameterType="hashmap" resultMap="commentResultMap">
		
		<include refid="webCommonMapper.pagingHeader" />
		SELECT CMT.RNUM
			 , CMT.CNT						AS CNT
			 , CMT.PROD_CODE				AS PROD_CODE
			 , CMT.BOARD_SEQ				AS BOARD_SEQ
			 , CMT.MBER_SEQ					AS MBER_SEQ
			 , CMT.CONTENTS					AS CONTENTS
			 , CMT.MBER_EMAIL				AS MBER_EMAIL
			 , CMT.SSO_GB_CD				AS SSO_GB_CD
			 , CMT.MBER_NICK				AS MBER_NICK
			 , CMT.BAN_YN					AS BAN_YN
			 , CMT.REGIST_DT				AS REGIST_DT
			 , CMT.TIME_GAP				  	AS TIME_GAP
			 , CMT.FILE_URL					AS FILE_URL
			 , FI1.FILE_URL				    AS LEVEL_IMG
			 , ROW_NUMBER() OVER(PARTITION BY CMT.PROD_CODE ORDER BY CMT.REGIST_DT DESC ) AS NO
		  FROM (
				SELECT ROWNUM       AS RNUM
					 , W.CNT						AS CNT
					 , X.PROD_CODE					AS PROD_CODE
					 , X.BOARD_SEQ					AS BOARD_SEQ
					 , X.MBER_SEQ					AS MBER_SEQ
					 , X.CONTENTS					AS CONTENTS
					 , X.MBER_EMAIL					AS MBER_EMAIL
					 , X.SSO_GB_CD					AS SSO_GB_CD
					 , X.MBER_NICK					AS MBER_NICK
					 , X.BAN_YN						AS BAN_YN
					 , X.REGIST_DT				  	AS REGIST_DT
					 , X.TIME_GAP				  	AS TIME_GAP
					 , ML.FILE_SEQ					AS LEVEL_IMG_SEQ
					 , FI.FILE_URL					AS FILE_URL
				  FROM (
						SELECT COUNT(BOARD_SEQ) AS CNT
						  FROM BOARD_INFO
						 WHERE BOARD_TYPE_CD = '50'
						   AND PROD_CODE = #{PROD_CODE}
						   AND (DEL_YN <![CDATA[<>]]> 'Y' OR DEL_YN IS NULL)
						) W,
					   (
						SELECT BI.BOARD_SEQ
							 , BI.PROD_CODE
							 , BI.MBER_SEQ
							 , BI.CONTENTS
							 , BI.BAN_YN
							 , BI.REGIST_DT
							 , TO_CHAR(BI.REGIST_DT, 'YYYY-MM-DD HH24:MI:SS') AS TIME_GAP
							 , MI.MBER_IMG
							 , MI.MBER_EMAIL
							 , MI.SSO_GB_CD
							 , MI.MBER_NICK
							 , MDI.BUY_MBER_LEV_SEQ
						  FROM BOARD_INFO BI
			                    INNER JOIN MBER_INFO MI ON BI.MBER_SEQ = MI.MBER_SEQ
			                    LEFT OUTER JOIN MBER_DTL_INFO MDI ON BI.MBER_SEQ = MDI.MBER_SEQ
						 WHERE BI.BOARD_TYPE_CD = '50'
						   AND BI.PROD_CODE = #{PROD_CODE}
						   AND (BI.DEL_YN <![CDATA[<>]]> 'Y' OR BI.DEL_YN IS NULL)
						   AND (BI.BAN_YN <![CDATA[<>]]> 'Y' OR BI.BAN_YN IS NULL)
					  ORDER BY BI.REGIST_DT DESC
					  ) X 
					  		LEFT OUTER JOIN FILE_INFO FI ON X.MBER_IMG = FI.FILE_SEQ
					  		LEFT OUTER JOIN MBER_LEV ML ON X.BUY_MBER_LEV_SEQ = ML.MBER_LEV_SEQ
			   ) CMT
			   		LEFT OUTER JOIN FILE_INFO FI1 ON CMT.LEVEL_IMG_SEQ = FI1.FILE_SEQ
<!-- 		 WHERE CMT.RNUM <![CDATA[>=]]> #{S_NUM} -->
<!-- 		   AND CMT.RNUM <![CDATA[<=]]> #{E_NUM} -->
		<include refid="webCommonMapper.pagingFooter" />
	</select>
	
	<!-- 상품 댓글 등록-->
	<insert id="insertProdComment" parameterType="hashmap">
		INSERT INTO BOARD_INFO(
		      BOARD_SEQ
			, BOARD_TYPE_CD
			, CONTENTS
			, WRITE_DATE
			, UPDT_DATE
			, VIEW_CNT
			, MBER_SEQ
			, PROD_CODE
			, BAN_YN
			, REGIST_DT
			, UPDT_DT)
		VALUES((SELECT NVL(MAX(BOARD_SEQ), 0) + 1 FROM BOARD_INFO)
			, #{BOARD_TYPE_CD}
			, #{CONTENTS}
			, TO_CHAR(SYSDATE, 'YYYYMMDD')
			, TO_CHAR(SYSDATE, 'YYYYMMDD')
			, 0
			, #{MBER_SEQ}
			, #{PROD_CODE}
			, 'N'
			, SYSDATE
			, SYSDATE)
	</insert>

	<update id="updateComment" parameterType="hashmap">
		UPDATE BOARD_INFO
		SET   CONTENTS = #{CONTENTS}
			, UPDT_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
			, UPDT_DT = SYSDATE
		WHERE 	BOARD_SEQ = #{BOARD_SEQ}
	</update>

	<delete id="deleteComment" parameterType="hashmap">
		UPDATE BOARD_INFO
		   SET DEL_YN = 'Y'
			  ,DEL_DATE = TO_CHAR(SYSDATE, 'YYYYMMDD')
			  ,UPDT_DT = SYSDATE
		WHERE BOARD_SEQ = #{BOARD_SEQ}
	</delete>

	<!-- 판매자 신고 조회 -->
	<select id="selectSellerSuspect" parameterType="hashmap" resultType="int">
		SELECT COUNT(SELELR_SUSPECT_SEQ)
		  FROM SELLER_SUSPECT_INFO
		 WHERE SELLER_MBER_SEQ = #{SELLER_MBER_SEQ}
		   AND MBER_SEQ = #{MBER_SEQ}
	</select>

	<!-- 판매자 신고 등록 -->
	<insert id="insertSellerSuspect" parameterType="hashmap">
		INSERT INTO SELLER_SUSPECT_INFO(SELELR_SUSPECT_SEQ
								    , SELLER_MBER_SEQ
								    , SELLER_SUSPECT_GB_CD
								    , MBER_SEQ
								    , SUSPECT_REASON
								    , REGIST_DT)
		VALUES( (SELECT NVL(MAX(SELELR_SUSPECT_SEQ), 0) + 1 FROM SELLER_SUSPECT_INFO)
		    , #{SELLER_MBER_SEQ}
		    , #{SELLER_SUSPECT_GB_CD}
		    , #{MBER_SEQ}
		    , #{SUSPECT_REASON}
		    , SYSDATE)
	</insert>

	<!-- PUSH URL-->
	<select id="selectPushIFUrl" resultType="String">
       SELECT COM_CD_NM
         FROM CODE
        WHERE GRP_CD = 'SITE_DEFAULT'
          AND COM_CD = 'PUSH_IF_URL'
	</select>

		<select id="selectProdMberSeq" resultType="String" parameterType="hashmap">
       SELECT MBER_SEQ
         FROM PROD
        WHERE PROD_CODE = #{PROD_CODE}
	</select>


	<select id="selectCntReview" parameterType="hashmap" resultType="int">
		SELECT COUNT(MI.MBER_EMAIL)
		FROM BOARD_INFO BI
		JOIN MBER_INFO MI
		ON BI.MBER_SEQ = MI.MBER_SEQ
		WHERE BI.PROD_CODE = #{PROD_CODE}
		AND BI.BOARD_TYPE_CD = '70'
		AND MI.MBER_EMAIL = #{MBER_EMAIL}
	</select>
</mapper>