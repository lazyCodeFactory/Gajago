package com.ssocio.sharing.cmmn.util;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.springframework.web.servlet.view.document.AbstractExcelView;

/**
 * <pre>
 * 
 * 
 * @author S.B.LEE
 * @version
 * @since 2015. 6. 24.. 오후 6:07:51
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 6. 24.	|	S.B.LEE	|신규
 * @쌔애
 * </pre>
 */
public class ExcelDownloadView extends AbstractExcelView {
	HSSFCellStyle hcs = null;
	HSSFCellStyle hcsHeader = null;
	HSSFFont fontHeader = null;
	
	public ExcelDownloadView(){
		super();
	}
	
	@SuppressWarnings({"unchecked"})
	@Override
	protected void buildExcelDocument(Map<String, Object> model, HSSFWorkbook workbook, HttpServletRequest request, HttpServletResponse response)throws Exception {
		//controller에서 ModelAndView 객체에 addObject하여 보내온 데이터를 꺼낸다.
		String SheetName = (String)model.get("SheetName");
		List<String> excelTitle = (List<String>)model.get("excelTitle");
		List<String> CellName = (List<String>)model.get("CellName");
		List<Map<String, Object>> excelList = (List<Map<String, Object>>)model.get("excelList");
		
		//스타일 정의
		this.hcs = workbook.createCellStyle();
		this.hcs.setFont(workbook.createFont());
		this.hcs.setWrapText( true );
		
		//헤더스타일 정의
		this.hcsHeader = workbook.createCellStyle();
		this.hcsHeader.setFont(workbook.createFont());
		this.hcsHeader.setFillBackgroundColor(HSSFColor.GREEN.index);//헤더색추가
		this.hcsHeader.setFillForegroundColor(HSSFColor.LIGHT_GREEN.index);
		this.hcsHeader.setFillPattern(HSSFCellStyle.SOLID_FOREGROUND);
		this.fontHeader = workbook.createFont();
		this.fontHeader.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);//폰트굵게
		this.hcsHeader.setFont(this.fontHeader);
		
		//첫 시트를 만든다.
		HSSFSheet sheet = creatFirstSheet(workbook, SheetName);
		creatColum(sheet, excelTitle);

		int rowNum = 1;

		for(Map<String, Object> excelInfo : excelList ){
			createRow(sheet, excelInfo, CellName, rowNum++);
		}
	}

	// 시트를 만든다
	private HSSFSheet creatFirstSheet(HSSFWorkbook workbook, String SheetName){
		HSSFSheet sheet = workbook.createSheet();
		
		// setSheetName(시트순서, 시트이름)
		workbook.setSheetName(0,SheetName);

		return sheet;
	}
	
	// 시트에 대한 헤더정보 컬럼을 만든다
	private void creatColum(HSSFSheet sheet, List<String> excelTitle) {
	 
		HSSFRow header = sheet.createRow((short)0);
		HSSFCell cell = null;
		
		for(int i=0; i<excelTitle.size();i++){
			cell = header.createCell(i);
			cell.setCellStyle(this.hcsHeader);//헤더 스타일 적용
			cell.setCellValue(excelTitle.get(i));
			sheet.autoSizeColumn(i);
		}
	}

	// 각 로우에 대한 값 입력
	private void createRow(HSSFSheet sheet, Map<String, Object> excelInfo, List<String> CellName, int rowNum){	 
		HSSFRow row = sheet.createRow(rowNum);
		HSSFCell cell = null;
		for(int i=0;i<CellName.size();i++){
//			logger.debug(">>>>> CellName.get(i) : "+CellName.get(i));
//			logger.debug(">>>>> excelInfo.get(CellName.get(i)) : "+excelInfo.get(CellName.get(i)));
			cell = row.createCell(i);
			cell.setCellType( HSSFCell.CELL_TYPE_STRING ); //개행 문자 적용
			cell.setCellValue(nvlObj(excelInfo.get(CellName.get(i))).replaceAll("\\\\n", "\n").trim());
//			cell.setCellValue(nvl(excelInfo.get(CellName.get(i))).replaceAll("\\\\n", "\n"));
			cell.setCellStyle(this.hcs);
			sheet.autoSizeColumn(i);
		}
	}
	  
	public String nvl(String src) {
		if (src==null || "".equals(src) || src.length() <=0) return "";
		return src;
	}
	
	public String nvlObj(Object src) {
		if (src == null || "".equals(src.toString()) || src.toString().length() <=0) return "";
		return src.toString();
	}
} 
