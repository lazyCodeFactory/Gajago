package com.ssocio.sharing.controller.admin;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.service.admin.AdminPolicyService;

/**
 * <pre>
 * 콩통 컨트롤러
 * 콩통 처리를 위한 컨트롤러
 * @author J.K.CHOI
 * @version
 * @since 2015. 7. 31. 오후 7:18:35
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 31.	|	J.K.CHOI	|신규
 * @비고
 * </pre>
 */
@Controller
public class AdminPolicyController extends AdminReferController {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminPolicyController.class);

	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private AdminPolicyService adminPolicyService;


	/**
	 * <pre>
	 * 게시글관리 리스트 조회
	 * 게시글관리 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/policy/selectListPolicy.do")
	public ModelAndView selectListPolicy(HttpServletRequest request
										, HttpServletResponse response
										, @RequestParam Map<String, Object> inParam
										, @RequestParam (value="chkType", required=false) String[] chkType) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("POLICY LIST START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();

		try {
			//라디오버튼 구분 코드값 처리
			if(inParam.get("chkType") == null || ("").equals(inParam.get("chkType")))
			{
//				String[] chkType1 = {"30", "50", "70", "72"};
				String[] chkType1 = {"50", "70"};
				inParam.put("chkType", chkType1);
			}else{
				inParam.put("chkType", chkType);
			}
			mav.addObject("list", adminPolicyService.selectListPolicy(inParam));			//게시글관리 리스트
			mav.addObject("params", inParam);
			mav.setViewName("admin/policy/selectListPolicy");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 수정화면 이동
	 *
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/policy/updatePolicy.do")
	public ModelAndView updatePolicy(HttpServletRequest request
									, HttpServletResponse response
									, @RequestParam Map<String, Object> inParam
									, @RequestParam (value="chkType", required=false) String[] chkType) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("POLICY UPDATE VIEW START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		try {
			//라디오버튼 구분 코드값 처리
			if(inParam.get("chkType") == null || ("").equals(inParam.get("chkType")))
			{
				String[] chkType1 = {"30", "50", "70"};
				inParam.put("chkType", chkType1);
			}else{
				inParam.put("chkType", chkType);
			}
			mav.addObject("IU", "U");																						//등록(I) or 수정(U) FLAG
			inParam.put("rowNum", "1");
			mav.addObject("selectPolicy", adminPolicyService.selectPolicy(inParam).get("selectPolicy"));					//게시글관리 상세조회
			mav.addObject("selectListPolicyStat", adminPolicyService.selectPolicy(inParam).get("selectListPolicyStat"));	//게시글관리 상태 리스트조회
			inParam.put("rowNum", null);
			mav.addObject("selectPolicyStat", adminPolicyService.selectPolicy(inParam).get("selectPolicyStat"));			//게시글관리 상태 상세조회
			mav.addObject("params", inParam);
			mav.setViewName("admin/policy/insertPolicy");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * <pre>
	 * 게시글관리 등록
	 * 게시글관리 등록
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 3:18:21
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/policy/insertPolicyReg.do")
	public ModelAndView insertPolicyReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("POLICY INSERT REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView  mav = new ModelAndView("jsonView");
		try {
			adminPolicyService.insertPolicyReg(inParam, request);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 게시글관리 수정
	 * 게시글관리 수정
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 3:30:24
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/policy/updatePolicyReg.do")
	public ModelAndView updatePolicyReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("POLICY UPDATE REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView  mav = new ModelAndView("jsonView");
		try {
			adminPolicyService.updatePolicyReg(inParam, request);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 게시글관리 삭제
	 * 게시글관리 삭제
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 13 오후 3:18:21
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/policy/deletePolicy.do")
	public ModelAndView deletePolicy(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("POLICY DELETE REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView  mav = new ModelAndView("jsonView");
		try {
			adminPolicyService.deletePolicy(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
}
