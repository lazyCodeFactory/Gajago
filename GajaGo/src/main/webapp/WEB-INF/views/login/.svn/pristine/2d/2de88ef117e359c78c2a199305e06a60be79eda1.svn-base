package com.ssocio.sharing.dao.seller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
* <pre>
* 1. 패키지명 : com.ssocio.sharing.dao.admin
* 2. 타입명 : AdminRentalOrderDao.java
* 3. 작성일 : 2015. 10. 20. 오후 2:05:51
* 4. 작성자 : guitarhyo
* 5. 설명 : 렌탈 주문 관리
* </pre>
*/
@Component
public class SellerRentalOrderDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerRentalOrderDao.class);
	
	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//	 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//	 -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionSeller")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	
	

	public List<Map<String, Object>> selectListExcelRentalOrder(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListExcelRentalOrder Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerRentalOrderMapper.selectListExcelRentalOrder", inParam);
		} catch (Exception e) {
			logger.error("selectListExcelRentalOrder DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	
	public int selectListRentalOrderCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListRentalOrderCnt Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.selectOne("sellerRentalOrderMapper.selectListRentalOrderCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListRentalOrderCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	

	public List<Map<String, Object>> selectListRentalOrder(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListRentalOrder Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerRentalOrderMapper.selectListRentalOrder", inParam);
		} catch (Exception e) {
			logger.error("selectListRentalOrder DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	public String selectRentalAgr(String PROD_CODE) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRentalAgr Start");
		String out = "";
		try {
			out =  sqlSession.selectOne("sellerRentalOrderMapper.selectRentalAgr", PROD_CODE);
		} catch (Exception e) {
			logger.error("selectRentalAgr DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return out;
	}
	
	

	public int updateRentalOrdCncl(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateRentalOrdCncl Start");
		int outParam = 0;
		try {
			outParam =  sqlSession.update("sellerRentalOrderMapper.updateRentalOrdCncl", inParam);
		} catch (Exception e) {
			logger.error("updateRentalOrdCncl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	
	
	
	/*==================================================================================================================================================*/
}
