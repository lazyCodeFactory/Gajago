package com.ssocio.sharing.controller.admin;


import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.HSSFColor;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.service.admin.AdminSmartStockService;
import com.ssocio.sharing.vo.admin.AdminSession;

/**
 * <pre>
 * 스마트폰 쉐어링 Controller
 * 스마트폰 리스트 / 수정/ 삭제/ 등록 기능을 위한 Controller
 * @author J.S.LEE
 * @version
 * @since 2015. 7. 10. 오후 5:46:17
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 10.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
@Controller
public class AdminSmartStockController extends AdminReferController {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminSmartStockController.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private AdminSmartStockService adminSmartStockService;

	
	
	/**
	 * <pre>
	 * 스마트 상품 재고 리스트 
	 * 스마트 상품 재고 리스트 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 10. 오후 6:02:45
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/smartstock/selectListSmartProd.do")
	public ModelAndView selectListSPProd(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {
			System.out.println(mav);
			mav.addObject("list",adminSmartStockService.selectListSmartProd(inParam));
			mav.setViewName("admin/smartstock/selectListSmartProd");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 스마트 상품 재고 상세 
	 * 스마트 상품 재고 상세
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 10. 오후 6:02:45
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/smartstock/selectSmartDtl.do")
	public ModelAndView seelectSmartDtl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {
			System.out.println(mav);
			mav.addObject("list",adminSmartStockService.seelectSmartDtl(inParam));
			mav.addObject("params", inParam);
			mav.setViewName("admin/smartstock/selectSmartDtl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 스마트 재고 상품 상태값 업데이트 
	 * 스마트 재고 상품 상태값 업데이트 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 10. 오후 6:02:45
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/smartstock/updateProdStat.do")
	public ModelAndView updateProdStat(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("jsonView");
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {
			System.out.println("@#$@#$@#$@#$@#$@#$@#$");
			System.out.println(inParam);
			System.out.println("@#$@#$@#$@#$@#$@#$@#$");
			mav.addObject("list",adminSmartStockService.updateProdStat(inParam));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	

	/**
	 * <pre>
	 * 일련번호 삭제하기 
	 * 일련번호 삭제하기
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 10. 오후 6:02:45
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/smartstock/delUniqueNo.do")
	public ModelAndView delUniqueNo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("jsonView");
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {
			System.out.println("@#$@#$@#$@#$@#$@#$@#$");
			System.out.println(inParam);
			System.out.println("@#$@#$@#$@#$@#$@#$@#$");
			mav.addObject("list",adminSmartStockService.delUniqueNo(inParam));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 대량 상품등록 엑셀 업로드
	 * 엑셀파일을 로딩해서 상품을 대량등록한다.
	 * @param req
	 * @return
	 * @exception
	 * @date 2015. 7. 17. 오후 7:48:55
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/smartstock/uploadProdExcel.do")
	public ModelAndView uploadProdExcel(MultipartHttpServletRequest req, @RequestParam Map<String, Object> inParam){
		ModelAndView mav = new ModelAndView("jsonView2");	    
	    try {
	    	mav.addObject("uploadResult",  adminSmartStockService.uploadProdExcel(req,inParam));
	    } catch (Exception e) {
	      mav.addObject("uploadResult", e.getMessage());
	      mav.addObject("msg" , e.getMessage());
	      mav.addObject("error_code", "500");
	      mav.addObject("error_message", e.getMessage());
	    }	
	    return mav;
	}
		/**
		 * <pre>
		 * 대량 일련번호 등록하기 
		 * 대량 일련번호 등록하기 
		 * @param req
		 * @return
		 * @exception
		 * @date 2015. 7. 17. 오후 7:48:55
		 * @author LeeJinSe
		 * @see com.ssocio.sharing.controller.admin
		 * @비고
		 * 
		 * </pre>
		*/
		@RequestMapping("/admin/smartstock/inserProdExcelreg.do")
		public ModelAndView inserProdExcelreg(@RequestParam Map<String, Object> inParam){
			ModelAndView mav = new ModelAndView("jsonView2");	    
		    try {
		    	mav.addObject("uploadResult",  adminSmartStockService.inserProdExcelreg(inParam));
		    } catch (Exception e) {
		      mav.addObject("uploadResult", e.getMessage());
		      mav.addObject("msg" , e.getMessage());
		      mav.addObject("error_code", "500");
		      mav.addObject("error_message", e.getMessage());
		    }	
		    return mav;
		}
		
		
		
		/**
		 * <pre>
		 * 양식 다운로드 
		 * 양식 다운로드 
		 * @param request
		 * @param response
		 * @param inParam
		 * @return
		 * @exception
		 * @date 2015. 9. 14. 오후 9:52:56
		 * @author LeeJinSe
		 * @see com.ssocio.sharing.controller.admin
		 * @비고
		 * 
		 * </pre>
		*/
		@RequestMapping("/admin/smartstock/excelSampleDownload.do")
		public ModelAndView excelSampleDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam){
			logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.info("SELECT excelSampleDownload START");
			logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
			ModelAndView mav = new ModelAndView();
			List<HashMap<String, Object>> listData = new ArrayList<HashMap<String,Object>>();
			mav.setViewName("excelDownloadView");
			try {
				String today = StringUtil.getCurrentDate();
				response.setContentType("application/msexcel");
				response.setHeader("Content-Disposition", getDisposition("SampleSPstock.xls", check_browser(request)));
			
				String SheetName = "샘플양식";
				
				List<String> excelTitle = new ArrayList<String>();
				
				excelTitle.add("일련번호");
		
				List<String> CellName = new ArrayList<String>();
				CellName.add("");
		
				mav.addObject("SheetName", SheetName);
				mav.addObject("excelTitle", excelTitle);
				mav.addObject("CellName", CellName);
				
				mav.addObject("excelList", listData);

			} catch (Exception e) {e.printStackTrace();}
		    return mav;
		}
		
		
		/**
		 * <pre>
		 * 엑셀다운 
		 * 엑셀다운  
		 * @param req
		 * @return
		 * @exception
		 * @date 2015. 7. 17. 오후 7:48:55
		 * @author LeeJinSe
		 * @see com.ssocio.sharing.controller.admin
		 * @비고
		 * 
		 * </pre>
		*/
		@RequestMapping("/admin/smartstock/excelDownload.do")
		public ModelAndView excelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam){
			logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.info("SELECT ORDER LIST EXCEL DOWNLOAD START");
			logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
			ModelAndView mav = new ModelAndView();
			mav.setViewName("excelDownloadView");
			try {
				String today = StringUtil.getCurrentDate();
				response.setContentType("application/msexcel");
				response.setHeader("Content-Disposition", getDisposition("SPstock"+today+".xls", check_browser(request)));
			
				String SheetName = "상품목록";
				
				List<String> excelTitle = new ArrayList<String>();
				
				excelTitle.add("일련번호");
				excelTitle.add("S/N");
				excelTitle.add("상태");
				excelTitle.add("셰어링 시작일");
				excelTitle.add("셰어링 종료일");
				excelTitle.add("USIM");
				excelTitle.add("전화번호");
				excelTitle.add("요금제");
				excelTitle.add("사용자명");
				excelTitle.add("생년월일");
		
				List<String> CellName = new ArrayList<String>();
				
				CellName.add("PROD_UNIQUENO");                  //상품코드
				CellName.add("PROD_SERIAL");                  //상품코드
				CellName.add("STAT_NM");             //등록회원ID
				CellName.add("OPEN_DT");               //수정회원ID
				CellName.add("END_DT");               //수정회원ID
				CellName.add("USIM_SEQ_CODE");               //수정회원ID
				CellName.add("USIM_PHONE");               //수정회원ID
				CellName.add("PAYPLAN_NM");               //수정회원ID
				CellName.add("ORD_NAME");               //수정회원ID
				CellName.add("BIRTH_YYYYMMDD");               //수정회원ID
		
				mav.addObject("SheetName", SheetName);
				mav.addObject("excelTitle", excelTitle);
				mav.addObject("CellName", CellName);
				
				mav.addObject("excelList", adminSmartStockService.getProdListExcelDownload(inParam));
				mav.addObject("param", inParam);

			} catch (Exception e) {e.printStackTrace();}
		    return mav;
		}
		private String check_browser(HttpServletRequest request) {
			String browser = "";
			String header = request.getHeader("User-Agent");
			//신규추가된 indexof : Trident(IE11) 일반 MSIE로는 체크 안됨
			if (header.indexOf("MSIE") > -1 || header.indexOf("Trident") > -1){
			browser = "ie";
			}
			//크롬일 경우
			else if (header.indexOf("Chrome") > -1){
			browser = "chrome";
			}
			//오페라일경우
			else if (header.indexOf("Opera") > -1){
			browser = "opera";
			}
			//사파리일 경우
			else if (header.indexOf("Apple") > -1){
			browser = "sarari";
			} else {
			browser = "firfox"; 
			}
			return browser;
		}

		private String getDisposition(String down_filename, String browser_check) throws UnsupportedEncodingException {
			String prefix = "attachment;filename=";
			String encodedfilename = null;
			System.out.println("browser_check:"+browser_check);
			if (browser_check.equals("ie")) {
			encodedfilename = URLEncoder.encode(down_filename, "UTF-8").replaceAll("\\+", "%20");
			}else if (browser_check.equals("chrome")) {
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < down_filename.length(); i++){
			    char c = down_filename.charAt(i);
			    if (c > '~') {
			        sb.append(URLEncoder.encode("" + c, "UTF-8"));
			    } else {
			        sb.append(c);
			    }
			}
			encodedfilename = sb.toString();
			}else {
			encodedfilename = "\"" + new String(down_filename.getBytes("UTF-8"), "8859_1") + "\"";
			} 
			return prefix + encodedfilename;
		}

}
