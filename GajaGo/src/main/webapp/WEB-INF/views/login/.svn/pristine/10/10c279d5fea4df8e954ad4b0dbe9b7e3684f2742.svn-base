package com.ssocio.sharing.cmmn.web.util;

import java.io.PrintWriter;
import java.io.Reader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.crypto.IllegalBlockSizeException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import oracle.sql.CLOB;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.web.multipart.MultipartFile;

import com.ssocio.sharing.cmmn.security.AES256Cipher;
import com.ssocio.sharing.cmmn.security.SHA256Cipher;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.vo.web.WebSession;

/**
 * <pre>
 * Web공통 Util
 * Web공통 Util
 * @author S.B.LEE
 * @version
 * @since 2015. 7. 7. 오전 11:26:17
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 7.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
public class WebCommonUtil {
	// --------------------------------------------------------------------------
		// # Log 설정
		// --------------------------------------------------------------------------

		public static boolean isLogin(HttpServletRequest request) {
			HttpSession session = request.getSession();
			WebSession sessionVO = (WebSession)session.getAttribute("user");
			if(sessionVO==null)return false;
			
			return sessionVO.getLogin();
		}
		
		public static String newPassword() {
			StringBuffer sb = new StringBuffer();
			StringBuffer sc = new StringBuffer("!@#$%^&*?~");
			// 대문자 4개 생성
			sb.append((char) ((Math.random() * 26) + 65)); // 첫글자 대문자 생성
		
			for (int i=0; i < 3; i++) {
				sb.append((char) ((Math.random() * 26) + 65)); // 아스키번호 65(A) 부터 26글자 중 택일
			}
		
			// 소문자 4개 생성
			for (int i=0; i < 4; i++) {
				sb.append((char) ((Math.random() * 26) + 97)); // 아스키번호 97(a) 부터 26글자 중 택일
			}
		
			// 숫자 2개 생성
			for (int i=0; i < 2; i++) {
				
				sb.append((char) ((Math.random() * 10) + 48)); // 아스키번호 48(1) 부터 10글자 중 택일
			}
			
			// 특수문자 2개 생성 후 중간에 넣는다.
			sb.setCharAt(((int)(Math.random()*3)+1), sc.charAt((int)(Math.random()*sc.length()-1))); // 대문자 3개 중 1개
			sb.setCharAt(((int)(Math.random()*4)+4), sc.charAt((int)(Math.random()*sc.length()-1))); // 소문자 4개 중 1개
			
			return sb.toString();              // 비밀번호
		}
		
		public static String getEncPassword(String pwd) {
		    SHA256Cipher sha256 = new SHA256Cipher(); // 비밀번호 암호화(단방향)
		    return sha256.getSHA256Enc(pwd);              // 비밀번호(암호화)
		}
		
		/**
		 * 암호화-AES256
		 * @param strCode
		 * @return
		 */
		public static String encodeAES(String strCode){
			String strEncode = "";
		    try {
	            AES256Cipher.getInstance();
		    	strEncode = AES256Cipher.AES_Encode(strCode);
		    }
		    catch (IllegalBlockSizeException ie) {
		    	System.out.println("패키지명 AES복호화 오류(ie) : " + ie.toString());
		    }
		    catch (Exception e) {
		    	System.out.println("패키지명 AES복호화 오류(e) : " + e.toString());
		    }
			return strEncode;
		}
		
		/**
		 * 암호화-AES256
		 * @param strCode
		 * @return
		 */
		public static String encodeAES(String strCode, String inKey){
			String strEncode = "";
		    try {
		        if (StringUtil.isEmpty(inKey)) {
		            AES256Cipher.getInstance();
		          }
		          else {
		              AES256Cipher.getInstance(inKey);
		          }
		    	strEncode = AES256Cipher.AES_Encode(strCode);
		    }
		    catch (IllegalBlockSizeException ie) {
		    	System.out.println("패키지명 AES복호화 오류(ie) : " + ie.toString());
		    }
		    catch (Exception e) {
		    	System.out.println("패키지명 AES복호화 오류(e) : " + e.toString());
		    }
			return strEncode;
		}
		
		/**
		 * 복호화-AES256
		 * @param strEncode
		 * @return
		 */
		public static String decodeAES(String strCode){
			String strDecode = "";
			// ------------------------------------------------------------------
		    // 복호화-AES256
		    // ------------------------------------------------------------------
		    try {
		        AES256Cipher.getInstance();
		        strDecode = AES256Cipher.AES_Decode(strCode);
		    }
		    catch (IllegalBlockSizeException ie) {
		    	System.out.println("패키지명 AES복호화 오류(ie) : " + ie.toString());
		    }
		    catch (Exception e) {
		    	System.out.println("패키지명 AES복호화 오류(e) : " + e.toString());
		    }
			return strDecode;
		}
		
		/**
		 * 복호화-AES256
		 * @param strEncode
		 * @return
		 */
		public static String decodeAES(String strCode, String inKey){
			String strDecode = "";
			// ------------------------------------------------------------------
		    // 복호화-AES256
		    // ------------------------------------------------------------------
		    try {
		        if (StringUtil.isEmpty(inKey)) {
		            AES256Cipher.getInstance();
		          }
		          else {
		              AES256Cipher.getInstance(inKey);
		          }
		        strDecode = AES256Cipher.AES_Decode(strCode);
		    }
		    catch (IllegalBlockSizeException ie) {
		    	System.out.println("패키지명 AES복호화 오류(ie) : " + ie.toString());
		    }
		    catch (Exception e) {
		    	System.out.println("패키지명 AES복호화 오류(e) : " + e.toString());
		    }
			return strDecode;
		}
	  
	  /**
	   * 복호화-AES256
	   * @param strEncode
	   * @return
	   */
	  public static Map<String, Object> decodeAESMap(Map<String, Object> paramDto, String inKey){
	    String strDecode = "";
	    // ------------------------------------------------------------------
	      // 복호화-AES256
	      // ------------------------------------------------------------------
	      try {
	          if (StringUtil.isEmpty(inKey)) {
	              AES256Cipher.getInstance();
	            }
	            else {
	                AES256Cipher.getInstance(inKey);
	            }

	          Iterator<String> keys = paramDto.keySet().iterator();
	          while (keys.hasNext()) {
	            String key = keys.next();
	            String value = (String)paramDto.get(key);
	            strDecode = AES256Cipher.AES_Decode(value);
	            paramDto.put(key, strDecode);
	          }
	          
	      }
	      catch (IllegalBlockSizeException ie) {
	        System.out.println("패키지명 AES복호화 오류(ie) : " + ie.toString());
	      }
	      catch (Exception e) {
	        System.out.println("패키지명 AES복호화 오류(e) : " + e.toString());
	      }
	    return paramDto;
	  }
		
		/**
		 * 첫번째 엑셀시트 읽기
		 * @param excelFile
		 * @param sheet_num
		 * @return
		 */
		public static List<Map<String, Object>> getExcelList(MultipartFile excelFile){
		    List<Map<String, Object>> excelData = new ArrayList<Map<String, Object>>();
		    try {
		    	if(excelFile!=null){
		    		
		            XSSFWorkbook workbook = new XSSFWorkbook(excelFile.getInputStream());
		            XSSFSheet sheet = workbook.getSheetAt(0);
		            Iterator<Row> rowIterator = sheet.iterator();
		            Map<String, Object> rowDate = null;
		            
		            if(rowIterator.hasNext()){rowIterator.next();}//첫번째 Row Skip(첫번째 Row는 Title)
		            
		            while(rowIterator.hasNext()){
		            	Row row = rowIterator.next();
		            	Iterator<Cell> celIterator = row.iterator();
		            	rowDate = new HashMap<String, Object>();
		            	while(celIterator.hasNext()){
		            		Cell cell = celIterator.next();
		            		if (cell != null) { 
	                            String value = null; 
	                            switch (cell.getCellType()) { 
		                            case Cell.CELL_TYPE_FORMULA: 
		                                value = cell.getCellFormula(); 
		                                break; 
		                            case Cell.CELL_TYPE_NUMERIC: 
		                                value = "" + cell.getNumericCellValue();
		                                break; 
		                            case Cell.CELL_TYPE_STRING: 
		                                value = "" + cell.getStringCellValue(); 
		                                break; 
		                            case Cell.CELL_TYPE_BLANK: 
		                                value = ""; 
		                                break; 
		                            case Cell.CELL_TYPE_ERROR: 
		                                value = "" + cell.getErrorCellValue(); 
		                                break;
		                            default: 
	                            }
		            		rowDate.put("CELL"+cell.getColumnIndex(), value);
		            		}
		            	}
		            	excelData.add(rowDate);
		            }
		    	}
		    } catch (Exception e) {
		      e.printStackTrace();
		    }
		    return excelData;
		}
		
	  /**
	   * 쏘시오 복호화값 검증 
	   * @param strEncode
	   * @return
	   */
	  public static boolean isSsocioVerify(String strCustNum, String strVdt){

	    char[] chCust =  strCustNum.toCharArray();
	    strVdt = chCust[8]+chCust[9]+chCust[4]+chCust[6]+chCust[7]+chCust[5]+chCust[1]+chCust[0]+"";//고객번호의 9, 10, 5, 7, 8, 6, 2, 1 번째 자리를 추출(순서 필수)
	    strVdt = strVdt+strVdt;//추출한 문자 + 추출한 문자 => 16자리 생성
	    String strCustNumVdt = WebCommonUtil.decodeAES(strVdt+"", CmmnCnst.ssocioInKey);//복호화된 검증키값
	    
	    //복호화된 검증 Key와 고객번호가 일치
	    if(strCustNumVdt.equalsIgnoreCase(strCustNum)){
	      return true;
	    }else{
	      return false;
	    }
	  }
		
	   /**
	    *  Map<String, Object>에 담긴 Clob를  String[] arryKey로 추출하여 String형태로 변환해서 Map를 Return.
	    *  
	    *  @param   map        Data
	    *  @param   arryKey    CLOB key
	    *  @return   Map<String, Object>
	    */
		public static Map<String, Object> clobToString(Map<String, Object> map, String[] arryKey) throws Exception{
			for(String key : arryKey){
				CLOB clob = (CLOB)map.get(key);
			if(clob !=null){
				Reader reader = clob.getCharacterStream();
				StringBuffer out = new StringBuffer();
				char[] buff = new char[1024];
				int nchars = 0;	  
				
				while((nchars = reader.read(buff))>0){
					out.append(buff,0,nchars);
				}
				map.put(key, out.toString());
				}else{
				  map.put(key, "");
				}
			}
			return map;
		}   
		
		/**
		  *  List<Map<String, Object>>에 담긴 Clob를  String[] arryKey로 추출하여 String형태로 변환해서 Map를 Return.
		  *  
		  *  @param   map        Data
		  *  @param   arryKey    CLOB key
		  *  @return   List<Map<String, Object>>
		  */
		public static List<Map<String, Object>> clobToString(List<Map<String, Object>> list, String[] arryKey) throws Exception{
			List<Map<String, Object>> pasList = new ArrayList<Map<String,Object>>();
			for(Map<String, Object> map: list){
				for(String key : arryKey){
					CLOB clob = (CLOB)map.get(key);
					Reader reader = clob.getCharacterStream();
					StringBuffer out = new StringBuffer();
					char[] buff = new char[1024];
					int nchars = 0;	  
					
					while((nchars = reader.read(buff))>0){
						out.append(buff,0,nchars);
					}
					map.put(key, out.toString());
				}
				pasList.add(map);
			}
			return pasList;
		}
	  
	  /**
	   * <pre>
	   * Ajax호출시 세션값체크
	   * @param request
	   * @param response
	   * @throws Exception 
	   * @exception 
	   * @date 2015. 6. 22. 오전 10:34:45
	   * @author PJ00184
	   * @비고
	   * 
	   * </pre>
	   */
	  public static void noSessionErrorFromAjax(
	    HttpServletRequest request, 
	    HttpServletResponse response) throws Exception{

	    String SESSID = StringUtil.reverseString(request.getSession().getId());//통신체크용 Session ID(거꾸로 되어있어서 뒤집어서 사용)
	    SESSID = WebCommonUtil.encodeAES(SESSID, CmmnCnst.ssocioInKey);//Session ID 암호화
	    response.setStatus(HttpServletResponse.SC_FORBIDDEN);
	    response.getWriter().write(SESSID);
	    response.flushBuffer();
	  }
	  
	  /**
	   * <pre>
	   * Submit호출시 세션값체크
	   * @param request
	   * @param response
	   * @throws Exception 
	   * @exception 
	   * @date 2015. 6. 22. 오전 10:34:45
	   * @author PJ00184
	   * @비고
	   * 
	   * </pre>
	   */
	  public static void noSessionErrorFromSubmit(
	    HttpServletRequest request, 
	    HttpServletResponse response) throws Exception{
	    String SESSID = StringUtil.reverseString(request.getSession().getId());//통신체크용 Session ID(거꾸로 되어있어서 뒤집어서 사용)
	    SESSID = WebCommonUtil.encodeAES(SESSID, CmmnCnst.ssocioInKey);//Session ID 암호화
	    
	    //response.setContentType("text/html;charset=utf-8;");
	    response.setContentType("text/html;");
	    PrintWriter out = response.getWriter();
	    out.println("<script>");
	    out.println("var host = window.location.protocol+'//'+window.location.host;");//호스트 정보
	    out.println("var loginPop='';//로그인 팝업");//호스트 정보
	    out.println("/* ======================================================================");
	    out.println("Function : 로그인 팝업 호출");
	    out.println("Return   : false");
	    out.println("========================================================================= */");
	    out.println("function fnLogin(rtnUrl, SESSID){");
	    out.println("  //로그인팝업이 이미 open 되어있음");
	    out.println("  if(!loginPop.closed && loginPop){");
	    out.println("    loginPop.focus();");
	    out.println("    return;");
	    out.println("  }");
	    out.println("  var width=740;");
	    out.println("  var height=540;");
	    out.println("  var left = (screen.width/2) - (width/2);");
	    out.println("  var top = (screen.height/2) - (height/2);");
	    out.println("");
	    out.println("  var RSP_URL=host+'/web/setLogin.do';");
	    out.println("  ");
	    out.println("  var url='http://10.25.19.11:13042/app/view/if/hub.jsp?URL=/app/IHMBRAA_V104.top?RSP_URL='+RSP_URL+'|RTN_URL='+host+rtnUrl+'|SESSID='+SESSID;");
	    out.println("  var target = 'cardLogin';");
	    out.println("  var style='width='+width+', height='+height+', left='+left+', top='+top+', toolbar=no, menubar=no, scrollbars=yes, resizable=no';");
	    out.println("  ");
	    out.println("  loginPop = window.open(url, target, style);");
	    out.println("}");
	    out.println(" fnLogin(host+'"+request.getRequestURI()+"', '"+SESSID+"');");
	    out.println(" history.back(-1);");
	    out.println("</script>");
	  }
	 
	  
	//올리바 TokenId 생성
	public static String newTokenId(){
		StringBuffer sb = new StringBuffer();
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");
		
		//현재 시간 추가
		sb.append(dateFormat.format(cal.getTime()));
		
		for (int i=0; i < 2; i++) {
			sb.append((char) ((Math.random() * 26) + 65)); // 아스키번호 65(A) 부터 26글자 중 택일
		}
	
		// 소문자 2개 생성
		for (int i=0; i < 2; i++) {
			sb.append((char) ((Math.random() * 26) + 97)); // 아스키번호 97(a) 부터 26글자 중 택일
		}
	
		// 숫자 2개 생성
		for (int i=0; i < 2; i++) {
			sb.append((char) ((Math.random() * 10) + 48)); // 아스키번호 48(1) 부터 10글자 중 택일
		}
		
		return sb.toString();
	}

		  
	public static void main(String[] args) {
		String inStr  = "애드라";
		String encStr = "";
		String decStr = "";
		try {
			AES256Cipher.getInstance();
			encStr = WebCommonUtil.encodeAES(inStr);
			decStr = WebCommonUtil.decodeAES(encStr);
		}catch (Exception e) {
			e.printStackTrace();
		}
		System.out.println("encStr : " + encStr);
		System.out.println("decStr : " + decStr);	    
	}
}
