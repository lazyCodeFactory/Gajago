<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mobileJoinMapper">

    <resultMap type="hashmap" id="terms">
    	    <result property="AGR_DESC"        column="AGR_DESC"         javaType="String" jdbcType="CLOB"/>    <!-- PC용상세설명 -->
    </resultMap>


	<select id="selectTermsDesc" resultMap="terms" parameterType="hashmap">

    	SELECT AGR_DESC
		FROM AGR_VER
		WHERE AGR_SEQ  = TO_NUMBER(#{AGR_SEQ})
		AND  AGR_VER = TO_NUMBER(#{AGR_SEQ_VER})

	</select>


	<select id="selectEamilChek" resultType="int" parameterType="hashmap">

    	SELECT count(1) AS MBER_EMAIL
		FROM MBER_INFO
		WHERE MBER_EMAIL  = #{EMAIL}

	</select>

	<select id="selectShopChek" resultType="int" parameterType="hashmap">

    	SELECT count(1) AS MINI_SHOP_PATH
		FROM MBER_MINI_SHOP_INFO
		WHERE MINI_SHOP_PATH  = #{MINI_SHOP_PATH}

	</select>

	<select id="selectMberChk" resultType="int" parameterType="hashmap">
		SELECT count(1) AS MBER_EMAIL
		  FROM MBER_INFO
		 WHERE SSO_MBER_ID = #{SSO_MBER_ID}
		   AND SSO_GB_CD = #{SSO_GB_CD}
	</select>

	<select id="selectCmpnyChek" resultType="int" parameterType="hashmap">

    	SELECT count(1) AS CMPNY_NO
		FROM SELLER_INFO_CFG
		WHERE CMPNY_NO  = #{CMPNY_NO}

	</select>

	<select id="selectMberSeq" resultType="String">
    	SELECT SEQ_MBER_INFO.NEXTVAL AS MBER_SEQ
    	FROM DUAL
   	</select>

   	<select id="selectWishSeq" resultType="String">
    	SELECT SEQ_WISH_CATE.NEXTVAL AS WISH_SEQ
    	FROM DUAL
   	</select>

   	<select id="selectLevCode" resultType="String" parameterType="String">
    	SELECT COM_CD_NM FROM CODE
		WHERE GRP_CD = 'MBER_DEFAULT'
		AND COM_CD = #{code}
   	</select>

	<!-- 파일등록 -->
	<insert id="insertMberSnsImg" parameterType="hashmap" useGeneratedKeys="true" keyProperty="FILE_SEQ" keyColumn="FILE_SEQ">
		INSERT INTO FILE_INFO
			 (FILE_SEQ,
			 FILE_TITLE,
			 FILE_NM,
			 FILE_PATH,
			 FILE_URL,
			 FILE_SIZE,
			 FILE_EXT,
			 REGIST_DT,
			 UPDT_DT,
			 FILE_WIDTH,
			 FILE_HEIGH
		)VALUES (
			TO_CHAR(SYSDATE, 'YYYYMMDD')||LPAD(SEQ_FILE_INFO.NEXTVAL,8,0),
			#{I_FILE_TITLE},
			#{I_FILE_NM},
			#{I_FILE_PATH},
			#{I_FILE_URL},
			#{I_FILE_SIZE},
			#{I_FILE_EXT},
			SYSDATE,
			SYSDATE,
			#{I_FILE_WIDTH},
			#{I_FILE_HEIGH}
		)
	</insert>

	<!-- 나의 이미지등록 -->
	<update id="updateMberImg" parameterType="hashmap">
		UPDATE MBER_INFO
		   SET MBER_IMG = #{FILE_SEQ}
			 , UPDT_DT = SYSDATE
		 WHERE MBER_SEQ = <![CDATA[#{MBER_SEQ}]]>
	</update>

  	<insert id="insertUserMber"  parameterType="hashmap">

    	INSERT INTO MBER_INFO
		(
		  MBER_SEQ
		  ,SSO_GB_CD
		  ,MBER_GB_CD
		  ,MBER_REG_GB_CD
		  <if test="MBER_EMAIL != null and MBER_EMAIL != ''">
		  ,MBER_EMAIL
		  </if>
		  ,MBER_PASS
		  ,REGIST_DT
		  ,UPDT_DT
		  ,JOIN_CHAN_CD
		  ,SERIAL_KEY
		  ,MBER_STAT_CD
		  <if test="MBER_NICK != null and MBER_NICK != ''">
		  ,MBER_NICK
		  </if>
		  <if test="SSO_MBER_ID != null and SSO_MBER_ID != ''">
		  ,SSO_MBER_ID
		  </if>
		)
		VALUES
		(
		  #{MBER_SEQ}
		  ,#{SSO_GB_CD}
		  ,#{MBER_GB_CD}
		  ,#{MBER_REG_GB_CD}
		  <if test="MBER_EMAIL != null and MBER_EMAIL != ''">
		  ,#{MBER_EMAIL}
		  </if>
		  ,#{MBER_PASS}
		  ,SYSDATE
		  ,SYSDATE
		  ,#{JOIN_CHAN_CD}
		  ,#{SERIAL_KEY}
		  ,#{MBER_STAT_CD}
		   <if test="MBER_NICK != null and MBER_NICK != ''">
		  ,#{MBER_NICK}
		  </if>
		  <if test="SSO_MBER_ID != null and SSO_MBER_ID != ''">
		  ,#{SSO_MBER_ID}
		  </if>
		)
	</insert>

	<insert id="insertMberDtl"  parameterType="hashmap">

    	INSERT INTO MBER_DTL_INFO
		(
		  MBER_SEQ
		  ,EMAIL_AGREE_YN
		<if test='EMAIL_AGREE_YN == "Y"'>
	  		,EMAIL_AGREE_DT
		</if>
		  ,HP_AGREE_YN
		<if test='HP_AGREE_YN == "Y"'>
	  		,HP_AGREE_DT
		</if>
		  ,BUY_MBER_LEV_SEQ
		  ,SELL_MBER_LEV_SEQ
		  ,CONN_CNT
		  ,BUY_CNT
		  ,BUY_PRCE
		  ,POINT_SUM
		  ,POINT_USE
		)
		VALUES
		(
		  #{MBER_SEQ}
		  ,#{EMAIL_AGREE_YN}
		<if test='EMAIL_AGREE_YN == "Y"'>
  			,SYSDATE
		</if>
		  ,#{HP_AGREE_YN}
		<if test='HP_AGREE_YN == "Y"'>
	  		,SYSDATE
		</if>
		  ,#{BUY_MBER_LEV_SEQ}
		  ,#{SELL_MBER_LEV_SEQ}
		  ,#{CONN_CNT}
		  ,#{BUY_CNT}
		  ,#{BUY_PRCE}
		  ,#{POINT_SUM}
		  ,#{POINT_USE}
		)

	</insert>

	<!-- 회원가입 포인트 지급 -->
	<insert id="snsJoinPoint" parameterType="hashmap">
		INSERT
		  INTO POINT_USE_LOG
				( POINT_SEQ
				 , MBER_SEQ
				 , POINT
				 , POINT_CD
				 , CHG_REASON
				 , POINT_TYPE
				 , REGIST_DT
				) VALUES (
				  SEQ_POINT_USE.nextval
				 , #{MBER_SEQ}
				 , #{JOIN_POINT}
				 , 30
				 , '회원가입포인트'
				 , '1'
				 , SYSDATE
				   )
	</insert>

	<insert id="snsInsertJoinPoint" parameterType="hashmap">
		UPDATE MBER_INFO
			SET POINT = (SELECT COM_CD_NM FROM CODE
					           WHERE GRP_CD = 'SITE_DEFAULT'
					             AND COM_CD = 'JOIN_POINT' )
		WHERE MBER_SEQ =  #{MBER_SEQ}
	</insert>

<!-- 	<select id="selectTerms" resultType="hashmap" parameterType="hashmap"> -->

<!--     	SELECT Z.AGR_SEQ -->
<!-- 		    , Z.AGR_NAME_CD    -->
<!-- 		    , Z.AGR_MUST_YN -->
<!-- 		    , Z.AGR_GB_CD -->
<!-- 		    , Z.AGR_VER -->
<!-- 		    , ZZ.AGR_DESC -->
<!-- 		    , Z.COM_CD_NM -->
<!-- 		FROM (SELECT X.AGR_SEQ -->
<!-- 		            , X.AGR_NAME_CD            -->
<!-- 		            , X.AGR_MUST_YN -->
<!-- 		            , X.AGR_GB_CD -->
<!-- 		            , X.AGR_VER -->
<!-- 		            , Y.COM_CD_NM -->
<!-- 		FROM CODE Y LEFT OUTER JOIN ( -->
<!-- 		                            SELECT A.AGR_SEQ        AS AGR_SEQ -->
<!-- 		                                , A.AGR_NAME_CD     AS AGR_NAME_CD                                -->
<!-- 		                                , A.AGR_MUST_YN     AS AGR_MUST_YN -->
<!-- 		                                , A.AGR_GB_CD       AS AGR_GB_CD -->
<!-- 		                                , MAX(B.AGR_VER)    AS AGR_VER -->
<!-- 		                            FROM AGR A, AGR_VER B -->
<!-- 		                            WHERE A.AGR_SEQ = B.AGR_SEQ -->
<!-- 		                            AND A.AGR_USE_YN = 'Y'                          -->
<!-- 		                            AND B.AGR_USE_YN  = 'Y'    -->
<!-- 		                            AND SYSDATE <![CDATA[>=]]> B.REGIST_DT		                           -->
<!-- 		                            <if test="agrGbCd != null and agrGbCd != ''"> -->
<!-- 								    	AND A.AGR_GB_CD IN -->
<!-- 								    	<foreach collection="agrGbCd" item="cd" open="(" close=")" separator=","> -->
<!-- 								  			#{cd} -->
<!-- 								  		</foreach> -->
<!-- 								  	</if>   -->
<!-- 		                            GROUP BY A.AGR_SEQ, A.AGR_NAME_CD, A.AGR_MUST_YN, A.AGR_GB_CD -->
<!-- 		                            ORDER BY A.AGR_SEQ ASC) X ON Y.COM_CD = X.AGR_NAME_CD -->
<!-- 		WHERE Y.GRP_CD = 'AGR_NAME_CD' -->
<!-- 		    AND Y.COM_CD = X.AGR_NAME_CD -->
<!-- 		) Z, AGR_VER ZZ -->
<!-- 		WHERE Z.AGR_SEQ = ZZ.AGR_SEQ -->
<!-- 		    AND Z.AGR_VER = ZZ.AGR_VER -->

<!-- 	</select> -->

	<select id="selectTerms" resultType="hashmap" parameterType="hashmap">
	/* 약관 동의 리스트 (공통용) */
	        SELECT agr.AGR_SEQ, agr.AGR_MUST_YN, agr.AGR_USE_YN, AGR.AGR_GB_CD
            , (select com_cd_nm from code t2 where t2.grp_cd = 'AGR_NAME_CD' AND t2.com_cd = agr.AGR_NAME_CD) AGR_NAME_CD
            , (select com_cd_nm from code t2 where t2.grp_cd = 'AGR_GB_CD' AND t2.com_cd = agr.agr_gb_cd) agr_gb_NAME
            , ver.AGR_MAX_VER AS AGR_VER
        FROM (
                SELECT ver.AGR_SEQ, max(ver.AGR_VER) AGR_MAX_VER
                  FROM AGR_VER ver
                 WHERE ver.AGR_USE_YN = 'Y'
                   AND ver.START_DT <![CDATA[<=]]> sysdate

                 GROUP BY ver.AGR_SEQ ) ver
            , AGR agr
        WHERE ver.AGR_SEQ = agr.AGR_SEQ
          AND agr.AGR_USE_YN = 'Y'
          AND agr.AGR_GB_CD IN
          	<foreach collection="agrGbCd" item="cd" open="(" close=")" separator=",">
								  			#{cd}
			</foreach>

	</select>



	<select id="selectTermsSwitchSeller" resultType="hashmap" parameterType="hashmap">
	/* 판매자 전환용 동의 리스트 */
    SELECT *
		  FROM (
					SELECT M.AGR_SEQ , M.AGR_GB_CD ,
						   M.AGR_VER AS OLD_AGR_VER ,
						   (SELECT S.AGR_VER FROM AGR_VER S WHERE S.AGR_SEQ = M.AGR_SEQ AND S.AGR_VER = M.AGR_VER) AGR_VER,
						   (SELECT S.AGR_DESC FROM AGR_VER S WHERE S.AGR_SEQ = M.AGR_SEQ AND S.AGR_VER = M.AGR_VER) AGR_DESC,
						   (SELECT S.START_DT FROM AGR_VER S WHERE S.AGR_SEQ = M.AGR_SEQ AND S.AGR_VER = M.AGR_VER) START_DT,
						   (SELECT S.AGR_MUST_YN FROM AGR S WHERE S.AGR_SEQ = M.AGR_SEQ ) AGR_MUST_YN,
               (
                 SELECT
                        ( SELECT S.COM_CD_NM from code S where S.GRP_CD = 'AGR_NAME_CD' AND W.AGR_NAME_CD = S.COM_CD )
                  FROM AGR W WHERE M.AGR_SEQ = W.AGR_SEQ
               ) AGR_NAME_CD
					  FROM (
								SELECT V.AGR_SEQ, A.AGR_GB_CD ,  MAX(TO_NUMBER(V.AGR_VER)) AGR_VER
								  FROM AGR_VER V , AGR A
								 WHERE V.AGR_SEQ = A.AGR_SEQ
								   AND A.AGR_USE_YN = 'Y'
								 GROUP BY V.AGR_SEQ , A.AGR_GB_CD
								MINUS
								SELECT E.AGR_SEQ, A.AGR_GB_CD AS AGR_GB_CD , TO_NUMBER(E.AGR_VER) AGR_VER
								  FROM AGR_AGREE E, AGR A
								 WHERE E.MBER_SEQ =    #{MBER_SEQ}
				        		   AND  A.AGR_SEQ = E.AGR_SEQ
								 GROUP BY E.AGR_SEQ, A.AGR_GB_CD , TO_NUMBER(E.AGR_VER)
							) M

					   WHERE M.AGR_GB_CD IN ('01','02','03')


				)
		  WHERE START_DT  <![CDATA[<]]>    SYSDATE
	</select>


	<insert id="insertAgree"  parameterType="hashmap">
		MERGE INTO AGR_AGREE
            USING DUAL
            ON (MBER_SEQ =#{MBER_SEQ}  AND  AGR_SEQ=#{AGR_SEQ}  AND AGR_VER=#{AGR_VER} )
            WHEN MATCHED THEN
					UPDATE SET
						AGREE_YN = #{AGREE_YN}
						,REGIST_DT = SYSDATE
            WHEN NOT MATCHED THEN
                     INSERT
						(
						  MBER_SEQ
						  ,AGR_SEQ
						  ,AGR_VER
						  ,AGREE_YN
						  ,REGIST_DT
						)
						VALUES
						(
						  #{MBER_SEQ}
						  ,#{AGR_SEQ}
						  ,#{AGR_VER}
						  ,#{AGREE_YN}
						  ,SYSDATE
						)
	</insert>

	<insert id="insertWishCate"  parameterType="hashmap">

    	INSERT INTO WISH_CATE
		(
		  WISH_SEQ
		  ,MBER_SEQ
		  ,WISH_NAME
		  ,REGIST_DT
		)
		VALUES
		(
		  #{WISH_SEQ}
		  ,#{MBER_SEQ}
		  ,#{WISH_NAME}
		  ,SYSDATE
		)

	</insert>

	<insert id="insertUserMberHist"  parameterType="hashmap">

    	INSERT INTO MBER_HIST
		(
	         MBER_SEQ
	       , MBER_HIST_SEQ
	       , MBER_HIST_CD
	       , REGIST_DT
		)
		VALUES
		(
	        #{MBER_SEQ}
	       , SEQ_MBER_HIST.NEXTVAL
	       , #{MBER_HIST_CD}
	       , SYSDATE
		)

	</insert>

	<insert id="insertCmpnyNo"  parameterType="hashmap">

    	INSERT INTO SELLER_INFO_CFG
		(
		  SELLER_CD
		  ,MBER_SEQ
		  ,CMPNY_NO
		  ,CMPNY_NM
		  ,REGIST_DT
		  ,UPDT_DT
		)
		VALUES
		(
		  #{SELLER_CD}
		  ,#{MBER_SEQ}
		  ,#{CMPNY_NO}
		  ,#{CMPNY_NM}
		  ,SYSDATE
		  ,SYSDATE
		)

	</insert>

	<insert id="insertMberMiniShop"  parameterType="hashmap">

    	INSERT INTO MBER_MINI_SHOP_INFO
		(
			MBER_SEQ
			,MINI_SHOP_NM
			,MINI_SHOP_PATH
			,REGIST_DT
			,UPDT_DT
		)
		VALUES
		(
			#{MBER_SEQ}
			,#{MBER_EMAIL}
			,#{MINI_SHOP_PATH}
			,SYSDATE
			,SYSDATE
		)

	</insert>


	<insert id="insertSellerInfo"  parameterType="hashmap">

    	INSERT INTO SELLER_INFO_CFG
		(
			SELLER_CD
			,MBER_SEQ
			,BANK_ACNT_NO
			,ACNT_NM
			,BANK_NM
			,ACC_AUTHYN
			,REGIST_DT
			,UPDT_DT
		)
		VALUES
		(
			#{SELLER_CD}
			,#{MBER_SEQ}
			,#{BANK_ACNT_NO}
			,#{ACNT_NM}
			,#{BANK_NM}
			,#{ACC_AUTHYN}
			,SYSDATE
			,SYSDATE
		)

	</insert>

	<update id="updateSellerInfo"  parameterType="hashmap">
		UPDATE SELLER_INFO_CFG
 		   SET BANK_ACNT_NO       =  #{BANK_ACNT_NO}
			 , ACNT_NM            =  #{ACNT_NM}
			 , BANK_NM            =  #{BANK_NM}
			 , ACC_AUTHYN         =  #{ACC_AUTHYN}
			 , REGIST_DT          =  SYSDATE
			 , UPDT_DT			=  SYSDATE
		 WHERE MBER_SEQ = #{MBER_SEQ}
	</update>

	<update id="updateUserMber"  parameterType="hashmap">

    	UPDATE MBER_INFO SET
			  MBER_REG_GB_CD = '1'
			  ,UPDT_DT = SYSDATE
			  <if test="CI != null and CI != ''">
			   ,MBER_PHONE = #{MBER_PHONE}
			   ,PERCHK_YN = 'Y'
			   ,CI = #{CI}
			   ,DI = #{DI}
			   ,SEX = #{SEX}
			   ,TID = #{TID}
			   ,BIRTH = #{BIRTH}
			   ,MBER_NM = #{MBER_NM}
			   </if>
		WHERE MBER_SEQ = #{MBER_SEQ}

	</update>


	<update id="updateMberDtl"  parameterType="hashmap">

    	UPDATE MBER_DTL_INFO
    	SET EMAIL_AGREE_YN = #{EMAIL_AGREE_YN}
		    , HP_AGREE_YN = #{HP_AGREE_YN}
		  <if test='HP_AGREE_YN == "Y"'>
		    ,HP_AGREE_DT = SYSDATE
		  </if>
		  <if test='HP_AGREE_YN != "Y"'>
		    ,HP_AGREE_DT = null
		  </if>
		  <if test='EMAIL_AGREE_YN == "Y"'>
		    ,EMAIL_AGREE_DT = SYSDATE
		  </if>
		  <if test='EMAIL_AGREE_YN != "Y"'>
		    ,EMAIL_AGREE_DT = null
		  </if>
		    ,SELL_MBER_LEV_SEQ = #{SELL_MBER_LEV_SEQ}
		WHERE MBER_SEQ = #{MBER_SEQ}

	</update>

	<delete id="deleteAgree"  parameterType="hashmap">

    	DELETE FROM AGR_AGREE
    	WHERE MBER_SEQ = #{MBER_SEQ}

	</delete>


	<select id="selectMiniShopChek" resultType="int" parameterType="hashmap">

    	SELECT count(1) AS MBER_SEQ
		FROM MBER_MINI_SHOP_INFO
		WHERE MBER_SEQ  = #{MBER_SEQ}

	</select>

	<select id="selectCmpnySellerChek" resultType="int" parameterType="hashmap">

    	SELECT COUNT(1) AS MBER_SEQ
		FROM SELLER_INFO_CFG
		WHERE MBER_SEQ = #{MBER_SEQ}

	</select>


	<!-- 출하지명이 없는 경우 "기본출하지"로 입력함 : okayjava -->
	<insert id="insertGrpProd"  parameterType="hashmap">

    	INSERT INTO GRP_PROD_INFO
		(
		    MBER_SEQ
		    ,GRP_NM
		    ,GRP_PROD_SEQ
		    ,HP
		    ,BASE_YN
		    ,REGIST_DT
		    ,UPDT_DT
		)
		VALUES
		(
		    #{MBER_SEQ}
		    ,'기본출하지'
		    ,'1'
		    ,#{MBER_PHONE}
		    ,'Y'
		    ,SYSDATE
		    ,SYSDATE
		)

	</insert>

	<select id="selectGrpProdSeq" resultType="String">
    	SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')||LPAD(SEQ_GRP_PROD_INFO.NEXTVAL,8,0) AS GRP_PROD_SEQ
    	FROM DUAL
   	 </select>


   	 <select id="selectSellerSeq" resultType="String">
    	SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')||LPAD(SEQ_SELLER_INFO_CFG.NEXTVAL,8,0) AS SELLER_CD
    	FROM DUAL
   	 </select>


   	 <select id="confirmYn" resultType="hashmap" parameterType="hashmap">

    	SELECT DECODE(NVL(MBER_PHONE,''),'','N','Y') AS MBER_PHONE
    	,		BIRTH
    	FROM MBER_INFO
    	WHERE MBER_SEQ= #{MBER_SEQ}
    	AND MBER_PHONE IS NOT NULL


	</select>


	<update id="updateUserMberCfm"  parameterType="hashmap">

    	UPDATE MBER_INFO SET
			  MBER_REG_GB_CD = '1'
			  ,UPDT_DT = SYSDATE
			  ,MBER_PHONE = #{MBER_PHONE}
			  ,PERCHK_YN = 'Y'
			  ,CI = #{CI}
			  ,DI = #{DI}
			  ,SEX = #{SEX}
			  ,TID = #{TID}
			  ,BIRTH = #{BIRTH}
			  ,MBER_NM = #{MBER_NM}
		WHERE MBER_SEQ = #{MBER_SEQ}

	</update>


	<insert id="insertUserMberS"  parameterType="hashmap">

    	INSERT INTO MBER_INFO
		(
		  MBER_SEQ
		  ,SSO_GB_CD
		  ,MBER_GB_CD
		  ,MBER_REG_GB_CD
		  ,MBER_EMAIL
		  ,MBER_PASS
		  ,MBER_PHONE
		  ,REGIST_DT
		  ,UPDT_DT
		  ,JOIN_CHAN_CD
		  ,MBER_NM
		  ,PERCHK_YN
		  ,CI
		  ,DI
		  ,SEX
		  ,TID
		  ,BIRTH
		  ,SERIAL_KEY
		  ,MBER_STAT_CD
		)
		VALUES
		(
		  #{MBER_SEQ}
		  ,#{SSO_GB_CD}
		  ,#{MBER_GB_CD}
		  ,#{MBER_REG_GB_CD}
		  ,#{MBER_EMAIL}
		  ,#{MBER_PASS}
		  ,#{MBER_PHONE}
		  ,SYSDATE
		  ,SYSDATE
		  ,#{JOIN_CHAN_CD}
		  ,#{MBER_NM}
		  ,'Y'
		  ,#{CI}
		  ,#{DI}
		  ,#{SEX}
		  ,#{TID}
		  ,#{BIRTH}
		  ,#{SERIAL_KEY}
		  ,#{MBER_STAT_CD}
		)

	</insert>


	<select id="selectSerialKey" resultType="String">
    	SELECT TO_CHAR(SYSDATE, 'YYYYMMDD')||LPAD(SEQ_SERIAL_KEY.NEXTVAL,8,0) AS SERIAL_KEY
    	FROM DUAL
   	 </select>

	<select id="selectsiteIFUrl" resultType="String">
       SELECT COM_CD_NM
         FROM CODE
        WHERE GRP_CD = 'SITE_DEFAULT'
          AND COM_CD = 'EMAIL_IF_URL'
	</select>


	<insert id="insertAlrm"  parameterType="hashmap">

    	INSERT INTO ALRM
		(
		    MBER_SEQ
		    ,NOTI_ALRM
		    ,EVENT_ALRM
		    ,FAVO_ALRM
		    ,PROD_ALRM
		    ,RENT_ALRM
		    ,SELL_ALRM
		    ,QUE_ALRM
		    ,ANS_ALRM
		)
		VALUES
		(
			  #{MBER_SEQ}
			  ,'Y'
			  ,'Y'
			  ,'Y'
			  ,'Y'
			  ,'Y'
			  ,'Y'
			  ,'Y'
			  ,'Y'
		)

	</insert>


	<select id="selectUserInfo" resultType="hashmap" parameterType="hashmap">

    	SELECT MBER_EMAIL
		      , MBER_GB_CD
		      , MBER_REG_GB_CD
		FROM MBER_INFO
		WHERE MBER_EMAIL = #{MBER_EMAIL}

	</select>

	<select id="getMberInfo" parameterType="hashmap" resultType="com.ssocio.sharing.vo.web.WebSession">
	SELECT MBER_SEQ
			 , MBER_GB_CD
			 , MBER_EMAIL
			 , MBER_PASS
			 , MBER_NM
			 , MBER_PHONE
			 , MBER_REG_GB_CD
			 , MBER_STAT_CD
			 , SERIAL_KEY
			 , SSO_GB_CD
		  FROM MBER_INFO
		 WHERE MBER_EMAIL = <![CDATA[#{MBER_EMAIL}]]>
	</select>


</mapper>