/**
 *
 */
package com.ssocio.sharing.dao.web;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * <pre>
 * Common Dao
 * 공통 처리 Dao
 * @author S.B.LEE
 * @version
 * @since 2015. 8. 14. 오후 6:34:53
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 8. 14.	|	SEOKBAE	|신규
 * @비고
 * </pre>
 */
@Component
public class WebMainDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebMainDao.class);

	private static final String SELECT_LIST_MAIN_PLAN = "webMainMapper.selectListMainPlan";
	private static final String SELECT_LIST_APP_MAIN_PLAN = "webMainMapper.selectListAppMainPlan";
	private static final String SELECT_LIST_PLAN_BANNER = "webMainMapper.selectListPlanBanner";
	private static final String SELECT_LIST_PLAN_TEMPLATE = "webMainMapper.selectListPlanTemplate";
	private static final String SELECT_LIST_PLAN_TEMPLATE_CONTENT = "webMainMapper.selectListPlanTemplateContent";

	private static final String SELECT_MBER_INFO = "webMainMapper.selectMberInfo";
	private static final String SELECT_BUY_INFO = "webMainMapper.selectBuyInfo";
	private static final String SELECT_PROD_INFO = "webMainMapper.selectProdInfo";
	private static final String SELECT_QNA_INFO = "webMainMapper.selectQnaInfo";
	private static final String SELECT_SELL_INFO = "webMainMapper.selectSellInfo";
	private static final String SELECT_SHAR_INFO = "webMainMapper.selectSharInfo";
	private static final String SELECT_PUSHMSG_INFO_CNT = "webMainMapper.selectPushMsgInfoCnt";
	private static final String UPDATE_CONN_CNT = "webMainMapper.updateConnCnt";
	private static final String INSERT_CON_LOG = "webMainMapper.insertConnLog";
	private static final String UPDATE_LAST_LOGIN_DT = "webMainMapper.updateLastLoginDt";
	private static final String INSERT_LOG_INFO_DUP_CHK = "webMainMapper.insLoginfoDupChk";

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	public List<Map<String, Object>> selectListMainPlan() throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_MAIN_PLAN);
	}

	public List<Map<String, Object>> selectListAppMainPlan() throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_APP_MAIN_PLAN);
	}

	public List<Map<String, Object>> selectListPlanBanner(String planCd) throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_PLAN_BANNER, planCd);
	}

	public List<Map<String, Object>> selectListPlanTemplate(String planCd) throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_PLAN_TEMPLATE, planCd);
	}

	public List<Map<String, Object>> selectListPlanTemplateContent(String planCd, String planSeq) throws Exception{
		HashMap<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);
		map.put("PLAN_SEQ", planSeq);

		return this.sqlSession.selectList(SELECT_LIST_PLAN_TEMPLATE_CONTENT, map);

	}

	public Map<String, Object> selectMberInfo(int mberSeq) throws Exception{
		return this.sqlSession.selectOne(SELECT_MBER_INFO, mberSeq);
	}

	public List<Map<String, Object>> selectProdInfo(int mberSeq) throws Exception{
		return this.sqlSession.selectList(SELECT_PROD_INFO, mberSeq);
	}

	public Map<String, Object> selectQnaInfo(int mberSeq) throws Exception{
		return this.sqlSession.selectOne(SELECT_QNA_INFO, mberSeq);
	}

	public List<Map<String, Object>> selectBuyInfo(int mberSeq) throws Exception{
		return this.sqlSession.selectList(SELECT_BUY_INFO, mberSeq);
	}

	public List<Map<String, Object>> selectSellInfo(int mberSeq) throws Exception{
		return this.sqlSession.selectList(SELECT_SELL_INFO, mberSeq);
	}

	public List<Map<String, Object>> selectSharInfo(int mberSeq) throws Exception {
		return this.sqlSession.selectList(SELECT_SHAR_INFO, mberSeq);
	}

	public int selectPushMsgInfoCnt(int mberSeq) {
		return this.sqlSession.selectOne(SELECT_PUSHMSG_INFO_CNT, mberSeq);
	}

	public void updateConnCnt(Map<String, Object> inParam) throws Exception{
		sqlSession.update(UPDATE_CONN_CNT,inParam);
	}

	public void insertConnLog(Map<String, Object> inParam) throws Exception{
		sqlSession.insert(INSERT_CON_LOG,inParam);
	}
	public void updateLastLoginDt(Map<String, Object> inParam) throws Exception{
		sqlSession.update(UPDATE_LAST_LOGIN_DT,inParam);
	}

	public String insLoginfoDupChk(Map<String, Object> inParam) {
		logger.info("★☆★☆★☆★☆★☆★☆insLoginfoDupChk★☆★☆★☆★☆★☆★☆★☆★☆");
		return this.sqlSession.selectOne(INSERT_LOG_INFO_DUP_CHK, inParam);
	}
	
	public List<Map<String, Object>> selectAllPlanList() throws Exception{
		return sqlSession.selectList("webMainMapper.selectAllPlanList");
	}

	public int selectSharCnt(int mberSeq) {
		return sqlSession.selectOne("webMainMapper.selectSharCnt",mberSeq);
	}
}
