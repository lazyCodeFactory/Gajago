package com.ssocio.sharing.dao.seller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 메인 Dao
 * 메인화면 Dao
 * @author Y.I.Chun
 * @version
 * @since 2015. 7. 6. 오후 6:41:07
 * @see
 * @History
 *  Date          |    author    | 변경내용
 *	2015. 7. 6.   |    Y.I.Chun  | 신규
 * @Todo
 * </pre>
 */
@Component
public class SellerMainDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerMainDao.class);

	@Resource(name="sqlSessionSeller")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	/**
	 * <pre>
	 * 주문현황 조회
	 * 메인화면에 표시할 주문현황를 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectOrderSituation (Map<String, Object> paramDto) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectOrderSituation Start");

		List<Map<String, Object>> result = null;
		try {
			result = sqlSession.selectList("sellerLogMapper.selectOrderSituation", paramDto);
		}
		catch (Exception e) {
			logger.error("selectOrderSituation DB Error : " + e.toString());
			throw e;
		}

		return result;
	}

	/**
	 * <pre>
	 * 상품현황 조회
	 * 메인화면에 표시할 상품현황를 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectProdSituation (Map<String, Object> paramDto) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectProdSituation Start");

		List<Map<String, Object>> result = null;
		try {
			result = sqlSession.selectList("sellerLogMapper.selectProdSituation", paramDto);
		}
		catch (Exception e) {
			logger.error("selectProdSituation DB Error : " + e.toString());
			throw e;
		}

		return result;
	}

	/**
	 * <pre>
	 * 문의현황 조회
	 * 메인화면에 표시할 문의현황를 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 *
	 * </pre>
	 */
	public Map<String, Object> selectQnASituation (Map<String, Object> paramDto) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectQnASituation Start");

		Map<String, Object> result = null;
		try {
			result = sqlSession.selectOne("sellerLogMapper.selectQnASituation", paramDto);
		}
		catch (Exception e) {
			logger.error("selectQnASituation DB Error : " + e.toString());
			throw e;
		}
		return result;
	}

	public List<Map<String, Object>> selectMenuList (Map<String, Object> paramDto) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectQnASituation Start");

		List<Map<String, Object>> result = null;
		try {
			result = sqlSession.selectList("sellerMainMapper.selectMenuList", paramDto);
		}
		catch (Exception e) {
			logger.error("selectQnASituation DB Error : " + e.toString());
			throw e;
		}
		return result;
	}

	/**
	 * <pre>
	 * 메인화면에 표시할 회원정보를 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 *
	 * </pre>
	 */
	public Map<String, Object> selectSellerMberInfo (Map<String, Object> paramDto) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellerMberInfo Start");

		Map<String, Object> result = null;
		try {
			result = sqlSession.selectOne("sellerMainMapper.selectSellerMberInfo", paramDto);
		}
		catch (Exception e) {
			logger.error("selectSellerMberInfo DB Error : " + e.toString());
			throw e;
		}
		return result;
	}



	public List<Map<String, Object>> selectSellerOrdTypeTotal (Map<String, Object> paramDto) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellerOrdTypeTotal Start");

		List<Map<String, Object>> result = null;
		try {
			result = sqlSession.selectList("sellerMainMapper.selectSellerOrdTypeTotal", paramDto);
		}
		catch (Exception e) {
			logger.error("selectSellerOrdTypeTotal DB Error : " + e.toString());
			throw e;
		}
		return result;
	}

	public List<Map<String, Object>> selectSellerOrdQtyTotal (Map<String, Object> paramDto) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellerOrdQtyTotal Start");

		List<Map<String, Object>> result = null;
		try {
			result = sqlSession.selectList("sellerMainMapper.selectSellerOrdQtyTotal", paramDto);
		}
		catch (Exception e) {
			logger.error("selectSellerOrdQtyTotal DB Error : " + e.toString());
			throw e;
		}
		return result;
	}


	/**
	 * <pre>
	 * 공지사항 리스트 조회
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListNotice(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListNotice Start");
		inParam.put("START_ROW", 1);
		inParam.put("END_ROW", 8);
		inParam.put("BOARD_TYPE_CD", 10);

		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerMainMapper.selectListNotice", inParam);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }



	public int selectProdQnaCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectProdQnaCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectProdQnaCnt", inParam);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}




	/**
	 * 나눔상품 등록상품 갯수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectFreeSharRegCnt(Map<String, Object> paramDto)  throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectFreeSharRegCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectFreeSharRegCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}


	/**
	 * 나눔상품 신청자수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectFreeSharSubmitorCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectFreeSharFixCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectFreeSharSubmitorCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}


	/**
	 * 나눔상품 주문자수[나눔결정]
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectFreeSharFixCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectFreeSharFixCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectFreeSharFixCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}


	/**
	 * 렌탈상품 주문건수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectRentalSubmitorCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRentalSubmitorCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectRentalSubmitorCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}

	/**
	 * 렌탈상품 주문자수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectRentalMberSubmitorCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRentalMberSubmitorCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectRentalMberSubmitorCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}


	/**
	 * 렌탈상품 신청완료건수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectRentalSubmitorSuccCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRentalSubmitorSuccCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectRentalSubmitorSuccCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}


	/**
	 * 렌탈상품 신청취소건수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectRentalMberSubmitorFailCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectRentalSubmitorSuccCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectRentalMberSubmitorFailCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}



	/**
	 * 셰어링 주문건수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectSharOrderCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSharOrderCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectSharOrderCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}

	/**
	 * 셰어링 주문자수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectSharOrderMberCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSharOrderMberCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectSharOrderMberCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}

	/**
	 * 셰어링 구매금액
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectSharTotAmt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSharTotAmt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectSharTotAmt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}





	/**
	 * 판매상품 주문건수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectSellOrderCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellOrderCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectSellOrderCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}

	/**
	 * 판매상품 주문자수
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectSellOrderMberCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellOrderMberCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectSellOrderMberCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}

	/**
	 * 판매상품 구매금액
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectSellTotAmt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellTotAmt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.selectSellTotAmt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}

	public void updateConnCnt(Map<String, Object> inParam) throws Exception{


		logger.info("updateConnCnt Start");
		try {
			sqlSession.update("sellerMainMapper.updateConnCnt",inParam);
		} catch (Exception e) {
			logger.error("updateConnCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void insertConnLog(Map<String, Object> inParam) throws Exception{

		logger.info("insertConnLog Start");

		try {
			sqlSession.insert("sellerMainMapper.insertConnLog",inParam);
		} catch (Exception e) {
			logger.error("insertConnLog DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}
	public void updateLastLoginDt(Map<String, Object> inParam) throws Exception{

		logger.info("updateLastLoginDt Start");
		try {
			sqlSession.update("sellerMainMapper.updateLastLoginDt",inParam);
		} catch (Exception e) {
			logger.error("updateLastLoginDt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	
	/**
	 * prod_type_cd 별로 구매건 가져오기
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public List<Map<String, Object>> selectProduceResult(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectProduceResult Start");

		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerMainMapper.selectProduceResult", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	
	/**
	 * 셰어링 종료건 갯수 가져오기
	 * @param paramDto
	 * @return
	 * @throws Exception
	 */
	public int selectClosingSharCnt(Map<String, Object> paramDto) throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("closingSharCnt Start");

		int cnt =0;
		try {
			cnt =  sqlSession.selectOne("sellerMainMapper.closingSharCnt", paramDto);
		} catch (Exception e) {
			logger.error("selectListNotice DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return cnt;
	}

	
	/**
	 * <pre>
	 * 메인화면에 표시할 공지사항을 가져옵니다.
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @exception
	 * @date
	 * @author arkim
	 * @비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectMainSellerNotice () throws Exception  {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectMainSellerNotice Start");

		List<Map<String, Object>> list = null;
		try {
			list = sqlSession.selectList("sellerMainMapper.selectMainSellerNotice");
		}
		catch (Exception e) {
			logger.error("selectMainSellerNotice DB Error : " + e.toString());
			throw e;
		}
		return list;
	}

	
	
	
	
	
}