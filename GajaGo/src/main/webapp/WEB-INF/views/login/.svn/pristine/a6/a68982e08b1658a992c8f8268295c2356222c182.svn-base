/**<pre>
 * 1. Project Name : Gapping1.0
 * 2. Package Name : com.adrra.gapping.platform.cmmn.security
 * 3. File Name    : SHA256Cipher.java
 * 4. Date         : 2014. 7. 11. 오후 1:30:26
 * 5. Author       : adrra
 * 6. Note         : 
 * </pre>
 */

package com.ssocio.sharing.cmmn.security;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ssocio.sharing.cmmn.util.StringUtil;

/**
 * <pre>
 * SHA256암호화(단방향)
 *   - 암호등에 사용
 * @author adrra
 * @version 
 * @since 2014. 7. 11. 오후 1:30:46
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2014. 7. 11.  |    adrra            | 신규 
 * @Todo
 * </pre>
 */
public class SHA256Cipher {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SHA256Cipher.class);

	/**
	 * <pre>
	 * SHA256암호화
	 * 
	 * @param inStr
	 * @return 
	 * @exception 
	 * @date 2014. 7. 11. 오후 1:42:52
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	public String getSHA256Enc(String inStr) {

		String sha = "";

		try {
			MessageDigest md = MessageDigest.getInstance("SHA-256");
			md.update(inStr.getBytes());
			byte byteData[] = md.digest();
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i < byteData.length; i++) {
				sb.append(Integer.toString((byteData[i]&0xff) + 0x100, 16).substring(1));
			}
			sha = sb.toString();
		} catch (NoSuchAlgorithmException ne) {
			logger.error("SHA256Enc Error(ne) : " + ne.toString());
			return "";
		} catch (Exception e) {
			logger.error("SHA256Enc Error(e) : " + e.toString());
			return "";
		}
		//System.out.println("SHA : " + sha);
		return sha;
	}

	/**
	 * <pre>
	 * SHA256 암호화 검증
	 * 
	 * @param inStr
	 * @param encStr
	 * @return 
	 * @exception 
	 * @date 2014. 7. 11. 오후 2:21:50
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	public boolean checkSHA256(String inStr, String encStr) {
		if (StringUtil.isEmpty(inStr)) {
			logger.error("inStr is Null");
			return false;
		}

		if (StringUtil.isEmpty(encStr)) {
			logger.error("encStr is Null");
			return false;
		}

		if (this.getSHA256Enc(inStr).equals(encStr))
			return true;
		else {
			logger.error("No Match");
			return false;
		}
	}
}
