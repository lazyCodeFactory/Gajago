package com.ssocio.sharing.service.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.admin.util.FileUtil;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.util.WebMobilePaging;
import com.ssocio.sharing.dao.web.MobileMyMiniDao;
import com.ssocio.sharing.dao.web.WebCommonDao;
import com.ssocio.sharing.dao.web.WebCtryDao;
import com.ssocio.sharing.dao.web.WebMainDao;
import com.ssocio.sharing.vo.web.WebSession;

@Service
public class MobileMyMiniServiceImpl implements MobileMyMiniService {

	private static final Logger logger = LoggerFactory.getLogger(MobileMyMiniServiceImpl.class);

	@Resource(name="mobileMyMiniDao")
	private MobileMyMiniDao mobileMyMiniDao;

	@Resource(name="webCtryDao")
	private WebCtryDao webCtryDao;

	@Resource(name="webMainDao")
	private WebMainDao webMainDao;
	
	@Resource(name="webCommonDao")
	private WebCommonDao webCommonDao;

	/**
	 * 미니샵 조회
	 */
	@Override
	public ModelMap getMyMiniInfo(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		inParam.put("MBER_SEQ", user.getMBER_SEQ());
		try {
			Map<String, Object> countList = null;
			countList = mobileMyMiniDao.getMyMiniInfo(inParam);
			mm.put("resultList", countList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}

	/**
	 * 미니샵 조회 > 이름변경화면 폼
	 */
	@Override
	public ModelMap renameMyMiniInfo(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		inParam.put("MBER_SEQ", user.getMBER_SEQ());
		try {
			Map<String, Object> countList = null;
			countList = mobileMyMiniDao.renameMyMiniInfo(inParam);
			mm.put("resultList", countList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	/**
	 * 미니샵 조회 > 주소변경화면 폼
	 */
	@Override
	public ModelMap reAddressMyMiniInfo(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		inParam.put("MBER_SEQ", user.getMBER_SEQ());
		try {
			Map<String, Object> countList = null;
			countList = mobileMyMiniDao.reAddressMyMiniInfo(inParam);
			mm.put("resultList", countList);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}

	/**
	 * 미니샵 이름 수정 처리
	 */
	@Override
	public ModelMap renameProc(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		try {
			adrStatus = mobileMyMiniDao.renameProc(inParam);
			logger.debug("adrStatus:"+adrStatus);
			if(adrStatus == null){
				msg = "미니샵 이름이 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}

	/**
	 * 미니샵 주소 수정 처리
	 */
	@Override
	public ModelMap readdressProc(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		try {
			adrStatus = mobileMyMiniDao.readdressProc(inParam);
			logger.debug("adrStatus:"+adrStatus);
			if(adrStatus == null){
				msg = "미니샵 주소이 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**
	 * 파일업로드
	 */
	@Override
	public Map<String, Object> regImg(Map<String, Object> inParam,  WebSession user, MultipartHttpServletRequest req) throws Exception {
		int mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		String img = req.getParameter("MINI_SHOP_GUBUN");
		MultipartFile mainImg = req.getFile(img);				// 메인 이미지
		Integer fileStatus = 0;;										// 저장 파일 seq
		// 파일저장
		if(mainImg != null && mainImg.getSize() > 0){
			logger.debug(">>>>>> [파일저장] ");
			Map<String, Object> fileInfo = FileUtil.saveMultipartFile(mainImg);//파일 저장
			logger.debug(">>>>>> 파일저장 후 [FILE 등록처리] ");
			fileStatus = mobileMyMiniDao.regImg(fileInfo);
			logger.debug("FILE 등록처리 후 [회원정보에 파일정보세팅]");
			inParam.put("FILE_SEQ", fileInfo.get("FILE_SEQ") );
			inParam.put("MBER_SEQ", mberSeq);
			fileStatus = mobileMyMiniDao.updateMyMiniImg(inParam);
			logger.debug("[FILE 등록처리가 완료!]");
			inParam.put("mainImgSeq", fileStatus );
			inParam.put("mainImgUrl", fileInfo.get("I_FILE_URL"));
			//inParam.put("mainImgGbCd", CmmnCnst.cmmn12);
		}
		return inParam;
	}

	@Override
	public ModelMap selectMiniShop(Map<String, Object> inParam) throws Exception{
		ModelMap mm = new ModelMap();
		 Map<String, Object> snsData   = new HashMap<String, Object>();
		 String noImage = "https://scontent.xx.fbcdn.net/hphotos-xat1/t39.2081-0/p128x128/12056960_1633116896960884_2110231500_n.png";
		 String image = null;


			//	카테고리 목록 조회
		mm.put("categories", webCtryDao.selectListCtry("", CmmnCnst.CTRY_TYPE_LARGE));
		//	회원 정보 조회
				
		Map<String, Object> userMap = webCtryDao.selectMberInfo(StringUtil.nvlInt((String)inParam.get("SELLER_MBER_SEQ"), 0));
		
		// 유저정보 중 휴대폰번호 마스킹 처리
		mm.put("mberInfo",  userMap);

		
		
		//	등록한 상품 리스트 조회
		/* 2015-11-18 주석용
		String ctryCd = StringUtil.nvl((String)inParam.get("CTRY_CD"), "");
		int lvlSeq = StringUtil.nvlInt((String)inParam.get("LVL_SEQ"), CmmnCnst.CTRY_TYPE_NONE);
		String parentCtryCd = ctryCd.substring(0, 4*lvlSeq);
		 */

//		등록한 상품 리스트 조회
			String ctryCd = StringUtil.nvl((String)inParam.get("CTRY_CD"), "");
			String[] arrayCtryCd = new String[0];

			logger.info("ctryCd-->" + ctryCd);
			logger.info("ctryGbn-->" + StringUtil.nvl((String)inParam.get("ctryGbn"), ""));

			if(ctryCd.indexOf(",") > 0){
				arrayCtryCd = ctryCd.split(",");
			}else{
				if(!"".equals(ctryCd) && null != ctryCd){
					arrayCtryCd = new String[]{ctryCd};
					logger.info("arrayCtryCd-->" + arrayCtryCd[0]);
				}
			}


			int lvlSeq = StringUtil.nvlInt((String)inParam.get("LVL_SEQ"), CmmnCnst.CTRY_TYPE_NONE);

			logger.info("size-->"+arrayCtryCd.length);

			String[] parentCtryCd = new String[arrayCtryCd.length];
			for(int i=0;i<arrayCtryCd.length;i++){

				if(!"".equals(arrayCtryCd[i]) && null != arrayCtryCd[i]){
					parentCtryCd[i] = arrayCtryCd[i].substring(0, 4*lvlSeq);
				}

				logger.info("parentCtryCd-->4" + parentCtryCd[i]);
			}

		//	페이징을 위한 상품 개수 조회
		inParam.put("PARENT_CTRY_CD", parentCtryCd);
//		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, false));
		inParam.put("prods" , CommonUtil.appMakeProdTypeList(inParam, false));

		//logger.info(inParam.get("prods"));
		int totCount = webCtryDao.selectCountProd(inParam);
		logger.info("small totCount =========== " + totCount);

		//	페이징 클래스 initialize
		WebMobilePaging paging = new WebMobilePaging(totCount, StringUtil.nvlInt((String)inParam.get("CUR_PAGE"), 1), CmmnCnst.MOBILE_LIST_SIZE);

		inParam.put("S_NUM", paging.getStartContent());
		inParam.put("E_NUM", paging.getEndContent());
		//	상품 조회
		List<Map<String, Object>> prodList = webCtryDao.selectListProd(inParam);
		logger.info("small prodList.size() =========== " + prodList.size());

		//	상품 타입별 개수 조회
		//	상품 타입별 개수 조회는 전체 타입별 개수를 가져와야 하기 때문에 PROD_TYPE_CD를 재설정한다.
		//inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, true)); 2015-11-18 주석용
		inParam.put("prods" , CommonUtil.appMakeProdTypeList(inParam, true));

		List<Map<String, Object>> prodTypeList = webCtryDao.selectListProdType(inParam);
		logger.info("small prodTypeList.size() =========== " + prodTypeList.size());

		mm.put("prodList", prodList);
		mm.put("prodTypeList", prodTypeList);
		mm.put("paging", paging);

		/* sms 정보 */
		snsData.put("LABEL", "" + ((String)((HashMap)mm.get("mberInfo")).get("MINI_SHOP_NM"))
										  + "\nSSOCIO로 구경하러 가기");

		snsData.put("URL", "http://"+ ((String) inParam.get("firstUrl"))
				+ "/mobile/myMini/selectMiniShop.do?"
				+ "LVL_SEQ=" + ((String)inParam.get("LVL_SEQ"))
				+ "&PROD_CODE=" + ((String)inParam.get("PROD_CODE"))
				+ "&SELLER_MBER_SEQ="+((String)inParam.get("SELLER_MBER_SEQ")));


		//공유하기 기능의 이미지때문에 호출 함 scdn 필요
		try {
			HttpClient httpClient = HttpClientBuilder.create().build();
			String url = webCommonDao.selectShareUrl();
			
			logger.info("shareImg no URL = " + url);

			HttpPost httpPost = new HttpPost(url);
//			"${result.prodInfo.KAKAO_FILE_SEQ }","type_cd" : "${result.prodInfo.PROD_TYPE_CD }","prod_code" : "${result.prodInfo.PROD_CODE }"
			JSONObject json = new JSONObject();
			Map<String, Object> prodInfo = new HashMap<String, Object>();
			prodInfo = (Map<String, Object>) mm.get("prodInfo");
	        json.put("seq",userMap.get("FILE_SEQ"));
	        json.put("type_cd",'4');
	        json.put("prod_code",((String)inParam.get("PROD_CODE")));
	        StringEntity params = new StringEntity(json.toJSONString());

	        logger.info("StringEntity = " + params.toString());
	        httpPost.addHeader("content-type", "application/json");
	        httpPost.addHeader("Accept","application/json");
	        httpPost.setEntity(params);

	        HttpResponse httpResponse = httpClient.execute(httpPost);
	        String shareImg = EntityUtils.toString(httpResponse.getEntity());

	        JSONParser parser = new JSONParser();
			JSONObject jsonString = (JSONObject)parser.parse(shareImg);

			logger.debug("json : " + jsonString.get("url"));
			logger.debug("json : " + jsonString.get("error"));

			image = (String)jsonString.get("url");


	        httpPost.abort();
	    }catch (Exception e) {
	    	e.printStackTrace();

	    }
		
		if(image != null && !"".equals(image)){
			snsData.put("IMAGE", image );
		}else{
			snsData.put("IMAGE", noImage );
		}
		mm.put("snsInfo", snsData);

		return mm;
	}
	/**
	 * 미니샵 주소변경 > 미니샵 사용중인주소 건수
	 */
	@Override
	public ModelMap countExistMiniShopPath(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		inParam.put("MBER_SEQ", user.getMBER_SEQ());
		try {
			int count = 0;
			count = mobileMyMiniDao.countExistMiniShopPath(inParam);
			mm.put("count", count);
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}

	/**
	 * 시퀀스번호저장
	 */
	@Override
	public Map<String, Object> appRegImg(Map<String, Object> inParam,  WebSession user, MultipartHttpServletRequest req) throws Exception {
		inParam.put("MBER_SEQ", user.getMBER_SEQ());
		LoggerUtil.writeMap(inParam);
		// 삭제 플래그 신규 입력 플레그 관련하여 처리가 필요함

		System.out.println("--------------> 나요 나 미니샵이요");

		String mainImgFlag = (String) inParam.get("mainImgFlag");
		String miniShopImgFlag = (String) inParam.get("miniShopImgFlag");

		// 백그라운드
		if(CmmnCnst.cmmnI.equalsIgnoreCase(mainImgFlag)){
			mobileMyMiniDao.updateAppMyBackGroundMiniImg(inParam);
		}else if(CmmnCnst.cmmnU.equalsIgnoreCase(mainImgFlag)){
			inParam.put("fileSeq", inParam.get("beforeMainImgSeq"));
			mobileMyMiniDao.deleteImg(inParam);// 플래그 변경이후
			mobileMyMiniDao.updateAppMyBackGroundMiniImg(inParam); // 저장
		}

		// 프로파일
		if(CmmnCnst.cmmnI.equalsIgnoreCase(miniShopImgFlag)){
			mobileMyMiniDao.updateAppMyProfileMiniImg(inParam);
		}else if(CmmnCnst.cmmnU.equalsIgnoreCase(miniShopImgFlag)){
			inParam.put("fileSeq", inParam.get("beforeMiniShopImgSeq"));
			mobileMyMiniDao.deleteImg(inParam); // 플래그 변경이후
			mobileMyMiniDao.updateAppMyProfileMiniImg(inParam); // 저장
		}

		return inParam;
	}
}
