package com.ssocio.sharing.dao.batch;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 설명
 * 설명
 * @author J.K.CHOI
 * @version
 * @since 2015. 7. 17. 오후 7:41:45
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 17.	|	J.K.CHOI	|신규
 * @비고
 * </pre>
 */
@Component
public class BatchAdjustDao {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(BatchAdjustDao.class);
	
	/* --------------------------------------------------------------------------
		# sqlSession 설정
		 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
		 -- 하나만 사용할 경우 @Autowired
	   --------------------------------------------------------------------------*/
	@Resource(name="sqlSessionBatch")
	private SqlSession sqlSession;
	
//	@Resource(name="sqlSessionMyBatch")
//	private SqlSession sqlSessionMyBatch;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

//	public void sqlSessionMyBatch(SqlSession sqlSession) {
//		this.sqlSessionMyBatch = sqlSession;
//	}
	
	/**
	 * <pre>
	 * 정산대기 리스트 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	// 배치잡 존재확인
	public String selectBatchJobCfgInfo(String inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectBatchJobCfgInfo Start ##########");
		String list = null;
		try {
			list =  sqlSession.selectOne("batchAdjustMapper.selectBatchJobCfgInfo", inParam);
		} catch (Exception e) {
			logger.error("selectBatchJobCfgInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }

	// 배치잡생성
	public int insertBatchJobCfg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## insertBatchJobCfg Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchAdjustMapper.insertBatchJobCfg", inParam);
		} catch (Exception e) {
			logger.error("insertBatchJobCfg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	// 배치잡 상태확인
	public String selectBatchJobCfgStat(String inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectBatchJobCfgStat Start ##########");
		String list = null;
		try {
			list =  sqlSession.selectOne("batchAdjustMapper.selectBatchJobCfgStat", inParam);
		} catch (Exception e) {
			logger.error("selectBatchJobCfgStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	// 배치잡 정보수정
	public int updateBatchJobCfg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## updateBatchJobCfg Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchAdjustMapper.updateBatchJobCfg", inParam);
		} catch (Exception e) {
			logger.error("updateBatchJobCfg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	// 배치잡 히스토리정보생성
	public int insertBatchJobHist(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## insertBatchJobHist Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchAdjustMapper.insertBatchJobHist", inParam);
		} catch (Exception e) {
			logger.error("insertBatchJobHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	// 배치잡 히스토리정보수정
	public int updateBatchJobHist(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## updateBatchJobHist Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchAdjustMapper.updateBatchJobHist", inParam);
		} catch (Exception e) {
			logger.error("updateBatchJobHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	public List<Map<String, Object>> selectListAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectListAdjust Start ##########");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("batchAdjustMapper.selectListAdjust", inParam);
		} catch (Exception e) {
			logger.error("selectListAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }
	
	// 정산배치프로시저
	public void EXEC_PR_ADJUST_HIST(String ord_cd) throws Exception{
		sqlSession.selectOne("batchAdjustMapper.EXEC_PR_ADJUST_HIST", ord_cd);
	}
	
	// 정산 배치
	public int insertAdjustHist(Map<String, Object> ord_cd) throws Exception{
		return sqlSession.insert("batchAdjustMapper.insertAdjustHist", ord_cd);
	}
	
	// 정산 배치
	public int insertAdjustTrInfo(Map<String, Object> ord_cd) throws Exception{
		return sqlSession.insert("batchAdjustMapper.insertAdjustTrInfo", ord_cd);
	}
	
	// 정산 배치
	public int insertAdjustLogTr(Map<String, Object> ord_cd) throws Exception{
		return sqlSession.insert("batchAdjustMapper.insertAdjustLogTr", ord_cd);
	}

	// 정산 배치
	public int insertAdjustPaymntInfo(Map<String, Object> ord_cd) throws Exception{
		return sqlSession.insert("batchAdjustMapper.insertAdjustPaymntInfo", ord_cd);
	}
	
	// 정산 배치
	public int insertAdjustLog(Map<String, Object> ord_cd) throws Exception{
		return sqlSession.insert("batchAdjustMapper.insertAdjustLog", ord_cd);
	}
	// 정산 배치
	public int selectListAdjustCnt(Map<String, Object> ord_cd) throws Exception{
		return sqlSession.selectOne("batchAdjustMapper.selectListAdjustCnt", ord_cd);
	}
	
	public int updateOrdInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## updateOrdInfo Start ##########");
		int re = -1;
		try {
			re =  sqlSession.update("batchAdjustMapper.updateOrdInfo", inParam);
		} catch (Exception e) {
			logger.error("updateOrdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return re;
	 }
	
	public List<String> selectListChgRtnProcInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectListChgRtnProcInfo Start ##########");
		List<String> list = null;
		try {
			list =  sqlSession.selectList("batchAdjustMapper.selectListChgRtnProcInfo", inParam);
		} catch (Exception e) {
			logger.error("selectListChgRtnProcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	public void EXEC_PR_CAL_RTN_HIST(String chg_cd) throws Exception{
		sqlSession.selectOne("batchAdjustMapper.EXEC_PR_CAL_RTN_HIST", chg_cd);
	}
	
	public int updateChgRtnProcInfo(String inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## updateChgRtnProcInfo Start ##########");
		int re = -1;
		try {
			re =  sqlSession.update("batchAdjustMapper.updateChgRtnProcInfo", inParam);
		} catch (Exception e) {
			logger.error("updateChgRtnProcInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return re;
	}
	
	
	/**
	 * 통계
	 * 접속 통계
	 */
	// 최근 저장된 통계 확인
	public String selectBatchStatisSgnDateLastDate(String inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectBatchStatisSgnDateLastDate Start ##########");
		String list = null;
		try {
			list =  sqlSession.selectOne("batchOraStatisMapper.selectBatchStatisSgnDateLastDate", inParam);
		} catch (Exception e) {
			logger.error("selectBatchStatisSgnDateLastDate DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }

	// 메뉴별통계일계
	public int insertBatchStatisSgnDate(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## insertBatchStatisSgnDate Start ##########");
		int list = -1;
		try {
			list =  sqlSession.insert("batchOraStatisMapper.insertBatchStatisSgnDate", inParam);
		} catch (Exception e) {
			logger.error("insertBatchStatisSgnDate DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	// 최근 저장된 통계 확인
	public String selectBatchStatisSgnTimeLastDate(String inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectBatchStatisSgnTimeLastDate Start ##########");
		String list = null;
		try {
			list =  sqlSession.selectOne("batchOraStatisMapper.selectBatchStatisSgnTimeLastDate", inParam);
		} catch (Exception e) {
			logger.error("selectBatchStatisSgnTimeLastDate DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }
		
	public String getAdjustFilePath() throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## getAdjustFilePath Start ##########");
		String list = null;
		try {
			list =  sqlSession.selectOne("batchAdjustMapper.getAdjustFilePath");
		} catch (Exception e) {
			logger.error("getAdjustFilePath DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	// 메뉴별통계일계
	public int insertBatchStatisSgnTime(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## insertBatchStatisSgnTime Start ##########");
		int list = -1;
		try {
			list =  sqlSession.insert("batchOraStatisMapper.insertBatchStatisSgnTime", inParam);
		} catch (Exception e) {
			logger.error("insertBatchStatisSgnTime DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	

	public List<Map<String, Object>> selectOrdProdInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectOrdProdInfo Start ##########");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("batchAdjustMapper.selectOrdProdInfo", inParam);
		} catch (Exception e) {
			logger.error("selectOrdProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	public int updateOrdProdInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## updateOrdProdInfo Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchAdjustMapper.updateOrdProdInfo", inParam);
		} catch (Exception e) {
			logger.error("updateOrdProdInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	public int insertProdBuyConfInfo(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## insertProdBuyConfInfo Start ##########");
		int list = -1;
		try {
			list =  sqlSession.insert("batchAdjustMapper.insertProdBuyConfInfo", inParam);
		} catch (Exception e) {
			logger.error("insertProdBuyConfInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	public List<Map<String, Object>> selectOrdProdInfoForSp() throws Exception {
		// ------------------------------------------------------------------------
				// # 시작로그
				// ------------------------------------------------------------------------
				logger.info("########## selectOrdProdInfoForSp Start ##########");
				List<Map<String, Object>> list =  null;
				try {
					list =  sqlSession.selectList("batchAdjustMapper.selectOrdProdInfoForSp");
				} catch (Exception e) {
					logger.error("selectOrdProdInfoForSp DB Error : " + e.toString());
					throw new Exception(RspnsCnst.RC1000000004);
				}
				return list;
	}
	
	public int updateOrdProdInfoForSp(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## updateOrdProdInfoForSp Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchAdjustMapper.updateOrdProdInfoForSp", inParam);
		} catch (Exception e) {
			logger.error("updateOrdProdInfoForSp DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	public int insertOrdProdInfoHist(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## insertOrdProdInfoHist Start ##########");
		int list = -1;
		try {
			list =  sqlSession.insert("batchAdjustMapper.insertOrdProdInfoHist", inParam);
		} catch (Exception e) {
			logger.error("insertOrdProdInfoHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
//		
//		// 최근 저장된 통계 확인
//		public String selectBatchStatisAccMenuDateLastDate(String inParam) throws Exception {
//			// ------------------------------------------------------------------------
//			// # 시작로그
//			// ------------------------------------------------------------------------
//			logger.info("########## selectBatchStatisAccMenuDateLastDate Start ##########");
//			String list = null;
//			try {
//				list =  sqlSessionMyBatch.selectOne("batchMyStatisMapper.selectBatchStatisAccMenuDateLastDate", inParam);
//			} catch (Exception e) {
//				logger.error("selectBatchStatisAccMenuDateLastDate DB Error : " + e.toString());
//				throw new Exception(RspnsCnst.RC1000000004);
//			}
//			return list;
//		 }
//
//		// 메뉴별통계일계
//		public int insertStatisAccMenuDate(String inParam) throws Exception {
//			// ------------------------------------------------------------------------
//			// # 시작로그
//			// ------------------------------------------------------------------------
//			logger.info("########## insertStatisAccMenuDate Start ##########");
//			int list = -1;
//			try {
//				list =  sqlSessionMyBatch.insert("batchMyStatisMapper.insertBatchStatisAccDate", inParam);
//			} catch (Exception e) {
//				logger.error("insertStatisAccMenuDate DB Error : " + e.toString());
//				throw new Exception(RspnsCnst.RC1000000004);
//			}
//			return list;
//		}
//	
//	// 최근 저장된 통계 확인
//	public String selectBatchStatisAccMenuDateLastTime(String inParam) throws Exception {
//		// ------------------------------------------------------------------------
//		// # 시작로그
//		// ------------------------------------------------------------------------
//		logger.info("########## selectBatchStatisAccMenuDateLastTime Start ##########");
//		String list = null;
//		try {
//			list =  sqlSessionMyBatch.selectOne("batchMyStatisMapper.selectBatchStatisAccMenuDateLastTime", inParam);
//		} catch (Exception e) {
//			logger.error("selectBatchStatisAccMenuDateLastTime DB Error : " + e.toString());
//			throw new Exception(RspnsCnst.RC1000000004);
//		}
//		return list;
//	}
//	
//	// 메뉴별통계시계
//	public int insertStatisAccMenuTime(String inParam) throws Exception {
//		// ------------------------------------------------------------------------
//		// # 시작로그
//		// ------------------------------------------------------------------------
//		logger.info("########## insertStatisAccMenuTime Start ##########");
//		int list = -1;
//		try {
//			list =  sqlSessionMyBatch.insert("batchMyStatisMapper.insertStatisAccMenuTime", inParam);
//		} catch (Exception e) {
//			logger.error("insertStatisAccMenuTime DB Error : " + e.toString());
//			throw new Exception(RspnsCnst.RC1000000004);
//		}
//		return list;
//	}
}
