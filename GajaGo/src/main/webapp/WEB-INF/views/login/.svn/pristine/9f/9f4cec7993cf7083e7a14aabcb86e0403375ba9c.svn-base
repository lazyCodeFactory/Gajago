package com.ssocio.sharing.service.seller;

import java.net.URLEncoder;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import oracle.sql.CLOB;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.admin.util.FileUtil;
import com.ssocio.sharing.cmmn.seller.util.SellerCommonUtil;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.dao.seller.SellerCommonDao;
import com.ssocio.sharing.dao.seller.SellerJoinDao;
import com.ssocio.sharing.vo.seller.SellerSession;

/**
 * <pre>
 * @author S.B.LEE
 * @version
 * @since 2015. 6. 22.. 오후 4:19:34
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 6. 22.	|	S.B.LEE	|신규
 * @쌔애
 * </pre>
 */
@Service
public class SellerJoinServiceImpl implements SellerJoinService {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerJoinServiceImpl.class);

	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="sellerCommonDao")
	private SellerCommonDao sellerCommonDao;
	@Resource(name="sellerJoinDao")
	private SellerJoinDao sellerjoinDao;

	@Override
	public int insertJoin(Map<String, Object> inParam, String AGR_SEQ_VER[]) throws Exception {
		int ret = 0;

		String code="SELL_MBER_LEV_SEQ";
		String emailAgreeYn="";
		String hpAgreeYn="";
		String comNm="";
		String comNm2="";
		String agrSeqVerN="";
		String AGR_TEMP[];
		String AGR_SEQ_VER_TEMP[];

		try {
			// 중복체크
			int mberRet = sellerjoinDao.selecMberEmailChek(inParam);
			if(mberRet > 0){
				return -1;
			}
			//폰체크
			/*
			 mberRet = sellerjoinDao.selecMberPhoneChek(inParam);
			if(mberRet > 0){
				return -2;
			}
			*/
			emailAgreeYn =  StringUtil.nvl((String) inParam.get("EMAIL_AGREE_YN"), "");
			hpAgreeYn = StringUtil.nvl((String) inParam.get("HP_AGREE_YN"), "");

			agrSeqVerN = StringUtil.nvl((String) inParam.get("AGR_SEQ_VER_N"), "");
			comNm = sellerjoinDao.selectLevCode(code);
			//comNm2 = sellerjoinDao.selectLevCode(code);

			inParam.put("MBER_PASS",  SellerCommonUtil.getEncPassword((String)inParam.get("MBER_PASS")));
			inParam.put("EMAIL_AGREE_YN", emailAgreeYn);
			inParam.put("HP_AGREE_YN", hpAgreeYn);
			inParam.put("JOIN_CHAN_CD", CmmnCnst.JOIN_CHAN_CD_50);
			inParam.put("JOIN_PATH_CD", "");
			inParam.put("BUY_MBER_LEV_SEQ", sellerjoinDao.selectLevCode("BUY_MBER_LEV_SEQ"));
			inParam.put("SELL_MBER_LEV_SEQ", sellerjoinDao.selectLevCode("SELL_MBER_LEV_SEQ"));
			inParam.put("CONN_CNT", 0); //  최초 가입시 접속횟수 0
			inParam.put("BUY_CNT", 0);
			inParam.put("BUY_PRCE", 0);
			inParam.put("POINT_SUM", 0);
			inParam.put("POINT_USE", 0);


			//유저정보 등록
			ret = sellerjoinDao.insertUserMber(inParam);
			logger.info("@@@ DAO @@@ insertIndivJoin.insertUserMber ret"+ret);
			//유저 상세 정보 등록
			if(ret > 0){
				ret =	sellerjoinDao.insertMberDtl(inParam);
				logger.info("@@@ DAO @@@ insertIndivJoin.insertMberDtl ret"+ret);
			}

			if(ret > 0){
				ret =	sellerjoinDao.insertCmpnyNo(inParam);
				logger.info("@@@ DAO @@@ insertIndivJoin.insertCmpnyNo ret"+ret);
			}

			//유저 미니샵 정보 저장
			if(ret > 0){
				ret =	sellerjoinDao.insertMiniShop(inParam);
				logger.info("@@@ DAO @@@ insertIndivJoin.insertMiniShop ret"+ret);
			}




			//유저약관 동의 저장
			if(ret > 0){
				if(!"".equals(AGR_SEQ_VER) && AGR_SEQ_VER != null){

					for(int i=0; i<AGR_SEQ_VER.length; i++){

						String AGR_SEQ="";
						String AGR_VER="";

						AGR_SEQ_VER_TEMP = AGR_SEQ_VER[i].split(",");

						if(AGR_SEQ_VER_TEMP.length > 1){
							AGR_SEQ = AGR_SEQ_VER_TEMP[0];
							AGR_VER = AGR_SEQ_VER_TEMP[1];
						}else{
							AGR_SEQ = AGR_SEQ_VER_TEMP[0];
						}

						inParam.put("AGR_SEQ", AGR_SEQ);
						inParam.put("AGR_VER", AGR_VER);
						inParam.put("AGREE_YN", "Y");

						ret = sellerjoinDao.insertAgree(inParam);
						logger.info("@@@ DAO @@@ insertIndivJoin.insertAgreeY ret"+ret);

					}
				}

				if(agrSeqVerN.length()>0){

					AGR_TEMP = agrSeqVerN.split("/");

					for(int i=0; i<AGR_TEMP.length; i++){

						String AGR_SEQ="";
						String AGR_VER="";

						AGR_SEQ_VER_TEMP = AGR_TEMP[i].split(",");

						if(AGR_SEQ_VER_TEMP.length > 1){
							AGR_SEQ = AGR_SEQ_VER_TEMP[0];
							AGR_VER = AGR_SEQ_VER_TEMP[1];
						}else{
							AGR_SEQ = AGR_SEQ_VER_TEMP[0];
						}

						inParam.put("AGR_SEQ", AGR_SEQ);
						inParam.put("AGR_VER", AGR_VER);
						inParam.put("AGREE_YN", "N");

						ret = sellerjoinDao.insertAgree(inParam);
						logger.info("@@@ DAO @@@ insertIndivJoin.insertAgreeN ret"+ret);

					}
				}
			}


		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return ret;
	}

	@Override
	public int insertSellerMber(MultipartHttpServletRequest req, Map<String, Object> inParam, String[] AGR_SEQ_VER, String jOIN_CHAN_CD) throws Exception {

		int ret = 0;
		try{
			//이메일 체크

			int mberRet = sellerjoinDao.selecMberEmailChek(inParam);
			if(mberRet > 0){
				return -1;
			}

			//폰체크
			/*
			 mberRet = sellerjoinDao.selecMberPhoneChek(inParam);
			if(mberRet > 0){
				return -2;
			}
			*/
			// 미니샵 중복 체크
			int pathRet = sellerjoinDao.selectShopPathCount(inParam);
			if(pathRet > 0){
				return -4;
			}

		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		//String mberRegGbCd = StringUtil.nvl((String) inParam.get("MBER_REG_GB_CD"), "0");
		String mberGbCd = StringUtil.nvl((String) inParam.get("MBER_GB_CD"), "0");
		System.out.println("==================== "+mberGbCd);
		if( mberGbCd.equals("1") ){
			try{
				//사업자등록증이미지 파일
				MultipartFile compRegImg = req.getFile("compRegImg");
				//통신판매업신고증이미지 파일
				MultipartFile regImg = req.getFile("regImg");
				//통장이미지 파일
				MultipartFile bnkImg = req.getFile("bnkImg");

				//사업자등록증이미지 파일
				String compRegImgSeq = null;
				if(compRegImg != null && compRegImg.getSize() > 0){
					Map<String, Object> fileInfo1 = FileUtil.saveMultipartFile(compRegImg);//파일 저장
					compRegImgSeq = sellerCommonDao.insertFile(fileInfo1);
				}
				//통신판매업신고증이미지 파일
				String regImgSeq = null;
				if(regImg != null && regImg.getSize() > 0){
					Map<String, Object> fileInfo2 = FileUtil.saveMultipartFile(regImg);//파일 저장
					regImgSeq = sellerCommonDao.insertFile(fileInfo2);
				}
				//통장이미지 파일
				String bnkImgSeq = null;
				if(bnkImg != null && bnkImg.getSize() > 0){
					Map<String, Object> fileInfo3 = FileUtil.saveMultipartFile(bnkImg);//파일 저장
					bnkImgSeq = sellerCommonDao.insertFile(fileInfo3);
				}

				//사업자등록증이미지 파일
				inParam.put("COMP_REG_IMG", compRegImgSeq);
				//통신판매업신고증이미지 파일
				inParam.put("REG_IMG", regImgSeq);
				//통장이미지 파일
				inParam.put("BNK_IMG", bnkImgSeq);
			}catch (Exception e) {
				e.printStackTrace();
				throw e;
			}
		}


		String mberSeq="";
		String code="SELL_MBER_LEV_SEQ";
		String emailAgreeYn="";
		String hpAgreeYn="";
		String comNm="";
		String agrSeqVerN="";
		String wishSeq="";
		String AGR_TEMP[];
		String AGR_SEQ_VER_TEMP[];
		//String grpProdSeq="";
		String pass = CommonUtil.getEncPassword((String)inParam.get("MBER_PASS"));
		String serialKey ="";
		String sellerCd = "";

		try {

			emailAgreeYn =  StringUtil.nvl((String) inParam.get("EMAIL_AGREE_YN"), "");
			hpAgreeYn = StringUtil.nvl((String) inParam.get("HP_AGREE_YN"), "");

			agrSeqVerN = StringUtil.nvl((String) inParam.get("AGR_SEQ_VER_N"), "");

			mberSeq = sellerjoinDao.selectMberSeq();
			wishSeq = sellerjoinDao.selectWishSeq();
		//	grpProdSeq = sellerjoinDao.selectGrpProdSeq();
//			comNm = sellerjoinDao.selectLevCode(code);
//			comNm = sellerjoinDao.selectLevCode("BUY_MBER_LEV_SEQ");
	        serialKey = sellerjoinDao.selectSerialKey();
	        sellerCd = sellerjoinDao.selectSellerSeq();

			inParam.put("MBER_SEQ", mberSeq);
			inParam.put("EMAIL_AGREE_YN", emailAgreeYn);
			inParam.put("HP_AGREE_YN", hpAgreeYn);
			//inParam.put("JOIN_CHAN_CD", jOIN_CHAN_CD);	// 모바일웹
			inParam.put("JOIN_CHAN_CD", CmmnCnst.JOIN_CHAN_CD_50);
			inParam.put("BUY_MBER_LEV_SEQ", sellerjoinDao.selectLevCode("BUY_MBER_LEV_SEQ"));
			inParam.put("SELL_MBER_LEV_SEQ", sellerjoinDao.selectLevCode("SELL_MBER_LEV_SEQ"));
			inParam.put("CONN_CNT", 0);
			inParam.put("BUY_CNT", 0);
			inParam.put("BUY_PRCE", 0);
			inParam.put("POINT_SUM", 0);
			inParam.put("POINT_USE", 0);
			inParam.put("WISH_SEQ", wishSeq);
			inParam.put("WISH_NAME", "WISH");
		//	inParam.put("GRP_PROD_SEQ", grpProdSeq);
			inParam.put("MBER_PASS", pass);
			inParam.put("SERIAL_KEY", serialKey);
			inParam.put("CMPNY_ADDR_GB", "1");
			inParam.put("CS_PER_TEL", StringUtil.nvl(((String)inParam.get("FIRST_TEL_NUM")), "")
					+ StringUtil.nvl(((String)inParam.get("cmPh")), "")); // 사업장 주소 추가
			inParam.put("SELLER_CD", sellerCd);

			inParam.put("MBER_STAT_CD", "40"); // 이메일 인증 대기 상태

			// 회원 히스토리에 쌓는다
			if(1 == Integer.parseInt(StringUtil.nvl(((String)inParam.get("MBER_REG_GB_CD")), "0")) // 사업자판매
					&& 1 == Integer.parseInt(StringUtil.nvl(((String)inParam.get("MBER_GB_CD")), "0"))){
				inParam.put("MBER_HIST_CD", CmmnCnst.MBER_HIST_CD_20); // 심사중
			}else if(1 == Integer.parseInt(StringUtil.nvl(((String)inParam.get("MBER_REG_GB_CD")), "0")) // 개인판매
					&& 0 == Integer.parseInt(StringUtil.nvl(((String)inParam.get("MBER_GB_CD")), "0"))){
				inParam.put("MBER_HIST_CD", CmmnCnst.MBER_HIST_CD_12); // 판매회원
			}else{
				inParam.put("MBER_HIST_CD", CmmnCnst.MBER_HIST_CD_10); // 구매회원
			}

			sellerjoinDao.insertUserMberHist(inParam); // 회원히스토리 [이메일인증대기상태 무시]

			LoggerUtil.writeMap(inParam);

			sellerjoinDao.insertUserMberS(inParam);
			sellerjoinDao.insertMberDtl(inParam);

			//inParam.put("BANK_NM", inParam.get("strBankCode"));
			inParam.put("BANK_ACNT_NO", inParam.get("strAccountNo"));
			inParam.put("ACNT_NM", inParam.get("strNm"));


			sellerjoinDao.insertSellerInfo(inParam);
			sellerjoinDao.insertWishCate(inParam);
			sellerjoinDao.insertMberMiniShop(inParam);
			sellerjoinDao.insertGrpProd(inParam);		// 출하지
//			sellerjoinDao.insertAlrm(inParam);

			if(!"".equals(AGR_SEQ_VER) && AGR_SEQ_VER != null){

				for(int i=0; i<AGR_SEQ_VER.length; i++){

					String AGR_SEQ="";
					String AGR_VER="";

					AGR_SEQ_VER_TEMP = AGR_SEQ_VER[i].split(",");

					if(AGR_SEQ_VER_TEMP.length > 1){
						AGR_SEQ = AGR_SEQ_VER_TEMP[0];
						AGR_VER = AGR_SEQ_VER_TEMP[1];
					}else{
						AGR_SEQ = AGR_SEQ_VER_TEMP[0];
					}

					inParam.put("AGR_SEQ", AGR_SEQ);
					inParam.put("AGR_VER", AGR_VER);
					inParam.put("AGREE_YN", "Y");

					sellerjoinDao.insertAgree(inParam);

				}

			}

			if(agrSeqVerN.length()>0){

				AGR_TEMP = agrSeqVerN.split("/");

				for(int i=0; i<AGR_TEMP.length; i++){

					String AGR_SEQ="";
					String AGR_VER="";

					AGR_SEQ_VER_TEMP = AGR_TEMP[i].split(",");

					if(AGR_SEQ_VER_TEMP.length > 1){
						AGR_SEQ = AGR_SEQ_VER_TEMP[0];
						AGR_VER = AGR_SEQ_VER_TEMP[1];
					}else{
						AGR_SEQ = AGR_SEQ_VER_TEMP[0];
					}

					inParam.put("AGR_SEQ", AGR_SEQ);
					inParam.put("AGR_VER", AGR_VER);
					inParam.put("AGREE_YN", "N");

					sellerjoinDao.insertAgree(inParam);

				}
			}

			//포인트 지급
			int retSeller = sellerCommonDao.selectPointUseLogCnt(inParam);
			logger.debug("### updateMberPoint:"+retSeller);
			if(0 == retSeller){
				retSeller = sellerCommonDao.insertPoint(inParam);
				logger.debug("### updateMberPoint:"+retSeller);
				if(retSeller > 0){
					retSeller = sellerCommonDao.updateMberPoint(inParam);
					logger.debug("### updateMberPoint:"+retSeller);
				}
			}


			ret = 1;

		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return ret;

	}
	public void updateSellerMber(Map<String, Object> inParam, String[] aGR_SEQ_VER){

	}

	@Override
	public int updateJoin(Map<String, Object> inParam, String AGR_SEQ_VER[]) throws Exception {
		int ret = 0;

		String code="SELL_MBER_LEV_SEQ";
		String emailAgreeYn="";
		String hpAgreeYn="";
		String comNm="";
		String agrSeqVerN="";
		String AGR_TEMP[];
		String AGR_SEQ_VER_TEMP[];
		System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 1");
		try {

			int mberRet = 0;
			/*
			mberRet = sellerjoinDao.selecMberEmailChek(inParam);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 2");
			if(mberRet == 0){
				return -1; //유저정보 없음
			}

			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 3");
			mberRet = sellerjoinDao.selecMberEmailChek1(inParam);

			if(mberRet > 0){
				return -3; //판매자로가입됨
			}
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 4");
			*/
			String mberGbCd = StringUtil.nvl((String) inParam.get("MBER_GB_CD"), "0");
			Map<String, Object> info = sellerjoinDao.selecMberInfoChek(inParam);
			String userPhone = StringUtil.nvl((String) info.get("MBER_PHONE"), "1");
			String userPass = 	StringUtil.nvl((String) info.get("MBER_PASS"), "1");
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 5");



			//파라미터의 값
			String phone = StringUtil.nvl((String) inParam.get("MBER_PHONE"), "2");
			String pass = StringUtil.nvl((String) inParam.get("MBER_PASS"), "2");
			pass= SellerCommonUtil.getEncPassword(pass);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 6");
			String wishSeq="";
			/*
			if("1".equals(userPhone) || "1".equals(userPass)){
				return -1; //유저정보없음
			}
			*/
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 7");
			/*
			if(!userPass.equals(pass) ){
				return -2; //비밀번호틀림
			}
			*/
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 8");

			//폰중복관련 추가할지
//			if(userPhone.equals(phone) ){
//				return -1;
//			}
			// 미니샵 중복 체크
			int pathRet = sellerjoinDao.selectShopPathCount(inParam);
			if(pathRet > 0){
				return -4;
			}

			emailAgreeYn =  StringUtil.nvl((String) inParam.get("EMAIL_AGREE_YN"), "");
			hpAgreeYn = StringUtil.nvl((String) inParam.get("HP_AGREE_YN"), "");

			agrSeqVerN = StringUtil.nvl((String) inParam.get("AGR_SEQ_VER_N"), "");
			comNm = sellerjoinDao.selectLevCode(code);

			wishSeq = sellerjoinDao.selectWishSeq();

			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 9");
			inParam.put("MBER_SEQ", info.get("MBER_SEQ"));
			inParam.put("EMAIL_AGREE_YN", emailAgreeYn);
			inParam.put("HP_AGREE_YN", hpAgreeYn);
			//inParam.put("JOIN_CHAN_CD", "40");	// PC
			inParam.put("JOIN_CHAN_CD", CmmnCnst.JOIN_CHAN_CD_50);
			inParam.put("JOIN_PATH_CD", "");
			inParam.put("BUY_MBER_LEV_SEQ", sellerjoinDao.selectLevCode("BUY_MBER_LEV_SEQ"));
			inParam.put("SELL_MBER_LEV_SEQ", sellerjoinDao.selectLevCode("SELL_MBER_LEV_SEQ"));
			inParam.put("CONN_CNT", 0);
			inParam.put("BUY_CNT", 0);
			inParam.put("BUY_PRCE", 0);
			inParam.put("POINT_SUM", 0);
			inParam.put("POINT_USE", 0);

			inParam.put("WISH_NAME", "WISH");
			inParam.put("WISH_SEQ", wishSeq);


			inParam.put("CS_PER_TEL", StringUtil.nvl(((String)inParam.get("FIRST_TEL_NUM")), "")
					+ StringUtil.nvl(((String)inParam.get("cmPh")), "")); // 사업장 주소 추가


			// 회원 히스토리에 쌓는다
			if(1 == Integer.parseInt(StringUtil.nvl(((String)inParam.get("MBER_REG_GB_CD")), "0")) // 사업자판매
					&& 1 == Integer.parseInt(StringUtil.nvl(((String)inParam.get("MBER_GB_CD")), "0"))){
				inParam.put("MBER_HIST_CD", CmmnCnst.MBER_HIST_CD_20); // 심사중
				inParam.put("MBER_STAT_CD", "20"); //2015-11-25 일단주석
			}else if(1 == Integer.parseInt(StringUtil.nvl(((String)inParam.get("MBER_REG_GB_CD")), "0")) // 개인판매
					&& 0 == Integer.parseInt(StringUtil.nvl(((String)inParam.get("MBER_GB_CD")), "0"))){
				inParam.put("MBER_HIST_CD", CmmnCnst.MBER_HIST_CD_12); // 판매회원
				inParam.put("MBER_STAT_CD", "10"); //2015-11-25 일단주석
			}else{
				inParam.put("MBER_HIST_CD", CmmnCnst.MBER_HIST_CD_10); // 구매회원
				inParam.put("MBER_STAT_CD", "10"); //2015-11-25 일단주석
			}

			//유저정보 등록
			ret = sellerjoinDao.updateUserMber(inParam);
			logger.info("@@@ DAO @@@ updateJoin.updateUserMber ret"+ret);


			if(ret>0){
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 9");
				sellerjoinDao.insertUserMberHist(inParam); // 회원히스토리
			}


			//유저 상세 정보 등록
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 10");
			if(ret > 0){
				ret =	sellerjoinDao.updateMberDtl(inParam);
				logger.info("@@@ DAO @@@ updateJoin.updateMberDtl ret"+ret);
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 10-1");
			}


			//inParam.put("BANK_NM", inParam.get("strBankCode"));
			inParam.put("BANK_ACNT_NO", inParam.get("strAccountNo"));
			inParam.put("ACNT_NM", inParam.get("strNm"));
			if(ret > 0){
				System.out.println("::::::::::::::::::::::::: mberGbCd : "+mberGbCd);
				if (mberGbCd.equals("1")){
					//ret =	sellerjoinDao.insertCmpnyNo(inParam);
					//logger.info("@@@ DAO @@@ updateJoin.insertCmpnyNo ret"+ret);
					//sellerjoinDao.insertSellerInfo(inParam);
					sellerjoinDao.updateSellerInfo(inParam);
					logger.info("@@@ DAO @@@ updateJoin.updateSellerInfo ret"+ret);
					System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 10-2");
				}else{
					String 	sellerCd = sellerjoinDao.selectSellerSeq();
					inParam.put("SELLER_CD", sellerCd);
					sellerjoinDao.insertSellerInfo(inParam);
					System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 10-3");
				}

			}
			//유저 미니샵 정보 저장
			if(ret > 0){
				ret =	sellerjoinDao.insertMiniShop(inParam);
				logger.info("@@@ DAO @@@ updateJoin.insertMiniShop ret"+ret);
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 10-4");
			}

			//Seller 가입 기본 정보
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 11");
			//sellerjoinDao.insertSellerInfo(inParam);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 12");
			sellerjoinDao.insertWishCate(inParam);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 13");
			//sellerjoinDao.insertMberMiniShop(inParam);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 14");
			sellerjoinDao.insertGrpProd(inParam);		// 출하지
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 15");
//			sellerjoinDao.insertAlrm(inParam);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> step 16");
			//유저약관 동의 저장
			if(ret > 0){
				if(!"".equals(AGR_SEQ_VER) && AGR_SEQ_VER != null){

					for(int i=0; i<AGR_SEQ_VER.length; i++){

						String AGR_SEQ="";
						String AGR_VER="";

						AGR_SEQ_VER_TEMP = AGR_SEQ_VER[i].split(",");

						if(AGR_SEQ_VER_TEMP.length > 1){
							AGR_SEQ = AGR_SEQ_VER_TEMP[0];
							AGR_VER = AGR_SEQ_VER_TEMP[1];
						}else{
							AGR_SEQ = AGR_SEQ_VER_TEMP[0];
						}

						inParam.put("AGR_SEQ", AGR_SEQ);
						inParam.put("AGR_VER", AGR_VER);
						inParam.put("AGREE_YN", "Y");

						try {
							ret += sellerjoinDao.insertAgree(inParam);
						} catch (Exception e) {
							e.printStackTrace();
						}

						logger.info("@@@ DAO @@@ updateJoin.insertAgreeY ret"+ret);

					}
				}

				if(agrSeqVerN.length()>0){

					AGR_TEMP = agrSeqVerN.split("/");

					for(int i=0; i<AGR_TEMP.length; i++){

						String AGR_SEQ="";
						String AGR_VER="";

						AGR_SEQ_VER_TEMP = AGR_TEMP[i].split(",");

						if(AGR_SEQ_VER_TEMP.length > 1){
							AGR_SEQ = AGR_SEQ_VER_TEMP[0];
							AGR_VER = AGR_SEQ_VER_TEMP[1];
						}else{
							AGR_SEQ = AGR_SEQ_VER_TEMP[0];
						}

						inParam.put("AGR_SEQ", AGR_SEQ);
						inParam.put("AGR_VER", AGR_VER);
						inParam.put("AGREE_YN", "N");

						try {
							ret += sellerjoinDao.insertAgree(inParam);
						} catch (Exception e) {
							e.printStackTrace();
						}
						logger.info("@@@ DAO @@@ updateJoin.insertAgreeN ret"+ret);

					}
				}
			}

			//가입시 포인트 지급
			//이력 확인
			int retSeller = sellerCommonDao.selectPointUseLogCnt(inParam);
			logger.debug("### updateMberPoint:"+retSeller);
			if(0 == retSeller){
				retSeller = sellerCommonDao.insertPoint(inParam);
				logger.debug("### updateMberPoint:"+retSeller);
				if(retSeller > 0){
					retSeller = sellerCommonDao.updateMberPoint(inParam);
					logger.debug("### updateMberPoint:"+retSeller);
				}
			}


		} catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return ret;
	}


	@Override
	public Map<String, Object> selectAgreePopup(Map<String, Object> inParam,String[] agrGbCd) {

		ModelMap mm = new ModelMap();
		List<Map<String, Object>> termsList = null;

		try {

			mm.put("agrGbCd", agrGbCd);

			termsList = sellerjoinDao.selectAgreePopup(mm);

			//mm.put("termsList", termsList);
			mm.put("params", inParam);


			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + "+termsList.get(0).get("AGR_DESC"));
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + "+CommonUtil.clobToString ((CLOB) termsList.get(0).get("AGR_DESC")));
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + "+termsList.size());
			for(int j = 0; j<termsList.size() ; j++){
				String termsDesc = CommonUtil.clobToString ((CLOB) termsList.get(j).get("AGR_DESC"));
				termsList.get(j).put("AGR_DESC", termsDesc);
			}
			mm.put("termsList", termsList);

			for(int i = 0 ; i < termsList.size() ; i++){
   				Set<String> set = termsList.get(i).keySet();
   				Iterator<String> ir = set.iterator();

   				System.out.println("여기!!!!");
   				System.out.println("여기!!!!");
   				System.out.println("여기!!!!");
   				while(ir.hasNext()){
   					String a = ir.next();
   					System.out.println(a + " : " + termsList.get(i).get(a));
   				}
   				System.out.println("여기!!!!");
   				System.out.println("여기!!!!");
   				System.out.println("여기!!!!");
    		}

			//String[] arryKey = new String[3];
			//arryKey[0]="PROD_PC_DTL";//PC용상세설명     CLOB=>String
			//arryKey[1]="PROD_MB_DTL";//모바일용상품설명 CLOB=>String
			//arryKey[2]="AGR";//렌탈 약관 CLOB=>String
			//Map<String, Object> termsList2 = CommonUtil.clobToString(sellerjoinDao.selectAgreePopup(mm), arryKey);
			//mm.put("params2", termsList2);

		} catch (Exception e) {
			e.printStackTrace();
		}

		return mm;
	}


	@Override
	public String selectMyAccount(Map<String, Object> inParam) {

		Map<String, Object> myInfo = null;
		String chkId="";
		String chkPw="";
		String paramId = (String) inParam.get("MBER_EMAIL");
		String paramPw = SellerCommonUtil.getEncPassword((String)inParam.get("MBER_PASS"));
		String paramGbCd = (String) inParam.get("MBER_GB_CD");


		String result ="";
		try {
			myInfo = sellerjoinDao.selectMyAccount(inParam);
			System.out.println("+++++++++++++++++++++++++ + ");
			System.out.println("+++++++++++++++++++++++++ + ");
			System.out.println(myInfo.equals(null));
			System.out.println(myInfo.size());
			System.out.println("+++++++++++++++++++++++++ + ");
			System.out.println("+++++++++++++++++++++++++ + ");

			chkId = (String) myInfo.get("MBER_EMAIL");
			chkPw = (String) myInfo.get("MBER_PASS");

			String myInfoGbCd = (String) myInfo.get("MBER_GB_CD");
			String myInfoRegGbCd = (String) myInfo.get("MBER_REG_GB_CD");
			String myInfoStatCd = (String) myInfo.get("MBER_STAT_CD");


			String perChkYn = (String) myInfo.get("PERCHK_YN");
			String mberNm = (String) myInfo.get("MBER_NM");

			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> mberNm "+mberNm);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + ");
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + ");
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>chkId + "+chkId);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>chkPw + "+chkPw);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>paramId + "+paramId);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>paramPw + "+paramPw);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + "+paramPw.equals(chkPw));
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + "+paramId.equals(chkId));
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + "+myInfoGbCd);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + "+myInfoRegGbCd);
			System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>> + "+myInfoStatCd);

			if(myInfoGbCd != null && !myInfoGbCd.equals(paramGbCd) && !myInfoStatCd.equals("99")){
				result = "{\"gubun\":\"GB\",\"nm\":\"\"}";
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>result + "+result);
				return result;
			}else if(myInfoGbCd != null && myInfoRegGbCd.equals("1") && !myInfoStatCd.equals("99") ){
				result = "{\"gubun\":\"SELL\",\"nm\":\"\"}";
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>result + "+result);
				return result;
			}else if(myInfoGbCd != null && myInfoStatCd.equals("40")){
				result = "{\"gubun\":\"EMAIL\",\"nm\":\"\"}";
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>result + "+result);
				return result;
			}else if(myInfoGbCd != null && myInfoStatCd.equals("99")){
				result = "{\"gubun\":\"OUT\",\"nm\":\"\"}";
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>result + "+result);
				return result;
			}else if( paramId.equals(chkId) && paramPw.equals(chkPw) && perChkYn != null && perChkYn.equals("Y")){
//				result = "perChk_Y"; // 가입인증 o, 본인인증 o
				result = "{\"gubun\":\"perChk_Y\",\"nm\":\""+URLEncoder.encode(mberNm,"utf-8")+"\"}";
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>result + "+result);
			}else if( paramId.equals(chkId) && paramPw.equals(chkPw) && perChkYn == null ){
//				result = "perChk_N"; // 가입인증 o, 본인인증 x
				result = "{\"gubun\":\"perChk_N\",\"nm\":\"\"}";
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>result + "+result);
			}else{
//				result = "fail";
				result = "{\"gubun\":\"fail\",\"nm\":\"\"}";
				System.out.println(">>>>>>>>>>>>>>>>>>>>>>>>>result + "+result);
				return result;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	@Override
	public int selectAuthCPNY(Map<String, Object> inParam) {
		int cnt =0;
		try {
			System.out.println("^^^^^^^^^^^^^^^^^^^^^^^^^^^^ "+(String) inParam.get("CMPNY_NO"));
			cnt = sellerjoinDao.selectAuthCPNY(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return cnt;
	}

	@Override
	public String selectsiteIFUrl() throws Exception {
		return sellerjoinDao.selectsiteIFUrl();
	}

	@Override
	public String selectUserInfo(Map<String, Object> inParam) throws Exception {
		// TODO Auto-generated method stub

		String temp_case="";

		Map<String, Object> mm = null;

		try{

			mm = sellerjoinDao.selectUserInfo(inParam);

			if(mm.get("MBER_GB_CD").equals("0") && mm.get("MBER_REG_GB_CD").equals("0")){
				temp_case = "1";
			}else if(mm.get("MBER_GB_CD").equals("1") && mm.get("MBER_REG_GB_CD").equals("0")){
				temp_case = "2";
			}else if(mm.get("MBER_GB_CD").equals("0") && mm.get("MBER_REG_GB_CD").equals("1")){
				temp_case = "3";
			}else if(mm.get("MBER_GB_CD").equals("1") && mm.get("MBER_REG_GB_CD").equals("1")){
				temp_case = "4";
			}

		}catch(Exception e){
			e.printStackTrace();
		}

		return temp_case;
	}

	@Override
	public ModelMap goMyInfoInfo(Map<String, Object> inParam){
		ModelMap mm = new ModelMap();
		try {
			mm.put("myInfoInfo", sellerjoinDao.goMyInfoInfo(inParam));
		}catch (Exception e) {
			e.printStackTrace();
			throw e;
		}
		return mm;
	}

	@Override
	public void updateMyInfo(Map<String, Object> inParam) throws Exception {

		String pass = CommonUtil.getEncPassword((String)inParam.get("MBER_PASS"));
		try {
			inParam.put("MBER_PASS", pass);

			sellerjoinDao.updateMyInfo(inParam);
			sellerjoinDao.updateMberInfo(inParam);
			sellerjoinDao.updateMberDtlInfo(inParam);

			inParam.put("MBER_HIST_CD", CmmnCnst.MBER_HIST_CD_20); // 심사중
			sellerjoinDao.insertUserMberHist(inParam);

		} catch (Exception e) {

			e.printStackTrace();
			throw e;
		}
		return;

	}

	@Override
	public void updatePwChg(Map<String, Object> inParam) throws Exception {

		String pass = CommonUtil.getEncPassword((String)inParam.get("MBER_PASS"));
		try {

			inParam.put("MBER_PASS", pass);

			LoggerUtil.writeMap(inParam);

			sellerjoinDao.updatePwChg(inParam);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return;

	}

	@Override
	public ModelMap updateMyAccount(Map<String, Object> inParam){
		ModelMap mm = new ModelMap();
		Integer acccountStatus = 0;
		String msg = "";
		try {
			acccountStatus = sellerjoinDao.updateMyAccount(inParam);
			logger.debug("acccountStatus:"+acccountStatus);
			if(acccountStatus == null){
				msg = "계좌번호가 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}

}
