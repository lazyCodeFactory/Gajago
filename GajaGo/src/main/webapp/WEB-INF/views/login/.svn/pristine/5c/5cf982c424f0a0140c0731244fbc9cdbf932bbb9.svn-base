package com.ssocio.sharing.dao.batch;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 설명
 * 설명
 * @author kim
 * @version
 * @since 2015. 10. 29
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 10. 29.	|	kim	|신규
 * @비고
 * </pre>
 */
@Component
public class BatchSellerPerfDao {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(BatchSellerPerfDao.class);

	/* --------------------------------------------------------------------------
		# sqlSession 설정
		 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
		 -- 하나만 사용할 경우 @Autowired
	   --------------------------------------------------------------------------*/
	@Resource(name="sqlSessionBatch")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	/**
	 * <pre>
	 * 정산대기 리스트 조회
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.Seller
	 * </pre>
	 */
	// 배치잡 존재확인
	public String selectBatchJobCfgInfo(String inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectBatchJobCfgInfo Start ##########");
		String list = null;
		try {
			list =  sqlSession.selectOne("batchSellerPerfMapper.selectBatchJobCfgInfo", inParam);
		} catch (Exception e) {
			logger.error("selectBatchJobCfgInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }

	// 배치잡생성
	public int insertBatchJobCfg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## insertBatchJobCfg Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchSellerPerfMapper.insertBatchJobCfg", inParam);
		} catch (Exception e) {
			logger.error("insertBatchJobCfg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	// 배치잡 상태확인
	public String selectBatchJobCfgStat(String inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## selectBatchJobCfgStat Start ##########");
		String list = null;
		try {
			list =  sqlSession.selectOne("batchSellerPerfMapper.selectBatchJobCfgStat", inParam);
		} catch (Exception e) {
			logger.error("selectBatchJobCfgStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	// 배치잡 정보수정
	public int updateBatchJobCfg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## updateBatchJobCfg Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchSellerPerfMapper.updateBatchJobCfg", inParam);
		} catch (Exception e) {
			logger.error("updateBatchJobCfg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	// 배치잡 히스토리정보생성
	public int insertBatchJobHist(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## insertBatchJobHist Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchSellerPerfMapper.insertBatchJobHist", inParam);
		} catch (Exception e) {
			logger.error("insertBatchJobHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	// 배치잡 히스토리정보수정
	public int updateBatchJobHist(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("########## updateBatchJobHist Start ##########");
		int list = -1;
		try {
			list =  sqlSession.update("batchSellerPerfMapper.updateBatchJobHist", inParam);
		} catch (Exception e) {
			logger.error("updateBatchJobHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}

	// 기간별 시간 처리
	public Map<String, Object> selectTermSellerPerfDate() throws Exception {
		logger.info("########## selectTermSellerPerfDate Start ##########");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("batchSellerPerfMapper.selectTermSellerPerfDate");
		} catch (Exception e) {
			logger.error("selectTermSellerPerfDate DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	 }

	// 실적 기간별 조회
	public List<Map<String, Object>> selectListSellerPerfDate(Map<String, Object> inParam) throws Exception {
		logger.info("########## selectListSellerPerfDate Start ##########");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("batchSellerPerfMapper.selectListSellerPerfDate", inParam);
		} catch (Exception e) {
			logger.error("selectListSellerPerfDate DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }

	// 실적 기간별 insert
	public int insertListSellerPerfDate(Map<String, Object> param) throws Exception{
		return sqlSession.insert("batchSellerPerfMapper.insertListSellerPerfDate", param);
	}

	// 카테고리별 시간 처리
	public Map<String, Object> selectTermSellerPerfCtry() throws Exception {
		logger.info("########## selectTermSellerPerfCtry Start ##########");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("batchSellerPerfMapper.selectTermSellerPerfCtry");
		} catch (Exception e) {
			logger.error("selectTermSellerPerfCtry DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	 }

	// 실적 카테고리별 조회
	public List<Map<String, Object>> selectListSellerPerfCtry(Map<String, Object> inParam) throws Exception {
		logger.info("########## selectListSellerPerfCtry Start ##########");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("batchSellerPerfMapper.selectListSellerPerfCtry", inParam);
		} catch (Exception e) {
			logger.error("selectListSellerPerfDate DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }

	// 실적 기간별 insert
	public int insertListSellerPerfCtry(Map<String, Object> param) throws Exception{
		return sqlSession.insert("batchSellerPerfMapper.insertListSellerPerfCtry", param);
	}

	// 상품별 시간 처리
	public Map<String, Object> selectTermSellerPerfProd() throws Exception {
		logger.info("########## selectTermSellerPerfProd Start ##########");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("batchSellerPerfMapper.selectTermSellerPerfProd");
		} catch (Exception e) {
			logger.error("selectTermSellerPerfProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	 }

	// 실적 상품별 조회
	public List<Map<String, Object>> selectListSellerPerfProd(Map<String, Object> inParam) throws Exception {
		logger.info("########## selectListSellerPerfProd Start ##########");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("batchSellerPerfMapper.selectListSellerPerfProd", inParam);
		} catch (Exception e) {
			logger.error("selectListSellerPerfProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }

	// 실적 상품별 insert
	public int insertListSellerPerfProd(Map<String, Object> param) throws Exception{
		return sqlSession.insert("batchSellerPerfMapper.insertListSellerPerfProd", param);
	}

	// 실적 회원별 조회
	public List<Map<String, Object>> selectListSellerPerfMber(Map<String, Object> inParam) throws Exception {
		logger.info("########## selectListSellerPerfMber Start ##########");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("batchSellerPerfMapper.selectListSellerPerfMber", inParam);
		} catch (Exception e) {
			logger.error("selectListSellerPerfMber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }
	
	// 실적 회원별 insert
		public int mergeSellerPerfDate(Map<String, Object> param) throws Exception{
			return sqlSession.insert("batchSellerPerfMapper.mergeSellerPerfDate", param);
		}
		// 실적 회원별 insert
		public int mergeSellerPerfCtry(Map<String, Object> param) throws Exception{
			return sqlSession.insert("batchSellerPerfMapper.mergeSellerPerfCtry", param);
		}
		// 실적 회원별 insert
		public int mergeSellerPerfProd(Map<String, Object> param) throws Exception{
			return sqlSession.insert("batchSellerPerfMapper.mergeSellerPerfProd", param);
		}
		
		
		

		
		/**
		 * 환불내역 조회
		 * @param inParam
		 * @return
		 * @throws Exception
		 */
		public List<Map<String, Object>> selectBatchTryPaymentRefund(Map<String, Object> inParam) throws Exception {
			logger.info("########## selectBatchTryPaymentRefund Start ##########");
			List<Map<String, Object>> list = null;
			try {
				list =  sqlSession.selectList("batchSellerPerfMapper.selectBatchTryPaymentRefund", inParam);
			} catch (Exception e) {
				logger.error("selectBatchTryPaymentRefund DB Error : " + e.toString());
				throw new Exception(RspnsCnst.RC1000000004);
			}
			return list;
		 }

		
		/**
		 * 환불내역 업데이트
		 * @param map
		 * @return
		 */
		public int updateBatchTryPaymentRefund(Map<String, Object> map) throws Exception{
			// ------------------------------------------------------------------------
			// # 시작로그
			// ------------------------------------------------------------------------
			logger.info("########## updateBatchTryPaymentRefund Start ##########");
			int list = -1;
			try {
				list =  sqlSession.update("batchSellerPerfMapper.updateBatchTryPaymentRefund", map);
			} catch (Exception e) {
				logger.error("insertBatchJobCfg DB Error : " + e.toString());
				throw new Exception(RspnsCnst.RC1000000004);
			}
			return list;
		}
}
