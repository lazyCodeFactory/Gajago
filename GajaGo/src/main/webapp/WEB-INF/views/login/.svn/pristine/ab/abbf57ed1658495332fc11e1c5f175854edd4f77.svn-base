package com.ssocio.openmarket.api.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.openmarket.common.Constant;
import com.ssocio.sharing.service.admin.AdminOrderService;
import com.ssocio.sharing.service.admin.AdminProdService;
import com.ssocio.sharing.service.admin.AdminQAAdviceService;
import com.ssocio.sharing.service.seller.SellerQAAdviceService;

@Controller
public class OMQAController {
	private static final Logger logger = LoggerFactory.getLogger(OMQAController.class);
	
	@Autowired
	private AdminQAAdviceService adminQAAdviceService;
	
	@Autowired
	private AdminProdService adminProdService;
	
	@Autowired
	private AdminOrderService adminOrderService;
	
	@Autowired
	private SellerQAAdviceService sellerQAAdviceService;
	/**
	 * 상담 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping(value=Constant.OM_SELECTLISTQAADVICE, method = RequestMethod.POST)
	public ModelAndView selectListQAAdvice(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info(Constant.OM_SELECTLISTQAADVICE + " START");
		inParam.put("MBER_SEQ", String.valueOf(request.getAttribute("mberSeq")));
		inParam.put("mberName", String.valueOf(request.getAttribute("mberName")));
		inParam.put("BOARD_TYPE_CD", "72");
		ModelAndView mav = new ModelAndView("jsonView2");
		try {
			// ModelMap serviceMap = adminQAAdviceService.selectListQAAdvice(inParam);
			ModelMap serviceMap = sellerQAAdviceService.selectListQAAdvice(inParam);
			if (serviceMap != null && serviceMap.get("selectListQAAdvice") != null) {
				List<Map<String, Object>> qaList =  (List<Map<String, Object>>) serviceMap.get("selectListQAAdvice");
				for (int i = 0; i < qaList.size(); i++ ) {
					Map<String, Object> qa = qaList.get(i);
					qa.put("MBER_SEQ", String.valueOf(request.getAttribute("mberSeq")));
					logger.info(qa.toString());
					// ModelMap qaDetail = adminQAAdviceService.selectQAAdvice(qa);
					ModelMap qaDetail = sellerQAAdviceService.selectQAAdvice(qa);
					if (qaDetail != null && qaDetail.get("selectQAAdvice") != null) {
						qaList.get(i).put("qaDetail", qaDetail.get("selectQAAdvice"));
					} else {
						qaList.get(i).put("qaDetail", "");
					}
				}
			}
			mav.addObject("qaList", serviceMap.get("selectListQAAdvice"));
			mav.addObject("statusCount", serviceMap.get("selectStatusCount"));
			mav.addObject("params", inParam);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String, String> error = new HashMap<String, String>();
			error.put("code", "500");
			error.put("msg", "internal server error");
			mav.addObject("error", error);
			return mav;
		}
		return mav;
	}
	
	/**
	 * 상담 상세 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value=Constant.OM_UPDATEQAADVICE, method = RequestMethod.POST)
	public ModelAndView updateQAAdvice(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info(Constant.OM_UPDATEQAADVICE + " START");
		ModelAndView mav = new ModelAndView("jsonView2");
		return mav;
	}
	
	/**
	 * 상담 답변 등록
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value=Constant.OM_UPDATEQAADVICEREG, method = RequestMethod.POST)
	public ModelAndView updateQAAdviceReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info(Constant.OM_UPDATEQAADVICEREG + " START");
		ModelAndView mav = new ModelAndView("jsonView2");
		
		try {
			// ANS_GB_CD, BOARD_TYPE_CD 값 초기화하여 셀러가 Question의 원문을 수정할 수 없도록 제한
			inParam.put("ANS_GB_CD", "");
			inParam.put("BOARD_TYPE_CD", "");
			adminQAAdviceService.updateQAAdviceReg(inParam, request);
		} catch (Exception e) {
			e.printStackTrace();
			Map<String, String> error = new HashMap<String, String>();
			error.put("code", "500");
			error.put("msg", "internal server error");
			mav.addObject("error", error);
			return mav;
		}
		return mav;
	}
}
