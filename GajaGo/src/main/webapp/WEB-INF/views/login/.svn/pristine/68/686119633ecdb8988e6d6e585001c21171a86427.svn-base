package com.ssocio.sharing.cmmn.web.handler;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.handler.AbstractHandlerInterceptor;
import com.ssocio.sharing.cmmn.instance.cmmncode.CmmnCodeTableManager;
import com.ssocio.sharing.cmmn.instance.config.AppConfigManager;
import com.ssocio.sharing.cmmn.service.CommonService;
import com.ssocio.sharing.cmmn.web.util.WebCommonUtil;

/**
 * <pre>
 * Interceptor
 * Interceptor
 * @author S.B.LEE
 * @version
 * @since 2015. 7. 7. 오전 11:32:21
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 7.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
public class WebControllerInterceptor extends AbstractHandlerInterceptor {
	private static final long serialVersionUID = -3421153999011719042L;
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebControllerInterceptor.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private CommonService commonService;
	
	/**
	 * <pre>
	 * preHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 7. 오전 11:35:20
	 * @author SEOKBAE
	 * @see @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#preHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

		try{

			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[isLogin]"+WebCommonUtil.isLogin(request));
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			
			// ----------------------------------------------------------------------
			// Application Config설정파일 Load - application-config.xml
			// ----------------------------------------------------------------------
			AppConfigManager.getInstance(request);
			logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★ domain : " + AppConfigManager.getInstance().getConfig(AppConfigManager.AppConfigKeyDomain));
			
			
			// ----------------------------------------------------------------------
			// 공통코드 Instance Check & Create
			// ----------------------------------------------------------------------
			//CmmnCodeTableManager.getInstance(request);
			if (CmmnCodeTableManager.getInstance() == null) {
				logger.info("--------------------------------------------------");
				logger.info("CmmnCodeTableManager Instance Loading...");
				//logger.info("CmmnCodeTableManager.getInstance is null");
				
//				commonService.setComCdInstanceInfo();
			} else {
				logger.info("--------------------------------------------------");
				logger.info("CmmnCodeTableManager Instance Already Loaded");
			}
			logger.info("--------------------------------------------------");
			
			// ----------------------------------------------------------------------
			// 로그인 체크 (로그인 처리 이후 주석 해제할것)
			// ----------------------------------------------------------------------
//	      if(!CommonUtil.isLogin(request)){
//	    	logger.info("Non Login sendRedirect");
//	        response.sendRedirect("/mobile/main/login.do");
//	        
//	        return false;
//	      }
		} catch (Exception e) {
			logger.error("MobileControllerInterceptor 오류 [" + e.toString() + "]");
			e.printStackTrace();
		}
		return true;
	}
	
	/**
	 * <pre>
	 * preHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param model
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 7. 오전 11:35:55
	 * @author SEOKBAE
	 * @see @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#postHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, org.springframework.web.servlet.ModelAndView)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView model) throws Exception {
		// TODO Auto-generated method stub
	}
	
	/**
	 * <pre>
	 * preHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param exception
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 7. 오전 11:36:06
	 * @author SEOKBAE
	 * @see @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#afterCompletion(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, java.lang.Exception)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception) throws Exception {
		// TODO Auto-generated method stub
	}
	
	/**
	 * <pre>
	 * 설명
	 * 설명
	 * @param request
	 * @return
	 * @date 2015. 7. 7. 오전 11:36:30
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.cmmn.web.handler
	 * </pre>
	 */
	public static String getAfterContextPathUri(HttpServletRequest request) {
		
		String requestUri             = "";
		String strAfterContextPathUri = "";
		
		requestUri = request.getRequestURI();   // ex) /gapping/web/web.apiTest
		logger.debug("requestUri          : " + requestUri);
		strAfterContextPathUri = requestUri.substring(request.getContextPath().length());
		//logger.debug("@@afterContextPathUri : " + strAfterContextPathUri);

		return strAfterContextPathUri;
	}
}
