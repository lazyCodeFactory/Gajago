<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="webCommonMapper">
	<!-- 페이징 처리 -->
	<sql id="pagingHeader">
		SELECT * FROM (
	</sql>

	<sql id="pagingFooter">
		)
		WHERE NO BETWEEN #{START_ROW} AND #{END_ROW}
	</sql>
	<!-- 로그인 -->
	<select id="setLogin" resultType="com.ssocio.sharing.vo.web.WebSession">
		SELECT MBER_SEQ
			 , MBER_GB_CD
			 , MBER_EMAIL
			 , MBER_PASS
			 , MBER_NM
			 , MBER_PHONE
			 , MBER_REG_GB_CD
			 , MBER_STAT_CD
			 , SERIAL_KEY
			 , SSO_GB_CD
			 , FAIL_CNT
		  FROM MBER_INFO
		 WHERE MBER_EMAIL = <![CDATA[#{MBER_EMAIL}]]>
	</select>
	
	<select id="getFailCnt" resultType="int">
		SELECT NVL(FAIL_CNT,0)
		  FROM MBER_INFO
		 WHERE MBER_EMAIL = <![CDATA[#{MBER_EMAIL}]]>
	</select>
	
	<update id="updateLoginFailCnt" parameterType="hashmap">
	UPDATE 
		MBER_INFO
	SET
		FAIL_CNT = NVL((FAIL_CNT + 1), 1)
	WHERE
		MBER_EMAIL = <![CDATA[#{MBER_EMAIL}]]>
	</update>

	<!-- 페이스북 로그인 -->
	<select id="setFacebookLogin" resultType="com.ssocio.sharing.vo.web.WebSession">
		SELECT MBER_SEQ
			 , MBER_GB_CD
			 , MBER_EMAIL
			 , MBER_PASS
			 , MBER_NM
			 , MBER_PHONE
			 , MBER_REG_GB_CD
			 , SERIAL_KEY
			 , MBER_STAT_CD
			 , SSO_GB_CD
		  FROM MBER_INFO
		 WHERE SSO_MBER_ID = <![CDATA[#{SSO_MBER_ID}]]>
		   AND SSO_GB_CD = 'FBO'
	</select>

	<!-- 카카오톡 로그인 -->
	<select id="setKakaoLogin" resultType="com.ssocio.sharing.vo.web.WebSession">
		SELECT MBER_SEQ
			 , MBER_GB_CD
			 , MBER_NICK
			 , MBER_EMAIL
			 , MBER_PASS
			 , MBER_NM
			 , MBER_PHONE
			 , MBER_REG_GB_CD
			 , SERIAL_KEY
			 , MBER_STAT_CD
			 , SSO_GB_CD
		  FROM MBER_INFO
		 WHERE SSO_MBER_ID = #{SSO_MBER_ID}
		   AND SSO_GB_CD = 'KKO'
	</select>

	<!-- 개인회원 아이디 찾기 -->
	<select id="selectFindId" parameterType="hashmap" resultType="hashmap">
		SELECT MBER_SEQ
			 , MBER_EMAIL
			 , MBER_NM
			 , MBER_PHONE
			 , MBER_REG_GB_CD
			 , MBER_GB_CD
			 , TO_CHAR(REGIST_DT, 'YYYYMMDD') AS REGIST_DT
		  FROM MBER_INFO
		 WHERE MBER_NM = #{MBER_NM}
		   AND MBER_PHONE = #{MBER_PHONE}
		   AND MBER_GB_CD = '0'
	</select>

	<!-- 사업자 아이디 찾기 -->
	<select id="procFindIdBusiReg" parameterType="hashmap" resultType="hashmap">
		SELECT A.MBER_SEQ
			 , A.MBER_EMAIL
			 , A.MBER_NM
			 , A.MBER_PHONE
			 , A.MBER_REG_GB_CD
			 , A.MBER_GB_CD
			 , B.CMPNY_NM
			 , TO_CHAR(A.REGIST_DT, 'YYYYMMDD') AS REGIST_DT
		  FROM MBER_INFO A
		 INNER JOIN SELLER_INFO_CFG B ON (B.MBER_SEQ = A.MBER_SEQ)
		 WHERE B.CMPNY_NM = #{CMPNY_NM}
		   AND B.CMPNY_NO = #{CMPNY_NO}
		   AND A.MBER_GB_CD = '1'
	</select>

	<!-- 개인회원 비밀번호 찾기 -->
	<select id="procFindPwReg" parameterType="hashmap" resultType="hashmap">
		SELECT MBER_SEQ
			 , MBER_EMAIL
			 , MBER_NM
			 , MBER_PHONE
			 , MBER_REG_GB_CD
		  FROM MBER_INFO
		 WHERE MBER_NM = #{MBER_NM}
		   AND MBER_PHONE = #{MBER_PHONE}
		   AND MBER_EMAIL = #{MBER_EMAIL}
		   AND MBER_GB_CD = '0'
	</select>

	<!-- 사업자 비밀번호 찾기 -->
	<select id="procFindPwBusiReg" parameterType="hashmap" resultType="hashmap">
		SELECT A.MBER_SEQ
			 , A.MBER_EMAIL
			 , A.MBER_NM
			 , A.MBER_PHONE
			 , A.MBER_REG_GB_CD
			 , A.MBER_GB_CD
			 , B.CMPNY_NM
			 , TO_CHAR(A.REGIST_DT, 'YYYYMMDD') AS REGIST_DT
		  FROM MBER_INFO A
		 INNER JOIN SELLER_INFO_CFG B ON (B.MBER_SEQ = A.MBER_SEQ)
		 WHERE B.CMPNY_NM = #{CMPNY_NM}
		   AND B.CMPNY_NO = #{CMPNY_NO}
		   AND A.MBER_EMAIL = #{MBER_EMAIL}
		   AND A.MBER_GB_CD = '1'
	</select>

	<update id="updateFailCnt" parameterType="hashmap">
		UPDATE	MBER_INFO  
	  	SET 
	  	  UPDT_DT 	= SYSDATE 
	  	, FAIL_CNT = 0
	  	WHERE MBER_EMAIL = #{MBER_EMAIL} 
    </update>
  
	<!-- 카테고리 리스트 -->
	<select id="selectCtryList" parameterType="hashmap" resultType="hashmap">
		SELECT CTRY_CD
			 , CTRY_NM
			 , DECODE(VIEW_YN,'Y','사용' ,'N','미사용') AS VIEW_YN_NM
			 , SORT_SEQ
		  FROM CTRY
		 WHERE LVL_SEQ = #{lvlSeq}
		<if test="viewYn != null and viewYn != ''" >
		   AND VIEW_YN = #{viewYn}
		</if>
		<if test="parentCtryCd != null and parentCtryCd != ''" >
		   AND PARENT_CTRY_CD = #{parentCtryCd}
		</if>
		ORDER BY SORT_SEQ ASC
	</select>
	<!-- 푸쉬아이디 등록하기  -->
	<update id="insertPushIdreg">
	    MERGE INTO MBER_CON_DEV
            USING DUAL
            ON (UUID = #{UUID})
            WHEN MATCHED THEN
					UPDATE SET
						  PUSH_ID = #{PUSH_ID}
						, OS_GB_CD = #{OS_GB_CD}
					  	, LAST_ACC_DT = SYSDATE
			  			<choose>
						<when test="MBER_SEQ != null and MBER_SEQ != ''">
						, MBER_SEQ = #{MBER_SEQ}
						, DEVICE_SEQ = NVL((SELECT MAX(DEVICE_SEQ)+1 FROM MBER_CON_DEV WHERE MBER_SEQ = #{MBER_SEQ}),1)
						</when>
						<otherwise>
						, MBER_SEQ = null
						, DEVICE_SEQ = 1 
						</otherwise>
						</choose>
            WHEN NOT MATCHED THEN
                      INSERT (
                      		OS_GB_CD
                      		, UUID
                      		, PUSH_ID
                      		, FIRST_ACC_DT
                      		, LAST_ACC_DT
			                   			 , MBER_SEQ
			                   			 , DEVICE_SEQ
                      		)VALUES (
                      		 #{OS_GB_CD}
                      	   , #{UUID}
                      	   , #{PUSH_ID}
                      	   , SYSDATE
                      	   , SYSDATE
							<choose>
								<when test="MBER_SEQ != null and MBER_SEQ != ''">
									, #{MBER_SEQ}
									, NVL((SELECT MAX(DEVICE_SEQ)+1 FROM MBER_CON_DEV WHERE MBER_SEQ = #{MBER_SEQ}),1)
								</when>
								<otherwise>
									, null
									, 1 
								</otherwise>
							</choose>
                      	  )
	</update>

	<select id="selectsiteIFUrl" resultType="String">
       SELECT COM_CD_NM
         FROM CODE
        WHERE GRP_CD = 'SITE_DEFAULT'
          AND COM_CD = 'EMAIL_IF_URL'
	</select>

	<!-- 푸쉬아이디 등록하기  -->
	<update id="updatePw" parameterType="hashmap">

	    UPDATE MBER_INFO SET
		    MBER_PASS = #{temp_pw}
		    , UPDT_DT = SYSDATE
		    , FAIL_CNT = 0
	    WHERE MBER_EMAIL = #{P_MBER_EMAIL}


	</update>


	<select id="selectUseStat" parameterType="hashmap" resultType="int">
		 SELECT COUNT(1)
		 FROM MBER_INFO
		 WHERE MBER_EMAIL = #{MBER_EMAIL}
		 AND MBER_STAT_CD = '30'
	</select>

	<select id="selectAnsimUrl" resultType="string">
		SELECT COM_CD_NM	AS ANSIM_URL
		FROM CODE
		WHERE GRP_CD = 'SITE_DEFAULT'
		    AND USE_YN = 'Y'
		    AND COM_CD = 'ANSIM_IF_URL'
	</select>


	<select id="selectShareUrl" resultType="string">
		SELECT COM_CD_NM FROM CODE where  grp_cd = 'SITE_DEFAULT' AND COM_CD ='SHARE_IF_URL'
	</select>
	
	
	<select id="selectExtLand" parameterType="hashmap" resultType="hashmap">
		SELECT A.EXT_LAND_CD		AS EXT_LAND_CD
		    , A.ADD_DLV_PRICE		AS ADD_DLV_PRICE
		FROM EXT_LAND_DLV_PRICE A, EXT_LAND_MAP B
		WHERE A.PROD_CODE = #{PROD_CODE}
		    AND B.ZIP_CD = #{ZIP_CD}
		    AND A.EXT_LAND_CD = B.EXT_LAND_CD
	</select>
	
	
	<select id="selectPointUseLogCnt" parameterType="hashmap" resultType="int">
				SELECT COUNT(*) AS CNT FROM POINT_USE_LOG
		WHERE POINT_REL_REASON ='telauth'
		AND ( POINT_REL =NVL( (SELECT CI FROM MBER_INFO WHERE MBER_SEQ = #{MBER_SEQ} ),'NONE' )
					OR MBER_SEQ = #{MBER_SEQ} )
	</select>
	
	<update id="updateMberPoint">
			UPDATE MBER_INFO SET POINT = NVL(POINT,0) + cast ((SELECT COM_CD_NM FROM CODE WHERE GRP_CD ='SITE_DEFAULT' AND COM_CD = 'JOIN_POINT') as number) 
			,PERCHK_YN = 'Y'
			WHERE MBER_SEQ = #{MBER_SEQ }
	</update>
	
	<insert id="insertPoint">
	INSERT INTO POINT_USE_LOG(
		POINT_SEQ
		,MBER_SEQ
		,POINT
		,POINT_CD
		,CHG_REASON
		,REGIST_DT
		,POINT_REL_REASON
		,POINT_REL
	)VALUES(
		SEQ_POINT_USE.NEXTVAL
		,#{MBER_SEQ}
		,5000
		,'30'
		,'회원가입포인트'
		,SYSDATE
		,'telauth'
		,(SELECT CI FROM MBER_INFO WHERE MBER_SEQ = #{MBER_SEQ} )
	)
	</insert>

	<select id="selectOrdCdCnt" parameterType="hashmap" resultType="int">
		SELECT COUNT(*) AS CNT FROM ORD_INFO
			WHERE MBER_SEQ = #{MBER_SEQ }
	</select>
</mapper>
