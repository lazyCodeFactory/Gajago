package com.ssocio.sharing.controller.mobile;

import java.net.URLEncoder;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.service.CommonService;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.PushUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.util.WebCommonUtil;
import com.ssocio.sharing.service.web.WebBoardService;
import com.ssocio.sharing.vo.web.WebSession;

/**
 * <pre>
 * 자주묻는 질문 컨트롤러
 * 자주묻는 질문 컨트롤러
 * @author J.S.LEE
 * @version
 * @since 2015. 8. 18. 오후 8:07:15
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 8. 18.	|	J.S.LEE	|신규
 * @비고
 * </pre>
 */
@Controller
@RequestMapping(value="/mobile/board")
public class MobileBoardController extends MobileReferController {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(MobileBoardController.class);

	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private WebBoardService webBoardService;

	@Autowired
	private CommonService commonService;

	@RequestMapping("/selectListFaq.do")
	public ModelAndView selectListFaq(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("MOBILE NOTICE BOARD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);
		ModelAndView mav = new ModelAndView("jsonView");
//			mav.setViewName("web/main/login");
		try {
			mav.addObject("faq_list", webBoardService.selectListFaq(inParam));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 공지사항 리스트 가져오기
	 * 공지사항 리스트 가져오기
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 17. 오후 4:38:35
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.mobile
	 * @비고
	 *
	 * </pre>
	*/
	@RequestMapping("/selectListNotice.do")
	public ModelAndView selectListNotice(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("MOBILE NOTICE BOARD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);
		ModelAndView mav = new ModelAndView();
		if(inParam.isEmpty()){
			mav.setViewName("web/board/boardlist");
		}else{
			if("add".equals(inParam.get("BOARD_GUBUN"))){
				logger.info("TESTSETSETSETSETSETSETSETSETSETSETSETSETTTTTTTTTTTTTTTTTTTTTTTTTT");
			}else{
				mav.setViewName("web/board/boardlist");
				mav.setViewName("jsonView");
			}

		}

		try {
			mav.addObject("notice_list", webBoardService.selectListNotice());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 공지사항 상세
	 * 공지사항 상세
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 17. 오후 8:04:38
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.mobile
	 * @비고
	 *
	 * </pre>
	*/
	@RequestMapping("/selectNotice.do")
	public ModelAndView selectNotice(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("MOBILE NOTICE BOARD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		ModelAndView mav = new ModelAndView();

		String test= (String)inParam.get("NOTICE_VIEW");
		if("FIRST".equals(test)){
			mav.setViewName("web/board/boardDtl");
		}else{
			mav.setViewName("jsonView");
		}
//			mav.setViewName("web/main/login");
		try {
			mav.addObject("NOTIDTL_LIST", webBoardService.selectNotice(inParam));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 1:1문의 등록 페이지 이동
	 * 1:1문의 등록 페이지 이동
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 19. 오후 5:34:27
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.mobile
	 * @비고
	 *
	 * </pre>
	*/
	@RequestMapping("/insertOne.do")
	public ModelAndView insertOne(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("MOBILE insertOneBoard  START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);
		ModelMap result = new ModelMap();
		ModelAndView mav = new ModelAndView();
		WebSession session = (WebSession) request.getSession().getAttribute("user");
//		if(session == null || !session.getLogin()){
//			mav.setViewName("web/main/login");
//		}else{
			mav.setViewName("web/board/oneBoardInsert");
			inParam.put("MBER_SEQ", session.getMBER_SEQ());

//			inParam.put("MBER_SEQ", "3");

			try {
				ComCookieCheck(request);
				result = webBoardService.insertOneInfo(inParam);
				mav.addObject("defInfo", result.get("defInfo"));
			} catch (Exception e) {
				e.printStackTrace();
			}

//		}
		return mav;
	}

	/**
	 * <pre>
	 * 1:1 문의 등록하기
	 * 1:1 문의 등록하기
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 19. 오후 5:34:40
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.mobile
	 * @비고
	 *
	 * </pre>
	*/
	@RequestMapping("/insertOneReg.do")
	public ModelAndView insertOneReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("MOBILE insertOneBoard  START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);
		ModelMap result = new ModelMap();
		ModelAndView mav = new ModelAndView();
		WebSession session = (WebSession) request.getSession().getAttribute("user");
//		if(session != null && session.isLogin()){
//			mav.setViewName("web/main/login");
//		}else{
			mav.setViewName("jsonView");
			try {
				inParam.put("MBER_SEQ", session.getMBER_SEQ());
				result = webBoardService.insertOneReg(inParam);
				mav.addObject("CNT", result.get("CNT"));
			} catch (Exception e) {
				e.printStackTrace();
			}
//		}
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 : 상품 문의시 등록 화면에서 등록 버튼 클릭 시 호출되는 requestMapping 메소드
	 * 설명 : ajax로 호출됨.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28. 오후 3:59:11
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/insertProdQnaReg.do")
	public ModelAndView insertProdQnaReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertProdQnaReg START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		WebSession session = (WebSession)request.getSession().getAttribute("user");

		logger.info("MBER_SEQ[ " + session.getMBER_SEQ() + "]");
		inParam.put("MBER_SEQ", session.getMBER_SEQ());

		ModelAndView mav = new ModelAndView("jsonView");
		int retVal = webBoardService.insertProdQna(inParam);
		//	0: alreay Exist , 1: success , 2:fail

		mav.addObject("data", retVal);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertProdQnaReg END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 상품 후기 목록 조회
	 * 설명
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 1. 오후 5:25:47
	 * @author WOOK.KIM
	 * @see com.ssocio.sharing.controller.mobile
	 * </pre>
	 */
	@RequestMapping("/selectListReview.do")
	public ModelAndView selectListReview(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListReview START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView("web/board/selectListReview");

		String prodCode = StringUtil.nvl((String)request.getParameter("PROD_CODE"));
		int curPage = StringUtil.nvlInt((String)request.getParameter("CUR_PAGE"), 1);
//		int totCnt = StringUtil.nvlInt((String)request.getParameter("TOT_CNT"), CmmnCnst.MOBILE_LIST_SIZE);

		mav.addObject("result", webBoardService.selectListReview(prodCode, curPage));
		mav.addObject("inParam", inParam);

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListProdPostScript END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 상품 후기 목록 조회(Ajax)
	 * 설명
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 1. 오후 5:26:04
	 * @author WOOK.KIM
	 * @see com.ssocio.sharing.controller.mobile
	 * </pre>
	 */
	@RequestMapping("/selectListReviewAjax.do")
	public ModelAndView selectListReviewAjax(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListReviewAjax START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView("jsonView");

		String prodCode = StringUtil.nvl((String)request.getParameter("PROD_CODE"));
		int curPage = StringUtil.nvlInt((String)request.getParameter("CUR_PAGE"), 1);
		int totCnt = StringUtil.nvlInt((String)request.getParameter("TOT_CNT"), CmmnCnst.MOBILE_LIST_SIZE);

		mav.addObject("data", webBoardService.selectListReview(prodCode, curPage));

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListReviewAjax END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 상품 후기 조회
	 * 설명
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 1. 오후 5:26:21
	 * @author WOOK.KIM
	 * @see com.ssocio.sharing.controller.mobile
	 * </pre>
	 */
	@RequestMapping("/selectReview.do")
	public ModelAndView selectReview(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectReview START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView("web/board/selectReview");

		WebSession session = (WebSession) request.getSession().getAttribute("user");
		if(session != null && session.getLogin()){
			inParam.put("MBER_SEQ", session.getMBER_SEQ());
		}

		String boardSeq = StringUtil.nvl((String)request.getParameter("BOARD_SEQ"));

		mav.addObject("result", webBoardService.selectReview(boardSeq));
		mav.addObject("inParam", inParam);

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectReview END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 상품 후기 상세
	 * 설명
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 1. 오후 5:26:21
	 * @author JH. PARK
	 * @see com.ssocio.sharing.controller.mobile
	 * </pre>
	 */
	@RequestMapping("/saveProdPostMod.do")
	public ModelAndView saveProdPostMod(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE saveProdPostMod START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView("web/buy/saveProdPostMod");

		WebSession session = (WebSession) request.getSession().getAttribute("user");
		if(session != null && session.getLogin()){
			inParam.put("MBER_EMAIL", session.getMBER_EMAIL());
			inParam.put("MBER_SEQ", session.getMBER_SEQ());
		}

		logger.debug("email : " + inParam.get("MBER_EMAIL").toString());
//		String boardSeq = StringUtil.nvl((String)request.getParameter("BOARD_SEQ"));
//		String ordCd = StringUtil.nvl((String)request.getParameter("ORD_CD"));

//		inParam.put("BOARD_SEQ",boardSeq);
//		inParam.put("ORD_CD",ordCd);

		mav.addObject("result", webBoardService.selectReviewMod(inParam));
		mav.addObject("inParam", inParam);

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE saveProdPostMod END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 : 상품 문의시 호출되는 requestMapping 메소드
	 * 설명 : 문의 유형 코드 목록 조회 후 등록 페이지로 이동시킨다.
	 * @param request : prodCode
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28. 오후 3:58:03
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/insertProdQna.do")
	public ModelAndView insertProdQna(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertProdQna START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		ModelAndView mav = new ModelAndView("web/board/insertProdQna");
		mav.addObject("result", webBoardService.selectListTypeCd(CmmnCnst.qnaTypeCd));
		mav.addObject("inParam", inParam);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertProdQna END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 게시글 신고 페이지로 이동
	 * 설명
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 1. 오후 5:34:02
	 * @author WOOK.KIM
	 * @see com.ssocio.sharing.controller.mobile
	 * </pre>
	 */
	@RequestMapping("/insertSuspect.do")
	public ModelAndView insertSuspect(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertSuspectInfo START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		ModelAndView mav = new ModelAndView("web/board/insertSuspect");
		mav.addObject("result", webBoardService.selectListTypeCd(CmmnCnst.suspectGbCd));
		mav.addObject("inParam", inParam);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertSuspectInfo END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 신고 게시글 등록
	 * 설명
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 1. 오후 5:34:17
	 * @author WOOK.KIM
	 * @see com.ssocio.sharing.controller.mobile
	 * </pre>
	 */
	@RequestMapping("/insertSuspectRegAjax.do")
	public ModelAndView insertSuspectRegAjax(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertSuspectRegAjax START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		WebSession session = (WebSession)request.getSession().getAttribute("user");

		logger.info("MBER_SEQ[ " + session.getMBER_SEQ() + "]");
		inParam.put("MBER_SEQ", session.getMBER_SEQ());

		ModelAndView mav = new ModelAndView("jsonView");
		int retVal = webBoardService.insertSuspect(inParam);
		//	0: alreay Exist , 1: success , 2:fail
		mav.addObject("data", retVal);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertSuspectRegAjax END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}







	/**
	 *
	 * <pre>
	 * 설명 : 댓글 목록 조회 시 호출되는 requestMapping 메소드
	 * 설명 : 기존 댓글 목록 조회 후 등록 페이지로 이동시킨다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28. 오후 3:59:47
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/selectListComment.do")
	public ModelAndView selectListComment(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListReview START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView("web/board/selectListComment");

		String prodCode = StringUtil.nvl((String)request.getParameter("PROD_CODE"));
		int curPage = StringUtil.nvlInt((String)request.getParameter("CUR_PAGE"), 1);
		int totCnt = StringUtil.nvlInt((String)request.getParameter("TOT_CNT"), CmmnCnst.MOBILE_LIST_SIZE);

		mav.addObject("result", webBoardService.selectListComment(prodCode, totCnt, curPage));
		mav.addObject("inParam", inParam);

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListProdPostScript END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 : 댓글 목록 조회 시 호출되는 requestMapping 메소드
	 * 설명 : 기존 댓글 목록 조회 후 등록 페이지로 이동시킨다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28. 오후 3:59:47
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/selectListCommentNext.do")
	public ModelAndView selectListCommentNext(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListCommentNext START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView("jsonView");

		String prodCode = StringUtil.nvl((String)request.getParameter("PROD_CODE"));
		int curPage = StringUtil.nvlInt((String)request.getParameter("CUR_PAGE"), 1);
		int totCnt = StringUtil.nvlInt((String)request.getParameter("TOT_CNT"), CmmnCnst.MOBILE_LIST_SIZE);

		mav.addObject("result", webBoardService.selectListComment(prodCode, totCnt, curPage));
		mav.addObject("inParam", inParam);

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListCommentNext END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 : 댓글 입력하기 클릭 시 호출되는 requestMapping 메소드
	 * 설명 : 기존 댓글 목록 조회 후 등록 페이지로 이동시킨다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28. 오후 3:59:47
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/insertComment.do")
	public ModelAndView insertComment(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertComment START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		String prodCode = StringUtil.nvl((String)request.getParameter("PROD_CODE"));
		int curPage = StringUtil.nvlInt((String)request.getParameter("CUR_PAGE"), 1);
		int totCnt = StringUtil.nvlInt((String)request.getParameter("TOT_CNT"), CmmnCnst.MOBILE_LIST_SIZE);

		ModelAndView mav = new ModelAndView("web/board/insertComment");
		mav.addObject("result", webBoardService.selectListComment(prodCode, totCnt, curPage));
		mav.addObject("inParam", inParam);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertComment END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 : 댓글 달기 등록 화면에서 등록 버튼 클릭 시 호출되는 requestMapping 메소드
	 * 설명 : 등록 완료 후 상세페이지로 이동한다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28. 오후 4:00:28
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/insertCommentReg.do")
	public ModelAndView insertCommentReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertCommentReg START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		WebSession session = (WebSession)request.getSession().getAttribute("user");

		logger.info("MBER_SEQ[ " + session.getMBER_SEQ() + "]");
		inParam.put("MBER_SEQ", session.getMBER_SEQ());


		ModelAndView mav = new ModelAndView("jsonView");
		int retVal = webBoardService.insertComment(inParam);
		//	0: alreay Exist , 1: success , 2:fail
		mav.addObject("data", retVal);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertCommentReg END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 : 댓글 달기 등록 화면에서 등록 버튼 클릭 시 호출되는 requestMapping 메소드
	 * 설명 : 등록 완료 후 상세페이지로 이동한다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28. 오후 4:00:28
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/insertSellerSuspect.do")
	public ModelAndView insertSellerSuspect(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertSellerSuspect START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		ModelAndView mav = new ModelAndView("web/board/insertSellerSuspect");
		mav.addObject("inParam", inParam);

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertSellerSuspect END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 판매자 신고 등록
	 * 설명
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 6. 오전 10:29:17
	 * @author Kang
	 * @see com.ssocio.sharing.controller.mobile
	 * </pre>
	 */
	@RequestMapping("/insertSellerSuspectRegAjax.do")
	public ModelAndView insertSellerSuspectRegAjax(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertSellerSuspectRegAjax START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		WebSession session = (WebSession)request.getSession().getAttribute("user");

		if(session==null){
			logger.debug("세션이 끊어졌습니다. 로그인 화면으로 이동합니다.");

			String returnUrl = "/mobile/board/insertSellerSuspect.do?";
			return new ModelAndView("redirect:/mobile/main/login.do"+"?ret="+URLEncoder.encode(returnUrl,"UTF-8"));
		}

		logger.info("MBER_SEQ[ " + session.getMBER_SEQ() + "]");
		inParam.put("MBER_SEQ", session.getMBER_SEQ());

		ModelAndView mav = new ModelAndView("jsonView");
		int retVal = webBoardService.insertSellerSuspect(inParam);
		//	0: alreay Exist , 1: success , 2:fail
		mav.addObject("data", retVal);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE insertSellerSuspectRegAjax END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 : 댓글 달기 등록 화면에서 수정 버튼 클릭 시 호출되는 requestMapping 메소드
	 * 설명 : 등록 완료 후 상세페이지로 이동한다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 30. 오후 10:00
	 * @author JH. PARK
	 * @see
	 * </pre>
	 */
	@RequestMapping("/updateCommentMod.do")
	public ModelAndView updateCommentMod(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE updateCommentMod START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		WebSession session = (WebSession)request.getSession().getAttribute("user");

		logger.info("MBER_SEQ[ " + session.getMBER_SEQ() + "]");
		inParam.put("MBER_SEQ", session.getMBER_SEQ());


		ModelAndView mav = new ModelAndView("jsonView");
		int retVal = webBoardService.updateComment(inParam);
		//	0: alreay Exist , 1: success , 2:fail
		mav.addObject("data", retVal);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE updateCommentMod END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}


	/**
	 *
	 * <pre>
	 * 설명 : 댓글 달기 등록 화면에서 수정 버튼 클릭 시 호출되는 requestMapping 메소드
	 * 설명 : 등록 완료 후 상세페이지로 이동한다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 1. 오전 2:55
	 * @author JH. PARK
	 * @see
	 * </pre>
	 */
	@RequestMapping("/deleteProdComment.do")
	public ModelAndView deleteProdComment(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE deleteProdComment START☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);

		WebSession session = (WebSession)request.getSession().getAttribute("user");

		logger.info("MBER_SEQ[ " + session.getMBER_SEQ() + "]");
		inParam.put("MBER_SEQ", session.getMBER_SEQ());


		ModelAndView mav = new ModelAndView("jsonView");
		int retVal = webBoardService.deleteComment(inParam);
		//	0: alreay Exist , 1: success , 2:fail
		mav.addObject("data", retVal);
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE deleteProdComment END☆★☆★☆★☆★☆★☆★☆");

		return mav;
	}


	private void ComCookieCheck(HttpServletRequest request) {
//		Cookie[] cookies = request.getCookies();
	//
//			if (cookies!= null && cookies.length > 0) {
//				for (Cookie cookie : cookies) {
//					System.out.println("@@@@@@@@@@" + cookie.getName());
//					//세션 아이디 받아오기
//					if("JSESSIONID".equals(cookie.getName())){
//						cookies[i].getValue();
//					}
//				}
//		}

		Cookie[] cookies = request.getCookies();
		for (int i = 0; i < cookies.length; i++) {
			System.out.println(cookies[i].getDomain());
			System.out.println(cookies[i].getPath());
			System.out.println(cookies[i].getClass());
			System.out.println(cookies[i].getValue());
		}
	}

	/**
	 *
	 * <pre>
	 * 나눔신청 목록  페이지
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 26. 오전 10:49:46
	 * @author JUNYOUNG.KANG
	 * @see
	 * </pre>
	 */
	@RequestMapping("/selectProdNanum.do")
	public ModelAndView selectProdNanum(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectProd START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView("web/board/selectProdNanum");
		logger.debug("" + !WebCommonUtil.isLogin(request));
		String prodCode = StringUtil.nvl((String)request.getParameter("PROD_CODE"));
		int curPage = StringUtil.nvlInt((String)request.getParameter("CUR_PAGE"), 1);
		int totCnt = StringUtil.nvlInt((String)request.getParameter("TOT_CNT"), 20);


		logger.debug("prodCode : " + prodCode);
		logger.debug("curPage : " + curPage);
		logger.debug("totCnt : " + totCnt);

		try{
			WebSession session = (WebSession)request.getSession().getAttribute("user");
			int mberSeq = WebCommonUtil.isLogin(request) == true ? session.getMBER_SEQ() : -1;

			mav.addObject("result",webBoardService.selectProdNanum(prodCode, totCnt, curPage));
			mav.addObject("inParam", inParam);
		}catch(Exception e){
			logger.error(e.getMessage());

		}
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectProd END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}
	/**
	 *
	 * <pre>
	 * 설명 : 댓글 목록 조회 시 호출되는 requestMapping 메소드
	 * 설명 : 기존 댓글 목록 조회 후 등록 페이지로 이동시킨다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 28. 오후 3:59:47
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/selectListNanumCommentNext.do")
	public ModelAndView selectListNanumCommentNext(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListNanumCommentNext START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView("jsonView");

		String prodCode = StringUtil.nvl((String)request.getParameter("PROD_CODE"));
		int curPage = StringUtil.nvlInt((String)request.getParameter("CUR_PAGE"), 1);
		int totCnt = StringUtil.nvlInt((String)request.getParameter("TOT_CNT"), CmmnCnst.MOBILE_LIST_SIZE);

		logger.info("curPage ::::: " + curPage);
		mav.addObject("result",webBoardService.selectProdNanum(prodCode, totCnt, curPage));
		mav.addObject("inParam", inParam);

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListCommentNext END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}


}
