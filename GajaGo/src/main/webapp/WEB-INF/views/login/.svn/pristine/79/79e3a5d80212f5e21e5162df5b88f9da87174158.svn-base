/**
 ** 
 */
SeltInfo = Class({
	ordCd : '',
	trdGbCd : '',		//	거래구분코드
	trdNo : '',			//	거래번호
	trdAmt : 0,			//	거래금액
	apprDt : '',		//	승인일시
	apprNo : '',		//	승인번호
	freeIntYn : 'N',	//	무이자여부
	easyTerm : 0,		//	할부개월수
	rltCd : '',			//	결과코드
	rltMsg : '',		//	결과메세지
	seltNm : '',		//	결제자
	cardCompNm : '',	//	결제카드명
	cardNo : '',		//	결제카드번호
	payApplyDay : '',	//	결제일
	inputData : '',
	outputData : '',
	reserveOrdNo : '',	// 페이코 전용
	ordNo : '',			// 페이코 전용
	ordCerKey : '',		// 페이코 전용
	billKey : '',
	bankCd : '',
	carrier : '',		// 통신사
	dstAddr : '',		// 결제 전화번호
	
	
	initialize : function(ordCd){
		this.ordCd = ordCd;
	},
	toJsonObject : function(){
		var jsonObj = new Object();
		jsonObj.trdGbCd = this.trdGbCd;
		jsonObj.trdNo = this.trdNo;
		jsonObj.trdAmt = this.trdAmt;
		jsonObj.apprDt = this.apprDt;
		jsonObj.apprNo = this.apprNo;
		jsonObj.freeIntYn = this.freeIntYn;
		jsonObj.easyTerm = this.easyTerm;
		jsonObj.rltCd = this.rltCd;
		jsonObj.rltMsg = this.rltMsg;
		jsonObj.seltNm = this.seltNm;
		jsonObj.cardCompNm = this.cardCompNm;
		jsonObj.cardNo = this.cardNo;
		jsonObj.payApplyDay = this.payApplyDay;
		jsonObj.inputData = this.inputData;
		jsonObj.outputData = this.outputData;
		jsonObj.reserveOrdNo = this.reserveOrdNo;
		jsonObj.ordNo = this.ordNo;
		jsonObj.ordCerKey = this.ordCerKey;
		jsonObj.billKey = this.billKey;
		jsonObj.bankCd = this.bankCd;
		jsonObj.carrier = this.carrier;
		jsonObj.dstAddr = this.dstAddr;
		
		return jsonObj;
	}
});

CpnInfo = Class({
	cpnNo : '',		//	쿠폰번호
	dscntPrce : 0,	//	할인가격
	prodSeq : 0,    //	상품SEQ
	prodCode : '',  //	상품코드
	initialize : function(cpnNo, dscntPrce, prodSeq, prodCode){
		this.cpnNo = cpnNo;
		this.dscntPrce = dscntPrce;
		this.prodSeq = prodSeq;
		this.prodCode = prodCode;
	},	
	toJsonObject : function(){
		var jsonObj = new Object();
		jsonObj.cpnNo = this.cpnNo;
		jsonObj.dscntPrce = this.dscntPrce;
		jsonObj.prodSeq = this.prodSeq;
		jsonObj.prodCode = this.prodCode;

		return jsonObj;
	}
});

DlvInfo = Class({
	ordCd : '',			//	거래구분코드
	rcvNm : '',			//	받는자명
	rcvTel : '',		//	받는자전화번호
	rcvHp : '',			//	받는자휴대폰 번호
	addrGb : '',		//	주소 구분
	zipCd : '',			//	우편번호
	jusoJiben : '',		//	배송지 주소(지번)
	jusoDoro : '',		//	배송지 주소(도로)
	jusoDtl : '',		//	배송지 주소 상세
	dlvMsg : '',		//	배송 메세지
	secuNoUseYn : 'N',	//	안심번호 사용유무
	ansimNo : '',		//	안심번호
	initialize : function(ordCd){
		this.ordCd = ordCd;
	},
	toJsonObject : function(){
		var jsonObj = new Object();
		jsonObj.rcvNm = this.rcvNm;
		jsonObj.rcvTel = this.rcvTel;
		jsonObj.rcvHp = this.rcvHp;
		jsonObj.addrGb = this.addrGb;
		jsonObj.zipCd = this.zipCd;
		jsonObj.jusoJiben = this.jusoJiben;
		jsonObj.jusoDoro = this.jusoDoro;
		jsonObj.jusoDtl = this.jusoDtl;
		jsonObj.dlvMsg = this.dlvMsg;
		jsonObj.secuNoUseYn = this.secuNoUseYn;
		jsonObj.ansimNo = this.ansimNo; 
		
		return jsonObj;
	}
});

Seller = Class({
	mberSeq : '',
	dlvGrpProdSeq : '',
	prods : null,
	extLandCd : '99',
	initialize : function(mberSeq, dlvGrpProdSeq){
		this.mberSeq = mberSeq;
		this.dlvGrpProdSeq = dlvGrpProdSeq;
		this.prods = new Array();
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 묶음 배송하기 위한 배송지별 소팅
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */
	bubble : function(ordCd, cnt){
		var temp = null;
		for(var i=0 ; i<this.prods.length ; i++){
			for( var j=0 ; j<(this.prods.length - 1) ; j++){
				if( nvlInt(this.prods[j].dlv.dlvGrpProdSeq, 0) > nvlInt(this.prods[j+1].dlv.dlvGrpProdSeq, 0)){
					temp = this.prods[j];
					this.prods[j] = this.prods[j+1];
					this.prods[j+1] = temp;
				}
			}
		}
		
		var temp = '';
		for(var i=0 ; i<this.prods.length ; i++){
			var seq = this.prods[i].dlv.dlvGrpProdSeq;
			if( seq == '' ){
				this.prods[i].dlv.dlvGrpCode = ordCd + this._getDlvSeq(++cnt);
			}
			else{
				if(temp != seq){
					this.prods[i].dlv.dlvGrpCode = ordCd + this._getDlvSeq(++cnt);
					temp = seq;
				}
				else{
					this.prods[i].dlv.dlvGrpCode = ordCd + this._getDlvSeq(cnt);
				}
			} 
		}
		return cnt;
	},
	setExtLand : function(extLandCd){
		this.extLandCd = extLandCd;
		for( var i=0 ; i<this.prods.length ; i++){
			this.prods[i].setExtLand(extLandCd);
		}
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 상품금액
	 * 설명 묶음 상품에 대한 상품금액
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */	
	getAmount : function(){
		var amount = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].isUsable){
				amount += this.prods[i].getAmount();
			}
		}
		return amount;
	},
	getDeposit : function(){
		var amount = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].isUsable){
				amount += this.prods[i].getDeposit();
			}
		}
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 상품개수
	 * 설명 묶음 상품에 대한 상품개수
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getAccount : function(){
		var account = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].isUsable){
				account += this.prods[i].getAccount();
			}
		}
		return account;
	},
	accountText : function(){
		return '구매수량 ' + formatNumber(this.getAccount()) + '개 | 상품금액 ' +  formatNumber(this.getAmount()) + '원 | ' + this.getDlvAmountText();
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 상품개수
	 * 설명 묶음 상품에 대한 배송비
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getDlvAmount : function(){
		var amount = 0;
		var len = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].isUsable){
				len++;
			}
		}
		var isBand = len > 1 ? true : false;
		var isDlvStandYn = false;
		var prod = null;

		for(var i=0 ; i<this.prods.length ; i++){
			prod = this.prods[i];
			if( this.prods[i].isUsable){
				isDlvStandYn = this.prods[i].isDlvStand();
				if( isDlvStandYn == true || prod.dlv.dlvPayGbCd == '1'){
					amount = 0;
					break;
				}
				
				if( isBand ){
					if( i==0){
						amount = prod.getDlvAmount();
					}
					else{
						if(amount > prod.getDlvAmount()){
							amount = prod.getDlvAmount();
						}
					}
				}
				else{
					amount = prod.getDlvAmount();
				}
			}
		}
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 추가배송비
	 * 설명 묶음 상품에 대한 상품개수
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getDlvExtAmount : function(){
		var amount = 0;
		var len = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].isUsable){
				len++;
			}
		}
		
		var isBand = len > 1 ? true : false;;
		var isDlvStandYn = false;
		var tmpDlvExtAmount = 0;
		var prod = null;

		for(var i=0 ; i<this.prods.length ; i++){
			prod = this.prods[i];
			if( prod.isUsable){
				
				amount = prod.getDlvExtAmount();
				
				/*
				tmpDlvExtAmount += prod.getDlvExtAmount();
				if(0<prod.getDlvExtAmount()){
					amount += tmpDlvExtAmount;
				}else{
					isDlvStandYn = prod.isDlvStand();
					if( isDlvStandYn == true || prod.dlv.dlvPayFCd == '20'){
						amount += 0;
						break;
					}
					
					if( isBand ){
						if( i==0){
							amount += tmpDlvExtAmount;
						}
						else{
							if(amount > tmpDlvExtAmount){
								amount += tmpDlvExtAmount;
							}
						}
					}
					else{
						amount += tmpDlvExtAmount;
					}
				}
				*/
			}
		}
		
		return amount;
	},	
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 상품개수
	 * 설명 묶음 상품에 대한 배송비 영역 텍스트
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */	
	getDlvAmountText : function(){
		var amount = 0;
		var text = '';
		var len = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].isUsable){
				len++;
			}
		}
		var isBand = len > 1 ? true : false;
		var isDlvStandYn = false;
		var prod = null;
		
		for(var i=0 ; i<this.prods.length ; i++){
			prod = this.prods[i];
			if( this.prods[i].isUsable){
				isDlvStandYn = this.prods[i].isDlvStand();
				if( isDlvStandYn == true){
					break;
				}
			}
		}
		
		amount = this.getDlvAmount();
		
		switch(prod.dlv.dlvWayCd){
		case '1':
		case '2':
			if(prod.dlv.dlvPayGbCd == '1'){
				text = '배송비 무료';
				text += isBand == true ? '(묶음배송)' : '';
			}
			else{
				if( prod.dlv.dlvPayFCd == '10'){
					text = '배송비 ' + formatNumber(amount) + '원';
				}
				else{
					text = '배송비 착불';
				}
				
				if( isBand ){
					if( isDlvStandYn){
						text += '(묶음배송' + ' | ' + formatNumber(prod.dlv.dlvStandAmt) + '원 이상 무료)';
					}
					else{
						text += '(묶음배송)';
					}
				}
				else{
					if( isDlvStandYn){
						text += '';
						// text += '(' + formatNumber(prod.dlv.dlvStandAmt) + '원 이상 무료)';
					}
				}
			}
			break;
		case '3':	//	우편/등기
			text = '배송비 0원';
			break;
		case '4':	//	퀵서비스
			if( prod.dlv.dlvPayGbCd == '1'){
				text = '배송비 0원';
			}
			else{
				text = '배송비 0원';
			}
			break;
		case '5':	//	직거래
			text = '배송비 0원';
			break;
		case '6':	//	배송 불필요
			break;
		}
		return text;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 쿠폰사용 금액
	 * 설명 상품에 대한 쿠폰 금액(묶음 여부와 상관 없음)
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getCpnAmount : function(){
		var amount = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			var prod = this.prods[i];
			if( this.prods[i].isUsable){
				if( prod.coupon != null ){
					amount += prod.getCpnAmount()
				}
			}
		}
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 주문 금액
	 * 설명 묶음 상품에 대한 주문 금액
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getTotalAmount : function(){
		var amount = 0;
		amount += this.getAmount();
		amount += this.getDlvAmount();
		amount -= this.getCpnAmount();
		return amount;
	},
	_getDlvSeq : function(seq){
		var ret = '';
		if(seq >= 1000){
			ret = '' + seq;
		}
		else if( seq >= 100 && seq < 1000){
			ret = '0' + seq;
		}
		else if( seq >= 10 && seq < 100){
			ret = '00' + seq;
		}
		else{
			ret = '000' + seq;
		}
		
		return ret;
	}
});
/**
 * 
 * <pre>
 * 설명 : prodContainer 객체
 * 설명 : 상품 목록에 대한 처리를 담당한다.
 * @param prods 		: Product객체를 담을 collection 객체
 * @param area 			: display할 영역의 parent 객체
 * @date 2015. 8. 25. 오후 17:42:41
 * @author WOOK.KIM
 * @see
 * </pre>
 */
Order = Class({
	prodTypeCd : '',
	ordCd : '',				//	주문 코드
	seltGbCd : '',			//	결제방법 코드(1:신용카드, 3:휴대폰결제, 2:자동이체, 4:payco
	mberSeq : '',			//	회원고유번호
	realSeltAmt : 0,		//	실결제금액
	ordAmt : 0,				//	주문금액
	dscntBfOrdAmt : 0,		//	할인전주문금액
	dscntAmt : 0,			//	할인금액
	ordStatCd : '20',		//	주문상태코드
	pointUseAmt	: 0,		//	포인트 사용금액
	cpnUseAmt : 0,			//	쿠폰 사용금액
	dlvSeltAmt : 0,			//	배송비결제금액
	totOrdQty : 0,			//	총주문수량
	totOrdProdCnt : 0,		//	총주문상품건수
	seltInfo : null,		//	결제 정보
	dlvInfo : null,			//	배송지 정보
	prods : null,			//	결제 상품목록
	sellers : null,			//	셀러 목록
	dscntCpnProdAmt : 0,    //  쿠폰상품할인가격 
	dscntCpnDlvAmt : 0,     //  쿠폰배송비할인가격
	cpn : null,             //  쿠폰정보
	initialize : function(ordCd){
		this.ordCd = ordCd;
		this.seltInfo = new SeltInfo(ordCd);
		this.dlvInfo = new DlvInfo(ordCd);
		this.prods = new Array();
		this.sellers = new Array();
		this.cpn = new Array();
		this.extLandCd = '99';
	},
	add : function(prod){
		this.prods.push(prod);
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 상품 타입 세팅
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */	
	setProdTypeCd : function(prodTypeCd){
		this.prodTypeCd = prodTypeCd;
	},
	setExtLand : function(extLand){
		for(var i=0 ; i<this.sellers.length ; i++){
			this.sellers[i].setExtLand(extLand);
			this.extLandCd = extLand;
		}
	},
	//#################################################################################
	//	묶음 프로세스 시작
	//#################################################################################	
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 묶음 가능 상품 세팅
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */	
	setDlvBand : function(){
		for(var i=0 ; i<this.prods.length ; i++){
			this._addSellers(this.prods[i].mberSeq, this.prods[i]);
		}
		
		var cnt = 0;
		for( var i=0 ; i<this.sellers.length ; i++){
			cnt = this.sellers[i].bubble(this.ordCd, cnt);
		}
		
		this._sortProd();
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 묶음 배송하기 위한 seller 추가
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	_addSellers : function(mberSeq, obj){
		var seller = this._isExistMber(mberSeq, obj.dlv.dlvGrpProdSeq);
		if( seller != null && obj.dlv.bndlDlvYn == 'Y'){
			seller.prods.push(obj);
		}
		else{
			var temp = new Seller(mberSeq, obj.dlv.dlvGrpProdSeq);
			temp.prods.push(obj);
			this.sellers.push(temp);
		}
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 쿠폰정보를 등록한다.
	 * @param 
	 * @returns 
	 * @see js/web
	 * </pre>
	 */	
	_addCpnInfo : function(cpnNo, dscntprce, prodseq, prodcode){
		var temp = new CpnInfo(cpnNo, dscntprce, prodseq, prodcode);
		this.cpn.push(temp.toJsonObject());
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 묶음 배송하기 위한 seller에 추가되어 있는지 판단
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	_isExistMber : function(mberSeq, dlvGrpProdSeq){
		var seller = null;
		for( var i=0 ; i<this.sellers.length ; i++){
			if( mberSeq == this.sellers[i].mberSeq && dlvGrpProdSeq == this.sellers[i].dlvGrpProdSeq){
				seller = this.sellers[i];
				break;
			}
		}
		return seller;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 seller에서 정렬된 product를 다시 prods에 넣는다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	_sortProd : function(){
		this.prods.splice(0, this.prods.length);
		for( var i=0 ; i<this.sellers.length ; i++){
			for( var j=0 ; j<this.sellers[i].prods.length ; j++){
				this.prods.push(this.sellers[i].prods[j]);
			}
		}
	},
	//#################################################################################
	//	묶음 프로세스 끝
	//#################################################################################
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 prodCode로 product 객체를 찾는다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */
	getProd : function(prodCode){
		var prod = null;
		for( var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].prodCode == prodCode){
				prod = this.prods[i];
				break;
			}
		}
		return prod;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 prodCode로 product 객체의 배열 순서를 찾는다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */	
	getProdIndex : function(prodCode){
		var index = 0;
		for( var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].prodCode == prodCode){
				index = i;
				break;
			}
		}
		return index;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 dlvGrpCode로 seller 객체를 찾는다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getSeller : function(dlvGrpCode){
		var seller = null;
		for( var i=0 ; i<this.sellers.length ; i++){
			for(var j=0 ; j<this.sellers[i].prods.length ; j++){
				if(this.sellers[i].prods[j].dlv.dlvGrpCode == dlvGrpCode){
					seller = this.sellers[i];
					break;
				}
			}
		}
		return seller;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 dlvGrpCode로 seller 객체의 배열 순서를 찾는다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getSellerIndex : function(dlvGrpCode){
		var index = 0;
		var tempCode = '';
		for( var i=0 ; i<this.sellers.length ; i++){
			for(var j=0 ; j<this.sellers[i].prods.length ; j++){
				if(this.sellers[i].prods[j].dlv.dlvGrpCode == dlvGrpCode){
					break;
				}
				else{
					if( tempCode != this.sellers[i].prods[j].dlv.dlvGrpCode){
						tempCode = this.sellers[i].prods[j].dlv.dlvGrpCode;
						index++;
					}
				};
			}
		}
		return index;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 주문서의 총 상품의 상품 금액을 리턴한다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getOrdAmount : function(){
		var amount = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].isUsable ){
				amount += this.prods[i].getAmount();
			}
		}
		
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 주문서의 총 상품의 셰어링 보증 금액을 리턴한다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getOrdDeposit : function(){
		var amount = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			amount += this.prods[i].getDeposit();
		}
		
		return amount;
	},
	getOrdSharPrce : function(){
		var amount = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			amount += this.prods[i].getSharPrce();
		}
		
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 주문서의 할인 금액을 리턴한다.(쿠폰 + 포인트)
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */	
	getDiscountAmount : function(){
		var amount = 0;
		amount += this.getCpnAmount();
		amount += this.pointUseAmt;
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 주문 상품의 총 배송비를 리턴한다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getDlvAmount : function(){
		var amount = 0;
		
		for(var i=0 ; i<this.sellers.length ; i++){
			amount += this.sellers[i].getDlvAmount();
		}
		
		//amount -= this.dscntCpnDlvAmt;
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 주문 상품의 추가 배송비를 리턴한다.
	 * @param 
	 * @returns 
	 * @date 2015. 11. 09. 오후 9:10:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */
	getDlvExtAmount : function(){
		var amount = 0;

		for(var i=0 ; i<this.sellers.length ; i++){
			amount += this.sellers[i].getDlvExtAmount(this.extLandCd);
		}
		
		//amount -= this.dscntCpnDlvAmt
		
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 주문 상품의 총 쿠폰 사용 금액을 리턴한다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getCpnAmount : function(){
		return this.dscntCpnProdAmt + this.dscntCpnDlvAmt;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 주문 상품 개수를 리턴한다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getAccount : function(){
		var account = 0;
		for(var i=0 ; i<this.prods.length ; i++){
			account += this.prods[i].getAccount();
		}
		
		return account;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 총 결제 금액
	 * 설명 주문금액 + 배송비 - 쿠폰 사용 금액 - 포인트 사용금액
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getTotalAmount : function(extLandCd){
		var amount = 0;
		amount += this.getOrdAmount();
		if( extLandCd == '99'){
			amount += this.getDlvAmount();
		}
		else{
			amount += this.getDlvExtAmount();
		}
		
		amount -= this.getCpnAmount();
		amount -= this.pointUseAmt;
		
		return amount < 0 ? 0 : amount;
	},
	//#################################################################################
	//	셰어링 관련 시작
	//#################################################################################	
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 셰어링 상품의 보증금 금액을 리턴한다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getDeposit : function(){
		var amount = 0;
		for(var i=0 ; i<this.sellers.length ; i++){
			amount += this.sellers[i].shar.deposit;
		}
		
		return amount;
	},
	/**
	 * 
	 * <pre>
	 * 설명 주문서
	 * 설명 셰어링 상품의 셰어링 금액을 리턴한다.
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */		
	getSharPrce : function(){
		var amount = 0;
		for(var i=0 ; i<this.sellers.length ; i++){
			amount += this.sellers[i].shar.deposit;
		}
		
		return amount;
	},
	//#################################################################################
	//	셰어링 관련 끝
	//#################################################################################
	/**
	 * 
	 * <pre>
	 * 설명 주문서 > 쿠폰 선택 
	 * 설명 쿠폰 선택 후 선택 된 쿠폰이 사용 가능한지 판단하는 메소드
	 * @param 
	 * @returns 
	 * @date 2015. 10. 24. 오후 3:52:05
	 * @author WOOK.KIM
	 * @see js/web
	 * </pre>
	 */
	getCouponStatus : function(prodCode, coupon){
		var status = CPN_STAT_NONE;
		for(var i=0 ; i<this.prods.length ; i++){
			if(this.prods[i].prodCode == prodCode ){
				status = this.prods[i].getCouponStatus(coupon);
				if( status != CPN_STAT_NONE){
					break;
				}
			}
		}
		
		return status;
	},
	makeOrdInfo : function(seltGbCd, extLandCd){
		var jsonObj = new Object();
		jsonObj.ordCd = this.ordCd;
		jsonObj.seltGbCd = seltGbCd;
		jsonObj.realSeltAmt = this.getTotalAmount(extLandCd);
		jsonObj.ordAmt = this.getOrdAmount() - this.getDiscountAmount();
		jsonObj.dscntBfOrdAmt = this.getOrdAmount();
		jsonObj.dscntAmt = this.getDiscountAmount();
		jsonObj.ordStatCd = '20';
		jsonObj.pointUseAmt = this.pointUseAmt;
		jsonObj.cpnUseAmt = this.getCpnAmount();
		jsonObj.dscntCpnProdAmt = this.dscntCpnProdAmt;
		jsonObj.dscntCpnDlvAmt = this.dscntCpnDlvAmt;
		if(extLandCd == '99'){
			jsonObj.dlvSeltAmt = this.getDlvAmount();
		}
		else{
			jsonObj.dlvSeltAmt = this.getDlvExtAmount();
		}
		jsonObj.totOrdQty = this.getAccount();
		jsonObj.totOrdProdCnt = this.prods.length;
		
		jsonObj.seltInfo = this.seltInfo.toJsonObject();
		
		//	배송지 세팅
		jsonObj.dlvInfo = this.dlvInfo.toJsonObject();
		
		var ordArray = new Array();

		for(var i=0 ; i<this.prods.length ; i++){
			if( this.prods[i].isUsable){
				ordArray.push(this.prods[i].toJSONObject());	
			}
		}
		
		jsonObj.prods = ordArray;

		var cpnArray = new Array();
		for(var i=0 ; i<this.cpn.length ; i++){
			cpnArray.push(this.cpn[i]);
		}

		jsonObj.cpn = cpnArray;
		
		return jsonObj;
	}
});




