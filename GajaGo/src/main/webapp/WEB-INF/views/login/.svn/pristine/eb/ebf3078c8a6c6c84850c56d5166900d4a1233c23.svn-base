package com.ssocio.sharing.dao.seller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 설명
 * 설명
 * @author J.K.CHOI
 * @version
 * @since 2015. 7. 21. 오후 7:41:45
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 21.	|	J.K.CHOI	|신규
 * @비고
 * </pre>
 */
@Component
public class SellerAdjustDao {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerAdjustDao.class);
	
	/* --------------------------------------------------------------------------
		# sqlSession 설정
		 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
		 -- 하나만 사용할 경우 @Autowired
	   --------------------------------------------------------------------------*/
	@Resource(name="sqlSessionSeller")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * 정산완료 전체정산 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object> selectCpltAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCpltAdjust Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectCpltAdjust", inParam);
		} catch (Exception e) {
			logger.error("selectCpltAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	 }
		
	/**
	 * <pre>
	 * 정산완료 전체정산 정산금액, 판매자수 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object>  selectCpltAmtCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCpltAmtCnt Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectCpltAmtCnt", inParam);
		} catch (Exception e) {
			logger.error("selectCpltAmtCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
		
	/**
	 * <pre>
	 * 정산완료 판매정산 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object> selectCpltSellAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCpltSellAdjust Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectCpltSellAdjust", inParam);
		} catch (Exception e) {
			logger.error("selectCpltSellAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * <pre>
	 * 정산완료 판매정산 정산금액, 판매자수 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object>  selectCpltSellAmtCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCpltSellAmtCnt Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectCpltSellAmtCnt", inParam);
		} catch (Exception e) {
			logger.error("selectCpltSellAmtCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
		
	/**
	 * <pre>
	 * 정산완료 셰어링정산  조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object> selectCpltShareAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCpltShareAdjust Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectCpltShareAdjust", inParam);
		} catch (Exception e) {
			logger.error("selectCpltShareAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * <pre>
	 * 정산완료 셰어링정산 정산금액, 판매자수 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object>  selectCpltShareAmtCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCpltShareAmtCnt Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectCpltShareAmtCnt", inParam);
		} catch (Exception e) {
			logger.error("selectCpltShareAmtCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
		
	/**
	 * <pre>
	 * 정산완료 판매정산 상세리스트 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 29. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public List<Map<String, Object>> selectCpltDtlListSellAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCpltDtlListSellAdjust Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerAdjustMapper.selectCpltDtlListSellAdjust", inParam);
		} catch (Exception e) {
			logger.error("selectCpltDtlListSellAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }
	
	/**
	 * <pre>
	 * 정산완료 셰어링정산 상세리스트 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 29. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public List<Map<String, Object>> selectCpltDtlListShareAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectCpltDtlListShareAdjust Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerAdjustMapper.selectCpltDtlListShareAdjust", inParam);
		} catch (Exception e) {
			logger.error("selectCpltDtlListShareAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	   * <pre>
	   * 정산완료 판매정산 상세 리스트 카운트 조회
	   * 
	   * @param inParam
	   * @return
	   * @throws Exception
	   * @date 2015. 7. 29. 오후 2:10:39
	   * @author J.K.CHOI
	   * @see com.ssocio.sharing.dao.seller
	   * </pre>
	   */
	  public int selectCpltDtlListSellAdjustCount(Map<String, Object> inParam) throws Exception{
		  // // ------------------------------------------------------------------------
		  // # 시작로그
		  // ------------------------------------------------------------------------
		  logger.info("selectCpltDtlListSellAdjustCount Start");
		  int count= 0;
		  try {
			  count = sqlSession.selectOne("sellerAdjustMapper.selectCpltDtlListSellAdjustCount", inParam);
		  }catch (Exception e) {
			  logger.error("selectCpltDtlListSellAdjustCount DB Error : " + e.toString());
			  throw new Exception(RspnsCnst.RC1000000004);
		  }
		  return count;
	  }
  
	  /**
	   * <pre>
	   * 정산완료 셰어링정산 상세 리스트 카운트 조회
	   * 
	   * @param inParam
	   * @return
	   * @throws Exception
	   * @date 2015. 7. 29. 오후 2:10:39
	   * @author J.K.CHOI
	   * @see com.ssocio.sharing.dao.seller
	   * </pre>
	   */
	  public int selectCpltDtlListShareAdjustCount(Map<String, Object> inParam) throws Exception{
		  // // ------------------------------------------------------------------------
		  // # 시작로그
		  // ------------------------------------------------------------------------
		  logger.info("selectCpltDtlListShareAdjustCount Start");
		  int count= 0;
		  try {
			  count = sqlSession.selectOne("sellerAdjustMapper.selectCpltDtlListShareAdjustCount", inParam);
		  }catch (Exception e) {
			  logger.error("selectCpltDtlListShareAdjustCount DB Error : " + e.toString());
			  throw new Exception(RspnsCnst.RC1000000004);
		  }
		  return count;
	  }

	  /**
	   * <pre>
	   * 정산대기 판매정산 리스트 카운트 조회
	   * 
	   * @param inParam
	   * @return
	   * @throws Exception
	   * @date 2015. 7. 28. 오후 2:10:39
	   * @author J.K.CHOI
	   * @see com.ssocio.sharing.dao.seller
	   * </pre>
	   */
	  public int selectSellAdjustCount(Map<String, Object> inParam) throws Exception{
		  // // ------------------------------------------------------------------------
		  // # 시작로그
		  // ------------------------------------------------------------------------
		  logger.info("selectListSellAdjustCount Start");
		  int count= 0;
		  try {
			  count = sqlSession.selectOne("sellerAdjustMapper.selectListSellAdjustCount", inParam);
		  }catch (Exception e) {
			  e.printStackTrace();
			  logger.error("selectListSellAdjustCount DB Error : " + e.toString());
			  throw new Exception(RspnsCnst.RC1000000004);
		  }
		  return count;
	  }

	/**
	 * <pre>
	 * 정산대기 판매정산 리스트 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object> selectSellAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
	// # 시작로그
	// ------------------------------------------------------------------------
	logger.info("selectSellAdjust Start");
	Map<String, Object> sellAdjMap = null;
	try {
		sellAdjMap =  sqlSession.selectOne("sellerAdjustMapper.selectSellAdjust", inParam);
	} catch (Exception e) {
		logger.error("selectSellAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return sellAdjMap;
	}

	/**
	 * <pre>
	 * 정산대기리스트 판매정산 정산금액, 판매자수 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object>  selectSellAmtCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellAmtCnt Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectSellAmtCnt", inParam);
		} catch (Exception e) {
			logger.error("selectSellAmtCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 정산대기 셰어링정산 리스트 카운트 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public int selectShareAdjustCount(Map<String, Object> inParam) throws Exception{
		// // ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListShareAdjustCount Start");
		int count= 0;
		try {
			count = sqlSession.selectOne("sellerAdjustMapper.selectShareAdjustCount", inParam);
		}catch (Exception e) {
			e.printStackTrace();
			logger.error("selectShareAdjustCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

  /**
	 * <pre>
	 * 정산대기 셰어링정산 상세조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 29. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object>  selectShareAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectShareAdjust Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectShareAdjust", inParam);
		} catch (Exception e) {
			logger.error("selectShareAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 정산대기리스트 셰어링정산 정산금액, 판매자수 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object>  selectShareAmtCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectShareAmtCnt Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectShareAmtCnt", inParam);
		} catch (Exception e) {
			logger.error("selectShareAmtCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	 * <pre>
	 * 정산대기 전체정산 리스트 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object> selectAdjust(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectAdjust Start");
		Map<String, Object> adjMap = null;
		try {
			adjMap = sqlSession.selectOne("sellerAdjustMapper.selectAdjust", inParam);
		} catch (Exception e) {
			logger.error("selectAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return adjMap;
	 }

	/**
	 * <pre>
	 * 정산대기리스트 전체정산 정산금액, 판매자수 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 28. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.seller
	 * </pre>
	 */
	public Map<String, Object>  selectAmtCnt(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectAmtCnt Start");
		Map<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("sellerAdjustMapper.selectAmtCnt", inParam);
		} catch (Exception e) {
			logger.error("selectAmtCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}

	/**
	   * <pre>
	   * 정산대기 셰어링정산 상세 리스트 카운트 조회
	   * 
	   * @param inParam
	   * @return
	   * @throws Exception
	   * @date 2015. 7. 29. 오후 2:10:39
	   * @author J.K.CHOI
	   * @see com.ssocio.sharing.dao.seller
	   * </pre>
	   */
	  public int selectDtlListShareAdjustCount(Map<String, Object> inParam) throws Exception{
		  // // ------------------------------------------------------------------------
		  // # 시작로그
		  // ------------------------------------------------------------------------
		  logger.info("selectDtlListShareAdjustCount Start");
		  int count= 0;
		  try {
			  count = sqlSession.selectOne("sellerAdjustMapper.selectDtlListShareAdjustCount", inParam);
		  }catch (Exception e) {
			  logger.error("selectDtlListShareAdjustCount DB Error : " + e.toString());
			  throw new Exception(RspnsCnst.RC1000000004);
		  }
		  return count;
	  }

	  /**
		 * <pre>
		 * 정산대기 셰어링정산 상세리스트 조회
		 * 
		 * @param inParam
		 * @return
		 * @throws Exception
		 * @date 2015. 7. 29. 오후 2:10:39
		 * @author J.K.CHOI
		 * @see com.ssocio.sharing.dao.seller
		 * </pre>
		 */
		public List<Map<String, Object>> selectDtlListShareAdjust(Map<String, Object> inParam) throws Exception {
			// ------------------------------------------------------------------------
			// # 시작로그
			// ------------------------------------------------------------------------
			logger.info("selectDtlListShareAdjust Start");
			List<Map<String, Object>> list = null;
			try {
				list =  sqlSession.selectList("sellerAdjustMapper.selectDtlListShareAdjust", inParam);
			} catch (Exception e) {
				logger.error("selectDtlListShareAdjust DB Error : " + e.toString());
				throw new Exception(RspnsCnst.RC1000000004);
			}
			return list;
		}

		/**
		 * <pre>
		 * 정산대기 판매정산 상세리스트 조회
		 * 
		 * @param inParam
		 * @return
		 * @throws Exception
		 * @date 2015. 7. 29. 오후 2:10:39
		 * @author J.K.CHOI
		 * @see com.ssocio.sharing.dao.admin
		 * </pre>
		 */
		public List<Map<String, Object>> selectDtlListSellAdjust(Map<String, Object> inParam) throws Exception {
			// ------------------------------------------------------------------------
			// # 시작로그
			// ------------------------------------------------------------------------
			logger.info("selectDtlListSellAdjust Start");
			List<Map<String, Object>> list = null;
			try {
				list =  sqlSession.selectList("sellerAdjustMapper.selectDtlListSellAdjust", inParam);
			} catch (Exception e) {
				logger.error("selectDtlListSellAdjust DB Error : " + e.toString());
				throw new Exception(RspnsCnst.RC1000000004);
			}
			return list;
		 }

	/**
	   * <pre>
	   * 정산대기 판매정산 상세 리스트 카운트 조회
	   * 
	   * @param inParam
	   * @return
	   * @throws Exception
	   * @date 2015. 7. 29. 오후 2:10:39
	   * @author J.K.CHOI
	   * @see com.ssocio.sharing.dao.admin
	   * </pre>
	   */
	  public int selectDtlListSellAdjustCount(Map<String, Object> inParam) throws Exception{
		  // // ------------------------------------------------------------------------
		  // # 시작로그
		  // ------------------------------------------------------------------------
		  logger.info("selectDtlListSellAdjustCount Start");
		  int count= 0;
		  try {
			  count = sqlSession.selectOne("sellerAdjustMapper.selectDtlListSellAdjustCount", inParam);
		  }catch (Exception e) {
			  logger.error("selectDtlListSellAdjustCount DB Error : " + e.toString());
			  throw new Exception(RspnsCnst.RC1000000004);
		  }
		  return count;
	  }
		
}
