package com.ssocio.sharing.dao.admin;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 설명
 * 설명
 * @author J.K.CHOI
 * @version
 * @since 2015. 7. 31. 오후 7:41:45
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 31.	|	J.K.CHOI	|신규
 * @비고
 * </pre>
 */
@Component
public class AdminPolicyDao {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminPolicyDao.class);
	
	/* --------------------------------------------------------------------------
		# sqlSession 설정
		 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
		 -- 하나만 사용할 경우 @Autowired
	   --------------------------------------------------------------------------*/
	@Resource(name="sqlSessionAdmin")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * 게시글관리 리스트 조회
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 2:10:39
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectListPolicy(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListPolicy Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("adminPolicyMapper.selectListPolicy", inParam);
		} catch (Exception e) {
			logger.error("selectListPolicy DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }
	
	  /**
	   * <pre>
	   * 리스트 카운트 조회
	   * 
	   * @param inParam
	   * @return
	   * @throws Exception
	   * @date 2015. 7. 31. 오후 2:10:39
	   * @author J.K.CHOI
	   * @see com.ssocio.sharing.dao.admin
	   * </pre>
	   */
	  public int selectListPolicyCount(Map<String, Object> inParam) throws Exception{
		  // // ------------------------------------------------------------------------
		  // # 시작로그
		  // ------------------------------------------------------------------------
		  logger.info("selectListPolicyCount Start");
		  int count= 0;
		  try {
			  count = sqlSession.selectOne("adminPolicyMapper.selectListPolicyCount", inParam);
		  }catch (Exception e) {
			  logger.error("selectListPolicyCount DB Error : " + e.toString());
			  throw new Exception(RspnsCnst.RC1000000004);
		  }
		  return count;
	  }
	  
	  /**
		 * <pre>
		 * 게시글관리 상세 조회
		 * 
		 * @param inParam
		 * @return
		 * @throws Exception
		 * @date 2015. 7. 31. 오후 2:10:39
		 * @author J.K.CHOI
		 * @see com.ssocio.sharing.dao.admin
		 * </pre>
		 */
		public Map<String, Object>  selectPolicy(Map<String, Object> inParam) throws Exception {
			// ------------------------------------------------------------------------
			// # 시작로그
			// ------------------------------------------------------------------------
			logger.info("selectPolicy Start");
			Map<String, Object> map = null;
			try {
				map =  sqlSession.selectOne("adminPolicyMapper.selectPolicy", inParam);
			} catch (Exception e) {
				logger.error("selectPolicy DB Error : " + e.toString());
				throw new Exception(RspnsCnst.RC1000000004);
			}
			return map;
		}
		
		/**
		 * <pre>
		 * 게시글관리 상태 상세 조회
		 * 
		 * @param inParam
		 * @return
		 * @throws Exception
		 * @date 2015. 8. 3. 오후 2:10:39
		 * @author J.K.CHOI
		 * @see com.ssocio.sharing.dao.admin
		 * </pre>
		 */
		public Map<String, Object>  selectPolicyStat(Map<String, Object> inParam) throws Exception {
			// ------------------------------------------------------------------------
			// # 시작로그
			// ------------------------------------------------------------------------
			logger.info("selectPolicyStat Start");
			Map<String, Object> map = null;
			try {
				map =  sqlSession.selectOne("adminPolicyMapper.selectPolicyStat", inParam);
			} catch (Exception e) {
				logger.error("selectPolicyStat DB Error : " + e.toString());
				throw new Exception(RspnsCnst.RC1000000004);
			}
			return map;
		}
		
		/**
		 * <pre>
		 * 게시글관리 상태 히스토리 리스트 조회
		 * 
		 * @param inParam
		 * @return
		 * @throws Exception
		 * @date 2015. 8. 3. 오후 2:10:39
		 * @author J.K.CHOI
		 * @see com.ssocio.sharing.dao.admin
		 * </pre>
		 */
		public List<Map<String, Object>>  selectListPolicyStat(Map<String, Object> inParam) throws Exception {
			// ------------------------------------------------------------------------
			// # 시작로그
			// ------------------------------------------------------------------------
			logger.info("selectListPolicyStat Start");
			List<Map<String, Object>> list = null;
			try {
				list =  sqlSession.selectList("adminPolicyMapper.selectPolicyStat", inParam);
			} catch (Exception e) {
				logger.error("selectListPolicyStat DB Error : " + e.toString());
				throw new Exception(RspnsCnst.RC1000000004);
			}
			return list;
		}
	/**
	 * <pre>
	 * 게시글관리등록
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 3:34:20
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertPolicyReg(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertPolicyReg Start");
		int outParam = 0;
		try {
			outParam = sqlSession.insert("adminPolicyMapper.insertPolicyReg", inParam);
		}
		catch (Exception e) {
			logger.error("insertPolicyReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	/**
	 * <pre>
	 * 게시글관리 수정
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 3:34:26
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updatePolicyReg(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updatePolicyReg Start");
		int outParam = 0;
		try {
			outParam = sqlSession.update("adminPolicyMapper.updatePolicyReg", inParam);
		}
		catch (Exception e) {
			logger.error("updatePolicyReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	

	
	/**
	 * <pre>
	 * 게시글관리 삭제
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 31. 오후 3:34:26
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int deletePolicy(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("deletePolicy Start");
		int outParam = 0;
		try {
			outParam = sqlSession.delete("adminPolicyMapper.deletePolicy", inParam);
		}
		catch (Exception e) {
			logger.error("deletePolicy DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	public int updateBanPolicyReg(Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("deletePolicy Start");
		int outParam = 0;
		try {
			outParam = sqlSession.delete("adminPolicyMapper.updateBanPolicyReg", inParam);
		}
		catch (Exception e) {
			logger.error("deletePolicy DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
}
