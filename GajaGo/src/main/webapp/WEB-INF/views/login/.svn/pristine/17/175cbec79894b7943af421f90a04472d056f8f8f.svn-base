/**
 *
 */
package com.ssocio.sharing.dao.web;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.web.RspnsCnst;
import com.ssocio.sharing.vo.web.WebSession;

/**
 * <pre>
 * Common Dao
 * 공통 처리 Dao
 * @author S.B.LEE
 * @version
 * @since 2015. 8. 14. 오후 6:34:53
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 8. 14.	|	SEOKBAE	|신규
 * @비고
 * </pre>
 */
@Component
public class WebCommonDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebCommonDao.class);

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	//SMS 발송 용
	@Resource(name="sqlSessionLog")
	private SqlSession sqlSessionSms;

	public void setSqlSessionSms(SqlSession sqlSessionSms) {
		this.sqlSessionSms = sqlSessionSms;
	}

	/**
	 * <pre>
	 * 로그인
	 *
	 * @param inParam
	 * @return
	 * @throws DataAccessException
	 * @date 2015. 8. 18. 오후 8:54:59
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public WebSession setLogin(Map<String, Object> inParam) throws DataAccessException {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("setLogin Start");
		return (WebSession)sqlSession.selectOne("webCommonMapper.setLogin", inParam);
	}
	
	public void updateLoginFailCnt(Map<String, Object> inParam) throws Exception {
		logger.info("updateLoginFailCnt Start");
		sqlSession.update("webCommonMapper.updateLoginFailCnt", inParam);
	}
	
	public int getFailCnt(Map<String, Object> inParam) throws Exception {
		int failCnt = 0;
		logger.info("getFailCnt Start");
		failCnt = sqlSession.selectOne("webCommonMapper.getFailCnt", inParam);
		return failCnt;
	}

	/**
	 * <pre>
	 * 페이스북 로그인
	 *
	 * @param inParam
	 * @return
	 * @throws DataAccessException
	 * @date 2015. 8. 18. 오후 8:55:26
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public WebSession setFacebookLogin(Map<String, Object> inParam) throws DataAccessException {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("setFacebookLogin Start");
		return (WebSession)sqlSession.selectOne("webCommonMapper.setFacebookLogin", inParam);
	}

	/**
	 * <pre>
	 * 카카오톡 로그인
	 * @param inParam
	 * @return
	 * @throws DataAccessException
	 * @date 2015. 10. 26. 오전 9:08:04
	 * @author user
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public WebSession setKakaoLogin(Map<String, Object> inParam) throws DataAccessException {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("setKakaoLogin Start");
		return (WebSession)sqlSession.selectOne("webCommonMapper.setKakaoLogin", inParam);
	}

	/**
	 * <pre>
	 * 아이디 찾기
	 * 개인회원 아이디 찾기
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 16. 오후 4:59:26
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public List<Map<String, Object>> selectFindId(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectFindId Start");
		List<Map<String, Object>> outParam = new ArrayList<Map<String,Object>>();
		try {
			outParam =  sqlSession.selectList("webCommonMapper.selectFindId", inParam);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	/**
	 * <pre>
	 * 아이디 찾기
	 * 사업자 아이디 찾기
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 18. 오후 1:40:57
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> procFindIdBusiReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("procFindIdBusiReg Start");
		Map<String, Object> selectFindId = null;
		try {
			selectFindId =  sqlSession.selectOne("webCommonMapper.procFindIdBusiReg", inParam);
		} catch (Exception e) {
			logger.error("procFindIdBusiReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectFindId;
	}

	/**
	 * <pre>
	 * 비밀번호 찾기
	 * 개인회원 비밀번호 찾기
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 17. 오전 11:59:24
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> procFindPwReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("procFindPwReg Start");
		Map<String, Object> selectFindPw = null;
		try {
			selectFindPw =  sqlSession.selectOne("webCommonMapper.procFindPwReg", inParam);
		} catch (Exception e) {
			logger.error("procFindPwReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectFindPw;
	}

	/**
	 * <pre>
	 * 사업자 비밀번호 찾기
	 * 사업자 비밀번호 찾기
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 21. 오후 5:55:25
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public Map<String, Object> procFindPwBusiReg(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("procFindPwBusiReg Start");
		Map<String, Object> selectFindPw = null;
		try {
			selectFindPw =  sqlSession.selectOne("webCommonMapper.procFindPwBusiReg", inParam);
		} catch (Exception e) {
			logger.error("procFindPwBusiReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return selectFindPw;
	}

	public int updateFailCnt(Map<String, Object> inParam) throws Exception {
		int ret =0;
		logger.info("updateFailCnt Start");
			ret = sqlSession.update("webCommonMapper.updateFailCnt", inParam);

		
		return ret;
	}
	
	/**
	 * <pre>
	 * 분류별 카테고리 리스트 조회
	 * 분류별 카테고리 리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 19. 오후 5:37:38
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public List<Map<String, Object>> selectCtryList(Map<String, Object> inParam) throws Exception{
		logger.info("selectCtryList Start");
		List<Map<String, Object>> outParam = new ArrayList<Map<String,Object>>();
		try {
			outParam = sqlSession.selectList("webCommonMapper.selectCtryList", inParam);
		} catch (Exception e) {
			logger.error("procFindPwReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}


	/**
	 * <pre>
	 * SMS 발송
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 25. 오후 3:29:15
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public int insertSms(Map<String, Object> inParam) throws Exception{
		logger.info("insertSms Start");
		int outParam = 0;
		try {
			outParam = sqlSessionSms.insert("commonMapper.insertSms", inParam);
		} catch (Exception e) {
			logger.error("insertSms DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	/**
	 * <pre>
	 * LMS 발송
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 25. 오후 4:09:18
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public int insertLms(Map<String, Object> inParam) throws Exception{
		logger.info("insertLms Start");
		int outParam = 0;
		try {
			outParam = sqlSessionSms.insert("commonMapper.insertLms", inParam);
		} catch (Exception e) {
			logger.error("insertLms DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	/**
	 * <pre>
	 * MMS 발송
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 25. 오후 4:09:29
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public int insertMms(Map<String, Object> inParam) throws Exception{
		logger.info("insertMms Start");
		int outParam = 0;
		try {
			outParam = sqlSessionSms.insert("commonMapper.insertMms", inParam);
		} catch (Exception e) {
			logger.error("insertMms DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	/**
	 * <pre>
	 * SMS 발송 정보 등록
	 *
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 25. 오후 4:09:38
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.dao.web
	 * </pre>
	 */
	public int insertSub(Map<String, Object> inParam) throws Exception{
		logger.info("insertSub Start");
		int outParam = 0;
		try {
			outParam = sqlSessionSms.insert("commonMapper.insertSub", inParam);
		} catch (Exception e) {
			logger.error("insertSub DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	/**
	 * <pre>
	 * 푸쉬 아이디 등록하기
	 * 푸쉬 아이디 등록하기
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 20. 오후 5:24:32
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.dao.web
	 * @비고
	 *
	 * </pre>
	*/
	public int insertPushIdreg(Map<String, Object> inParam) throws Exception{
		logger.info("insertPushIdreg Start");
		int outParam = 0;
		try {
			outParam = sqlSession.update("webCommonMapper.insertPushIdreg", inParam);
		} catch (Exception e) {
			logger.error("procFindPwReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	public String selectsiteIFUrl() throws Exception {
		return sqlSession.selectOne("webCommonMapper.selectsiteIFUrl");
	}

	public void updatePw(Map<String, Object> inParam)  throws Exception{

		try {
			sqlSession.update("webCommonMapper.updatePw", inParam);
		} catch (Exception e) {
			logger.error("updatePw DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}

	}

	public int selectUseStat(Map<String, Object> inParam)  throws Exception{
		logger.info("selectUseStat Start");
		int outParam = 0;
		try {
			outParam = sqlSession.selectOne("webCommonMapper.selectUseStat", inParam);
		} catch (Exception e) {
			logger.error("selectUseStat DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	public String selectAnsimUrl() throws Exception{
		return sqlSession.selectOne("webCommonMapper.selectAnsimUrl");
	}
	
	public String selectShareUrl() throws Exception{
		return sqlSession.selectOne("webCommonMapper.selectShareUrl");
	}
	
	public Map<String, Object> selectExtLand(String prodCode, String zipCd) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("ZIP_CD", zipCd);
		return this.sqlSession.selectOne("webCommonMapper.selectExtLand", map);
	}


	public int selectPointUseLogCnt(Map<String, Object> inParam) throws Exception{
		return sqlSession.selectOne("webCommonMapper.selectPointUseLogCnt",inParam);
	}
	
	public int updateMberPoint(Map<String, Object> inParam) throws Exception{
		logger.info("updateMberPoint Start");
		int outParam = 0;
		try {
			outParam = sqlSession.update("webCommonMapper.updateMberPoint", inParam);
		} catch (Exception e) {
			logger.error("procFindPwReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	
	public int insertPoint(Map<String, Object> inParam) throws Exception{
		logger.info("insertPoint Start");
		int outParam = 0;
		try {
			outParam = sqlSession.insert("webCommonMapper.insertPoint", inParam);
		} catch (Exception e) {
			logger.error("procFindPwReg DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}
	
	public int selectOrdCdCnt(Map<String, Object> inParam) throws Exception{
		return sqlSession.selectOne("webCommonMapper.selectOrdCdCnt",inParam);
	}
	
}
