package com.ssocio.sharing.cmmn.web.handler;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.handler.AbstractHandlerInterceptor;
import com.ssocio.sharing.cmmn.instance.cmmncode.CmmnCodeTableManager;
import com.ssocio.sharing.cmmn.instance.config.AppConfigManager;
import com.ssocio.sharing.cmmn.instance.maininfo.MainInfoManager;
import com.ssocio.sharing.cmmn.service.CommonService;

/**
 * <pre>
 * WebCodeInterceptor
 * 
 * @author N.J.Kim
 * @version 
 * @since 2015. 05. 19. 오후 4:43:35
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *  2015. 5. 19.  |    N.J.Kim   | 신규 
 * @Todo
 * </pre>
 */
public class WebCodeInterceptor extends AbstractHandlerInterceptor {

	private static final long serialVersionUID = -3728033433277358256L;

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebCodeInterceptor.class);

	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private CommonService commonService;

	/**
	 * <pre>
	 * preHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 5. 19. 오후 4:28:11
	 * @author N.J.Kim
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#preHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object)
	 * @비고
	 * 
	 * </pre>
	 */
	@SuppressWarnings("static-access")
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
		try {
			logger.info("# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.info("# [MobileCodeInterceptor] Start @@@@@@@@@@@@@@@@@@");
			// logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★[AdminCodeInterceptor]☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");

			// ----------------------------------------------------------------------
			// Application Config설정파일 Load - application-config.xml
			// ----------------------------------------------------------------------
			AppConfigManager.getInstance(request);

			// ----------------------------------------------------------------------
			// 공통코드 Instance Check & Create
			// ----------------------------------------------------------------------
			// CmmnCodeTableManager.getInstance(request);
			if (CmmnCodeTableManager.getInstance() == null) {
				logger.info("# ################################################");
				logger.info("# CmmnCodeTableManager Instance Loading...");
				commonService.setComCdInstanceInfo();
				logger.info("# ################################################");
			} else {
				logger.debug("# CmmnCodeTableManager Instance Already Loaded");
			}

			// ----------------------------------------------------------------------
			// MainInfo Instance Check & Create
			// ----------------------------------------------------------------------
			if (MainInfoManager.getInstance() == null) {
				logger.info("# ################################################");
				logger.info("# MainInfoManager Instance Loading...");
//				commonService.setMainInstanceInfo();
				logger.info("# ################################################");
			} else {
				logger.debug("# MainInfoManager Instance Already Loaded");
			}

			// ----------------------------------------------------------------------
			// System Info Log
			// ----------------------------------------------------------------------
			logger.info("# ################################################");
			logger.info("# System Info ####################################");
			logger.info("# Sys.SystemSe  : " + AppConfigManager.getInstance(request).getSystemSe());
			logger.info("# Sys.SystemIP  : " + AppConfigManager.getInstance(request).getSystemIp());

			// ----------------------------------------------------------------------
			// request Info Log
			// ----------------------------------------------------------------------
			logger.info("# ################################################");
			logger.info("# Request Info ###################################");
			logger.info("# Req.LocalAddr          : " + request.getLocalAddr()); // was IP
			logger.info("# Req.LocalName          : " + request.getLocalName()); // was host명
			logger.info("# Req.LocalPort          : " + request.getLocalPort()); // 개발서버의 경우 36181 찍힘
			logger.info("# Req.RemoteAddr         : " + request.getRemoteAddr()); // 접속자 PC의 IP
			logger.info("# Req.RemoteHost         : " + request.getRemoteHost()); // 접속자 PC의 IP
			logger.info("# Req.RequestUri         : " + request.getRequestURI()); // 개발서버 메인접속의 경우 "/mobile/main/main.do"
			logger.info("# Req.ServerName         : " + request.getServerName()); // web ip
			logger.info("# Req.ServerPort         : " + request.getServerPort()); // web으로 접속한 Port
			logger.info("# Req.ServletPath        : " + request.getServletPath()); // 개발서버 메인접속의 경우 "/mobile/main/main.do"
			logger.info("# Req.ContextPath        : " + request.getContextPath());
			logger.info("# Req.ContentType        : " + request.getContentType());
			logger.info("# Req.Session            : " + request.getSession());
			logger.info("# Req.RequestedSessionId : " + request.getRequestedSessionId());
			logger.info("# Req.PathInfo           : " + request.getPathInfo());
			logger.info("# Req.HeaderNames        : " + request.getHeaderNames());
			logger.info("# Req.ParameterNames     : " + request.getParameterNames());
			logger.info("# ################################################");

		} catch (Exception e) {
			logger.error("# MobileCodeInterceptor 오류 [" + e.toString() + "]");
			e.printStackTrace();
		}
		return true;
	}

	/**
	 * <pre>
	 * postHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param model
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 5. 19. 오후 4:28:31
	 * @author N.J.Kim
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#postHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, org.springframework.web.servlet.ModelAndView)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView model) throws Exception {
		try {
			// ----------------------------------------------------------------------
			// MainInfo를 모든 Request 응답에 Add (web/mobile만 해당)
			// - viewName이 추가될 때 고려되어야 함 (컨테이너별 root-context.xml)
			// ----------------------------------------------------------------------
			if (model != null) {
				logger.debug("Add MainInfo Instance to return mav");
				// jsonView, jsonView2, excelDownloadView, xmlView 에서는 절대 사용 불가
				if (!"jsonView".equals(model.getViewName()) && !"jsonView2".equals(model.getViewName()) && !"excelDownloadView".equals(model.getViewName()) && !"xmlView".equals(model.getViewName())) {
					//model.addAllObjects((MainInfoManager.getInstance().getMainInfo()).getModelMap());
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("# [MobileCodeInterceptor] End @@@@@@@@@@@@@@@@@@@@");
		logger.info("# @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");

	}

	/**
	 * <pre>
	 * afterCompletion
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param exception
	 * @throws Exception 
	 * @exception 
	 * @date 2014. 8. 20. 오후 4:28:44
	 * @author N.J.Kim
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#afterCompletion(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, java.lang.Exception)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception) throws Exception {
		// TODO Auto-generated method stub
	}

	/**
	 * <pre>
	 * AfterContextPathUri반환
	 *  - request에서 가져옴
	 * @param request
	 * @return 
	 * @exception 
	 * @date 2014. 8. 6. 오전 10:43:38
	 * @author N.J.Kim
	 * @비고
	 * 
	 * </pre>
	 */
	public static String getAfterContextPathUri(HttpServletRequest request) {

		String requestUri = "";
		String strAfterContextPathUri = "";

		try {
			requestUri = request.getRequestURI(); // ex) /lotteCardMall/web/web.apiTest
			logger.debug("requestUri          : " + requestUri);
			strAfterContextPathUri = requestUri.substring(request.getContextPath().length());
			// logger.debug("@@afterContextPathUri : " + strAfterContextPathUri);
		} catch (Exception e) {
			logger.error("# MobileCodeInterceptor 오류 [" + e.toString() + "]");
			e.printStackTrace();
		}
		return strAfterContextPathUri;
	}
}
