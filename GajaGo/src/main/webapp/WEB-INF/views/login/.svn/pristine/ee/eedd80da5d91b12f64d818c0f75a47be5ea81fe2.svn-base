package com.ssocio.sharing.dao.web;

import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.vo.web.OrdInfo;
import com.ssocio.sharing.vo.web.OrdProduct;

@Component
public class WebCtryDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebCtryDao.class);
	
	private static final String SELECT_CTRY = "webCtryMapper.selectCtry";
	private static final String SELECT_LIST_CTRY = "webCtryMapper.selectListCtry";
	private static final String SELECT_LIST_CTRY_BY_PARENT_CTRY_CD = "webCtryMapper.selectListCtryByParentCtryCd";
	
	private static final String SELECT_LIST_PROD = "webCtryMapper.selectListProd";
	private static final String SELECT_COUNT_PROD = "webCtryMapper.selectCountProd";
	private static final String SELECT_LIST_PROD_TYPE = "webCtryMapper.selectListProdType";
	
	//	상품 상세 관련 쿼리
	private static final String INSERT_LATE_PROD = "webCtryMapper.insertLateProd";
	private static final String SELECT_PROD_DETAIL_INFO = "webCtryMapper.selectProdDetailInfo";
	private static final String SELECT_PROD_USER_INFO = "webCtryMapper.selectProdUserInfo";
	private static final String SELECT_PROD_DETAIL_INFO_BY_MAP = "webCtryMapper.selectProdDetailInfoByMap";
	private static final String SELECT_PROD_INFO = "webCtryMapper.selectProdInfo";
	private static final String SELECT_LIST_CTRY_BY_PROD = "webCtryMapper.selectListCtryByProd";
	private static final String SELECT_LIST_OPTION = "webCtryMapper.selectListOption";
	private static final String SELECT_OPTION = "webCtryMapper.selectOption";
	//	쿠폰 사용가능 여부 파악
	private static final String SELECT_USABLE_COUPON = "webCtryMapper.selectUsableCoupon";
	
	//	주문전 정합성 체크
	private static final String SELECT_ORD_PRODUCT = "webCtryMapper.selectOrdProduct";
	//	주문정보 입력
	private static final String INSERT_ORD_INFO = "webCtryMapper.insertOrdInfo";
	private static final String INSERT_ORD_SELT_INFO = "webCtryMapper.insertOrdSeltInfo";
	private static final String INSERT_ORD_DLV_INFO = "webCtryMapper.insertOrdDlvInfo";
	private static final String INSERT_ORD_PROD_INFO = "webCtryMapper.insertOrdProdInfo";
	
	private static final String UPDATE_PROD_OPTION_QTY = "webCtryMapper.updateProdOptionQty";
	private static final String UPDATE_USED_ORD_QTY = "webCtryMapper.updateUsedOrdQty";
	private static final String SELECT_USED_ORD_QTY = "webCtryMapper.selectUsedOrdQty";
	
	
	private static final String UPDATE_USED_COUPON = "webCtryMapper.updateUsedCoupon";
	private static final String UPDATE_USED_POINT = "webCtryMapper.updateUsedPoint";
	private static final String INSERT_POINT_USE_LOG = "webCtryMapper.insertPointUseLog";
	private static final String INSERT_ORD_PROD_OPT_INFO = "webCtryMapper.insertOrdProdOptInfo";
	private static final String INSERT_ORD_PROD_CPN_INFO = "webCtryMapper.insertOrdProdCpnInfo";
	
	//	쿠폰 조회
	private static final String SELECT_LIST_COUPON = "webCtryMapper.selectListCoupon";
	//	특정 기획전 쿠폰 선택 시 해당 상품이 기획전에 포함되어 있는지  조회
	private static final String SELECT_COUNT_PLAN = "webCtryMapper.selectCountPlan";
	
	//	회원 조회
	private static final String SELECT_MBER_INFO = "webCtryMapper.selectMberInfo";
	//	배송지 조회
	private static final String SELECT_DLV_ADDR = "webCtryMapper.selectDlvAddr";
	private static final String SELECT_DLV_ADDRS = "webCtryMapper.selectDlvAddrs";
	
	//  약관내용조회
	private static final String SELECT_AGR_DESC = "webCtryMapper.selectAgrDesc";
	
	//	제주/도서산간 여부 체크
	private static final String SELECT_EXT_LAND_MAP = "webCtryMapper.selectExtLandMap";
	//	나눔 및 렌탈 등록
	private static final String INSERT_PROD_SUBMIT_INFO = "webCtryMapper.insertProdSubmitInfo";

	
	//	현 시점의 상품 상태
	private static final String SELECT_STAT_CD = "webCtryMapper.selectStatCd";
	private static final String SELECT_STAT_BY_SELL = "webCtryMapper.selectStatBySell";
	private static final String SELECT_STAT_BY_SHAR = "webCtryMapper.selectStatByShar";
	private static final String SELECT_STAT_SHAR_BY_CART = "webCtryMapper.selectStatSharByCart";
	private static final String SELECT_STAT_BY_FREE = "webCtryMapper.selectStatByFree";
	private static final String SELECT_STAT_BY_RENT = "webCtryMapper.selectStatByRent";
	
	//	현 시점에서의 옵션 개수
	private static final String SELECT_COUNT_OPTION = "webCtryMapper.selectCountOption";
	
	//	나눔 신청 정보
	private static final String SELECT_LIST_FREESHARE_REQ = "webCtryMapper.selectListFreeshareReq";
	
	private static final String SELECT_LIST_RE_FREESHARE_REQ = "webCtryMapper.selectListReFreeshareReq";
	
	//	상품정보제공고시
	private static final String SELECT_LIST_PROD_INFO_NOTI = "webCtryMapper.selectListProdInfoNoti";
	
	//	미니샵
	private static final String SELECT_LIST_MINI_SHOP = "webCtryMapper.selectListProdInMiniShop";
	
	//	ORD_CD 시퀀스 생성
	private static final String SELECT_ORD_INFO_SEQ = "webCtryMapper.selectOrdInfoSeq";
	
	//PUSH URL
	private static final String SELECT_PUSH_IF_URL = "webCtryMapper.selectPushIFUrl";
	
	//판매자 시퀀스 가져오기
	private static final String SELECT_PROD_MBER_SEQ = "webCtryMapper.selectProdMberSeq";
		
	private static final String SELECT_LIST_PC_FREESHARE_REQ_CNT = "webCtryMapper.selectListPcFreeshareReqCnt";
	
	private static final String SELECT_LIST_PC_FREESHARE_REQ = "webCtryMapper.selectListPcFreeshareReq";
	
	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	public Map<String, Object> selectCtry(String ctryCd) throws Exception{
		return this.sqlSession.selectOne(SELECT_CTRY, ctryCd);
	}
	
	public List<Map<String, Object>> selectListCtry(String parentCtryCd, int lvlSeq) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PARENT_CTRY_CD", parentCtryCd);
		map.put("LVL_SEQ", lvlSeq);
		return this.sqlSession.selectList(SELECT_LIST_CTRY, map);
	}
	
	public List<Map<String, Object>> selectListCtryByParentCtryCd(String parentCtryCd, int lvlSeq) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PARENT_CTRY_CD", parentCtryCd);
		map.put("LVL_SEQ", lvlSeq);
		return this.sqlSession.selectList(SELECT_LIST_CTRY_BY_PARENT_CTRY_CD, map);
	}
	
	public int selectCountProd(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.selectOne(SELECT_COUNT_PROD, inParam);
	}
	
	public List<Map<String, Object>> selectListProd(Map<String, Object> inParam) throws Exception{
		inParam.put("ORDER_KIND", StringUtil.nvl((String)inParam.get("ORDER_KIND"), "POPULAR"));
		return this.sqlSession.selectList(SELECT_LIST_PROD, inParam);
	}
	
	public List<Map<String, Object>> selectListProdType(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_PROD_TYPE, inParam);
	}
	
	public int insertLateProd(int mberSeq, String prodCode) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("MBER_SEQ", mberSeq);
		map.put("PROD_CODE", prodCode);
		return this.sqlSession.insert(INSERT_LATE_PROD, map);
	}
	
	public Map<String, Object> selectProdDetailInfo(String prodCode) throws Exception{
		return this.sqlSession.selectOne(SELECT_PROD_DETAIL_INFO, prodCode);
	}
	
	public Map<String, Object> selectProdUserInfo(String MBER_SEQ) throws Exception{
		return this.sqlSession.selectOne(SELECT_PROD_USER_INFO, MBER_SEQ);
	}
	
	public Map<String, Object> selectProdDetailInfo(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.selectOne(SELECT_PROD_DETAIL_INFO_BY_MAP, inParam);
	}
	
	public List<Map<String, Object>> selectListOption(List<Map<String, Object>> options) throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_OPTION, options);
	}
	
	public Map<String, Object> selectOption(String optCd) throws Exception{
		return this.sqlSession.selectOne(SELECT_OPTION, optCd);
	}
	
	public Map<String, Object> selectProdInfo(String prodCode, String prodImgGbCd) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("PROD_IMG_GB_CD", prodImgGbCd);
		return this.sqlSession.selectOne(SELECT_PROD_INFO, map);
	}
	
	public List<Map<String, Object>> selectListCtryByProd(String ctryCd) throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_CTRY_BY_PROD, ctryCd);
	}
	
	public int selectUsableCoupon(int mberSeq, String cpnNo) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("MBER_SEQ", mberSeq);
		map.put("CPN_NO", cpnNo);
		return this.sqlSession.selectOne(SELECT_USABLE_COUPON, map);
	}
	
	public Map<String, Object> selectOrdProduct(OrdProduct op) throws Exception{
		return this.sqlSession.selectOne(SELECT_ORD_PRODUCT, op);
	}
	
	public int insertOrdInfo(OrdInfo ordInfo) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("ORD_CD", ordInfo.getOrdCd());
		map.put("SELT_GB_CD", ordInfo.getSeltGbCd());
		map.put("MBER_SEQ", ordInfo.getMberSeq());
		map.put("REAL_SELT_AMT", ordInfo.getRealSeltAmt());
		map.put("ORD_AMT", ordInfo.getOrdAmt());
		map.put("DSCNT_BF_ORD_AMT", ordInfo.getDscntBfOrdAmt());
		map.put("DSCNT_AMT", ordInfo.getDscntAmt());
		
		
		// [2015-11-20 rocoakng] 기존 "20" 으로 상수로 처리 되어있던 파라미터를 수정함. 
		map.put("ORD_STAT_CD", ordInfo.getOrdStatCd());
		
		map.put("POINT_USE_AMT", ordInfo.getPointUseAmt());
		map.put("CPN_USE_AMT", ordInfo.getCpnUseAmt());
		map.put("DLV_SELT_AMT", ordInfo.getDlvSeltAmt());
		map.put("SESS_ID", ordInfo.getSessId());
		map.put("TOT_ORD_QTY", ordInfo.getTotOrdQty());
		map.put("TOT_ORD_PROD_CNT", ordInfo.getTotOrdProdCnt());
		map.put("CON_GB_CD", ordInfo.getConGbCd());
		return this.sqlSession.insert(INSERT_ORD_INFO, map);
	}
	
	public int insertOrdSeltInfo(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.insert(INSERT_ORD_SELT_INFO, inParam);
	}
	
	public int insertOrdDlvInfo(OrdInfo.DlvInfo dlvInfo) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("ORD_CD", dlvInfo.getOrdCd());
		map.put("RCV_NM", dlvInfo.getRcvNm());
		map.put("RCV_TEL", dlvInfo.getRcvTel());
		map.put("RCV_HP", dlvInfo.getRcvHp());
		map.put("ADDR_GB", dlvInfo.getAddrGb());
		map.put("ZIP_CD", dlvInfo.getZipCd());
		map.put("JUSO_JIBEN", dlvInfo.getJusoJiben());
		map.put("JUSO_DORO", dlvInfo.getJusoDoro());
		map.put("JUSO_DTL", dlvInfo.getJusoDtl());
		map.put("DLV_MSG", dlvInfo.getDlvMsg());
		map.put("SECU_NO_USE_YN", dlvInfo.getSecuNoUseYn());
		map.put("SECU_NO", dlvInfo.getAnsimNo());
		return this.sqlSession.insert(INSERT_ORD_DLV_INFO, map);
	}
	
	public int insertOrdProdInfo(Map<String, Object> inParam) throws Exception{
		this.sqlSession.insert(INSERT_ORD_PROD_INFO, inParam);
		return ((BigDecimal)inParam.get("PROD_SEQ")).intValue();
	}
	
	public int insertOrdProdOptInfo(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.insert(INSERT_ORD_PROD_OPT_INFO, inParam);
	}
	
	public int insertOrdProdCpnInfo(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.insert(INSERT_ORD_PROD_CPN_INFO, inParam);
	}
	
	public int updateProdOptionQty(String optCd, int ordQty) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("OPT_CD", optCd);
		map.put("OPT_QTY", ordQty);
		return this.sqlSession.update(UPDATE_PROD_OPTION_QTY, map);
	}
	
	public int updateUsedOrdQty(String prodCode, int ordQty) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("ORD_QTY", ordQty);
		return this.sqlSession.update(UPDATE_USED_ORD_QTY, map);
	}
	public int selectUsedOrdQty(String prodCode) throws Exception{
		return this.sqlSession.selectOne(SELECT_USED_ORD_QTY, prodCode);
	}
	
	public int updateUsedCoupon(String mberSeq, String cpnNo , String prodCode) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("MBER_SEQ", mberSeq);
		map.put("CPN_NO", cpnNo);
		map.put("PROD_CODE", prodCode);
		return this.sqlSession.update(UPDATE_USED_COUPON, map);
	}
	
	public int updateUsedPoint(String mberSeq, long pointUseAmt) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("MBER_SEQ", mberSeq);
		map.put("POINT_USE_AMT", pointUseAmt);
		return this.sqlSession.update(UPDATE_USED_POINT, map);
	}
	
	public int insertPointUseLog(String mberSeq, long pointUseAmt, String ordCd) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("MBER_SEQ", mberSeq);
		map.put("POINT_USE_AMT", pointUseAmt);
		map.put("CHG_REASON", ordCd);
		return this.sqlSession.insert(INSERT_POINT_USE_LOG, map);
	}
	
	public List<Map<String, Object>> selectListCoupon(int mberSeq) throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_COUPON, mberSeq);
	}
	
	public int selectCountPlan(String planCd, String prodCode) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);
		map.put("PROD_CODE", prodCode);
		return this.sqlSession.selectOne(SELECT_COUNT_PLAN, map);
	}
	
	public Map<String, Object> selectMberInfo(int mberSeq) throws Exception{
		return this.sqlSession.selectOne(SELECT_MBER_INFO, mberSeq);
	}
	
	public Map<String, Object> selectStatCd(String prodCode, int ordQty) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("ORD_QTY", ordQty);
		return this.sqlSession.selectOne(SELECT_STAT_CD, map);
	}
	
	public Map<String, Object> selectStatBySell(String prodCode, int ordQty) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("ORD_QTY", ordQty);
		return this.sqlSession.selectOne(SELECT_STAT_BY_SELL, map);
	}
	
	public Map<String, Object> selectStatByShar(String prodCode, int ordQty) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("ORD_QTY", ordQty);
		return this.sqlSession.selectOne(SELECT_STAT_BY_SHAR, map);
	}
	
	public int selectStatSharByCart(String prodCode, int mberSeq, int shareDay) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("MBER_SEQ", mberSeq);
		map.put("SHARE_DAY", shareDay);
		return this.sqlSession.selectOne(SELECT_STAT_SHAR_BY_CART, map);
	}

	public Map<String, Object> selectStatByFree(String prodCode, int mberSeq) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("MBER_SEQ", mberSeq);
		return this.sqlSession.selectOne(SELECT_STAT_BY_FREE, map);
	}

	public Map<String, Object> selectStatByRent(String prodCode, int mberSeq) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PROD_CODE", prodCode);
		map.put("MBER_SEQ", mberSeq);
		return this.sqlSession.selectOne(SELECT_STAT_BY_RENT, map);
	}

	
	public int selectCountOption(String optCd) throws Exception{
		return this.sqlSession.selectOne(SELECT_COUNT_OPTION, optCd);
	}
	
	public Map<String, Object> selectListFreeshareReq(String prodCode) throws Exception{
		return this.sqlSession.selectOne(SELECT_LIST_FREESHARE_REQ, prodCode);
	}
	
	public Map<String, Object> selectListReFreeshareReq(String prodCode) throws Exception{
		return this.sqlSession.selectOne(SELECT_LIST_RE_FREESHARE_REQ, prodCode);
	}
	
	public Map<String, Object> selectDlvAddr(String regSeq) throws Exception{
		return this.sqlSession.selectOne(SELECT_DLV_ADDR, regSeq);
	}
	
	public Map<String, Object> selectDlvAddrs(int mberSeq) throws Exception{
		return this.sqlSession.selectOne(SELECT_DLV_ADDRS, mberSeq);
	}
	
	public String selectExtLandMap(String zipCd) throws Exception{
		return this.sqlSession.selectOne(SELECT_EXT_LAND_MAP, zipCd);
	}
	
	public int insertProdSubmitInfo(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.insert(INSERT_PROD_SUBMIT_INFO, inParam);
	}

	public List<Map<String, Object>> selectListProdInMiniShop(String mberSeq, String prodCode) throws Exception{
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("MBER_SEQ", mberSeq);
		map.put("PROD_CODE", prodCode);
		return this.sqlSession.selectList(SELECT_LIST_MINI_SHOP, map);
	}
	
	public List<Map<String, Object>> selectListProdInfoNoti(String prodCode) throws Exception{
		return this.sqlSession.selectList(SELECT_LIST_PROD_INFO_NOTI, prodCode);
	}
	
	public String selectOrdInfoSeq() throws Exception{
		return this.sqlSession.selectOne(SELECT_ORD_INFO_SEQ);
	}
	
	public String selectPushIFUrl() throws Exception{
		return this.sqlSession.selectOne(SELECT_PUSH_IF_URL);
	}
	
	
	public String selectProdMberSeq(String PROD_CODE) throws Exception{
		return this.sqlSession.selectOne(SELECT_PROD_MBER_SEQ,PROD_CODE);
	}

	public Map<String, Object> selectAgrDesc(String agrGbCd, String agrNameCd) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("AGR_GB_CD", agrGbCd);
		map.put("AGR_NAME_CD", agrNameCd);
		return this.sqlSession.selectOne(SELECT_AGR_DESC, map);
	}
	
	public int selectListPcFreeshareReqCnt(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.selectOne(SELECT_LIST_PC_FREESHARE_REQ_CNT, inParam);
	}
	
	public Map<String, Object> selectListPcFreeshareReq(Map<String, Object> inParam) throws Exception{
		return this.sqlSession.selectOne(SELECT_LIST_PC_FREESHARE_REQ, inParam);
	}
	
}
