package com.ssocio.sharing.controller.mobile;

import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.lambdaworks.redis.RedisConnection;
import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.Redis;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.util.WebCommonUtil;
import com.ssocio.sharing.service.web.AppCommonService;
import com.ssocio.sharing.service.web.WebBoardService;
import com.ssocio.sharing.service.web.WebCommonService;
import com.ssocio.sharing.service.web.WebMainService;
import com.ssocio.sharing.vo.web.HeaderVO;
import com.ssocio.sharing.vo.web.WebSession;

import net.sf.json.JSONObject;

/**
 * <pre>
 * 메인 컨트롤러
 * 메인 처리를 위한 컨트롤러
 * @author S.B.LEE
 * @version
 * @since 2015. 8. 14. 오후 1:52:33
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 8. 14.	|	SEOKBAE	|신규
 * @비고
 * </pre>
 */
@Controller
@RequestMapping("/mobile/main")
public class MobileMainController extends MobileReferController {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	@SuppressWarnings ("unused")
	private static final Logger logger = LoggerFactory.getLogger(MobileMainController.class);

	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private WebMainService webMainService;

	@Autowired
	private WebBoardService webBoardService;

	@Autowired
	private WebCommonService webCommonService;
	
	@Autowired
	private AppCommonService appCommonService;

	/**
	 * 로그인페이지
	 * @param request
	 * @param paramDto
	 * @return
	 */
	@RequestMapping("/login.do")
	public ModelAndView login(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("MOBILE LOGIN START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		try {
			String ret = "";
			if (inParam.get("ret") != null) {
				ret = URLDecoder.decode((String)inParam.get("ret"), "UTF-8");
			}

			inParam.put("ret", ret);
			mm.put("params", inParam);

			//자동 로그인 체크 여부 확인
			inParam.put("MBER_AUTO_LOGIN", false);
			Cookie[] cookies = request.getCookies();
			if ( cookies != null ) {
				for (int i = 0; i < cookies.length; i++) {
					if (("MBER_AUTO_LOGIN").equals(cookies[i].getName()) ) {
						if (("true").equals(cookies[i].getValue())){
							inParam.put("MBER_AUTO_LOGIN", true);
						} else {
							inParam.put("MBER_AUTO_LOGIN", false);
						}
					}
				}
			}

			/*
			 * 자동 로그인이 체크 되어있을 경우 MAIN 페이지로 이동
			 * 사용자 상태 값이 40(이메일 미인증) 인 경우 session 값 null인 상태로 로그인 페이지로 이동
			 */
			if ( (boolean)inParam.get("MBER_AUTO_LOGIN") ) {

				for (int j = 0; j < cookies.length; j++) {
					if (("MBER_PASS").equals(cookies[j].getName())) {
						inParam.put("MBER_PASS", CommonUtil.getEncPassword(cookies[j].getValue()));
						cookies[j].setValue(CommonUtil.getEncPassword(cookies[j].getValue()));
					}
					if (("MBER_EMAIL").equals(cookies[j].getName())) {
						inParam.put("MBER_EMAIL", URLDecoder.decode(cookies[j].getValue(), "UTF-8"));
					}
					if (("SNS_INIT").equals(cookies[j].getName())) {
						inParam.put("SSO_GB_CD", cookies[j].getValue());
					}
					if (("SNS_MBER_ID").equals(cookies[j].getName())) {
						inParam.put("SSO_MBER_ID", cookies[j].getValue());
					}
				}

				if ("KKO".equals(inParam.get("SSO_GB_CD"))) {
					WebSession webSession = webCommonService.setKakaoLogin(inParam);
					if(webSession != null && webSession.getLogin()){
						HttpSession session  = request.getSession();
						session.setAttribute("user", webCommonService.setKakaoLogin(inParam));
						return new ModelAndView("redirect:/mobile/main/main.do");
					}
				} else if("FBO".equals(inParam.get("SSO_GB_CD"))){
					WebSession webSession = webCommonService.setFacebookLogin(inParam);
					if(webSession != null && webSession.getLogin()){
						HttpSession session  = request.getSession();
						session.setAttribute("user", webCommonService.setFacebookLogin(inParam));
						return new ModelAndView("redirect:/mobile/main/main.do");
					}
				} else {
					WebSession webSession = webMainService.setLogin(inParam);
					if(webSession != null && webSession.getLogin()){
						HttpSession session  = request.getSession();
						if ( ("40").equals(webSession.getMBER_STAT_CD())) {
							session.setAttribute("user", null);
						} else {
							session.setAttribute("user", webMainService.setLogin(inParam));
							return new ModelAndView("redirect:/mobile/main/main.do");
						}
					} else {
						HttpSession session  = request.getSession();
						session.removeAttribute("user");//세션 삭제
						for (int i = 0; i < cookies.length; i++) {
							if (("MBER_ID_SAVE").equals(cookies[i].getName()) || ("MBER_ID").equals(cookies[i].getName()) ) {
								if (("true").equals(cookies[i].getValue())){
									continue;
								}
							} else {
								cookies[i].setMaxAge(0);                 //쿠키 유지기간을 0으로함
								cookies[i].setPath("/mobile");                    //쿠키 접근 경로 지정
								response.addCookie(cookies[i]);
							}
						}
					}
				}
			}
			
			if(request.getHeader("x_app_version") != null && request.getHeader("x_app_name") != null ) {
				request.getSession().setAttribute("X_APP_VERSION_2", request.getHeader("x_app_version"));
				request.getSession().setAttribute("X_APP_NAME_2", request.getHeader("x_app_name"));
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("web/main/login", mm);
	}

	@RequestMapping("/main.do")
	public ModelAndView main(HttpServletRequest request, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE main START☆★☆★☆★☆★☆★☆★☆");
		logger.info("################################################################");
		logger.info("#### main.do	김성훈 ");
		logger.info("################################################################");
		ModelAndView mav = new ModelAndView();
		WebSession session = (WebSession)request.getSession().getAttribute("user");
		// app api와 동일한 service를 사용하기 위해 임의의 header 값 세팅.
		HeaderVO headerObj = new HeaderVO();
		headerObj.setScreen("1280x640");
		if (session != null && session.getMBER_SEQ() > 0 ) {
			headerObj.setMber_seq(String.valueOf((session.getMBER_SEQ())));
		}
		
		logger.info("applicationapplicationapplicationapplicationapplicationapplication-->");
		if(WebCommonUtil.isLogin(request)){
			inParam.put("MBER_SEQ", session.getMBER_SEQ());
			// 	회원 접속 +1 로직 추가   조은별
			//	로그인 사용자에 한해서 실행 	|	20151102	|	WOOK-KIM
			webMainService.updateConnCnt(inParam);

		    inParam.put("CON_GB", (String)request.getSession().getAttribute("conGbCd"));
		    inParam.put("CON_IP", (String)request.getRemoteAddr());
		    logger.info("androidTestandroidTestandroidTestandroidTest-->");
			// 접속이력 테이블 insert
			webMainService.insertConnLog(inParam);
			// 접속시간 update
			webMainService.updateLastLoginDt(inParam);
			logger.info("androidTestandroidTestandroidTestandroidTest-->");

		}

		ModelMap main = webMainService.procMain(inParam,session);
		logger.debug("main:"+main);

		Redis redis = Redis.getInstance();
		logger.info("Redis.REDIS_HOST_SPLIT_PK : " + redis.getREDIS_HOST_SPLIT_PK());

		Map<String, Object> resultMap = new HashMap<String, Object>();
		if( main != null){
			logger.debug("1.main - main:["+main+"]");
			String ETC_SKIP_YN  = "N";
			if(inParam.get("ETC_SKIP_YN")!=null){
				ETC_SKIP_YN = StringUtil.nvl(inParam.get("ETC_SKIP_YN").toString()).trim();
			}
			logger.debug("1.main - ETC_SKIP_YN:["+ETC_SKIP_YN+"]");
			logger.debug("ETC_SKIP_YN:["+ETC_SKIP_YN+"]");
			if( (main.get("notice") != null)||(main.get("termsAgree") != null)||(main.get("useingStop") != null)||(main.get("sellerGuide") != null) ){
				logger.debug(" S 작업자 : shkim ");
				if(!"Y".equals(ETC_SKIP_YN) ){
						if( (main.get("notice")!=null)||(main.get("termsAgree")==null)||(main.get("useingStop")== null)||(main.get("sellerGuide")== null) ){	// 1건만 공지사항만 존재할경우
							logger.debug("####### 공지사항만 존재합니다:"+main.get("notice"));
							List<Map<String, Object>> noticeList = (List<Map<String, Object>>)main.get("notice");
							logger.debug("######## 공지사항만 존재합니다:"+noticeList.size());	// 4.공지사항
							int termsAgreeInt = 0;
							if(main.get("termsAgree")!=null){
								List<Map<String, Object>> termsAgree = (List<Map<String, Object>>)main.get("termsAgree");
								termsAgreeInt = termsAgree.size();
							}


							// 쿠키에서 존재하면 공지사항 제거.
							// 총 건수가 1건이면서 공지사항이면 찾아서 숨긴다.
							inParam.put("cookiesYn", "N");
							Cookie[] cookies = request.getCookies();
							int chC = 0;
							if (cookies != null) {
							    for (Cookie cookie : cookies) {

							    	logger.debug("cookie.getName():"+cookie.getName());
							    	logger.debug("cookie.getValue():"+cookie.getValue());
							    	String BOARD_SEQ = "";
							    	for(int i=0;i<noticeList.size();i++){
							    		logger.debug("BOARD_SEQ:"+noticeList.get(i).get("BOARD_SEQ"));
							    		BOARD_SEQ = noticeList.get(i).get("BOARD_SEQ").toString();
							    		if( ("notice_"+BOARD_SEQ).equals(cookie.getName()) && "rangs".equals(cookie.getValue())){
								        	logger.debug("일치합니다. rangs");
								        	chC++;
								        	mav.addObject("noticeCookie"		, BOARD_SEQ);
								        }else if( ("notice_"+BOARD_SEQ).equals(cookie.getName()) && "done".equals(cookie.getValue())){
								        	logger.debug("일치합니다. done");
								        	chC++;
								        	mav.addObject("noticeCookie"		, BOARD_SEQ);
								        }
							    	}
							    }
							}
							logger.debug("chC:"+chC+" , noticeList.size():"+noticeList.size()+" , termsAgree.size():"+termsAgreeInt );
							if(chC == noticeList.size()){
								logger.debug("쿠키값이 공지사항에 포함되므로 전체 공지사항은 보이지 않음");
								logger.debug("useingStop		:"+main.get("useingStop"));
								logger.debug("sellerGuide		:"+main.get("sellerGuide"));
								logger.debug("termsAgree.size()	:"+termsAgreeInt);
								// 이용정지 안내,판매회원반려가 존재하는지 확인한다.
								if((main.get("useingStop") != null)||(main.get("sellerGuide") != null)||(termsAgreeInt >0)){
									logger.debug("공지사항 제외! 약관동의,이용정지,판매회원반려 존재");
									mav.setViewName("web/board/selectMainNotice");
									//mav.addObject("notice"		, main.get("notice"));		// 4.공지사항
									mav.addObject("termsAgree"	, main.get("termsAgree"));	// 3.약관 동의(변경)
									mav.addObject("useingStop"	, main.get("useingStop"));	// 1.이용정지 안내
									mav.addObject("sellerGuide"	, main.get("sellerGuide"));	// 2.판매회원 가입 반려 안내
								}else{
									logger.debug("모두제외(공지사항,약관동의,이용정지,판매회원반려)");
									mav.setViewName("web/main/mainSelectListPlan");
									resultMap = appCommonService.selectListMainPlan(request, headerObj);
//									try {
//										ObjectMapper mapper = new ObjectMapper();
//										RedisConnection<String, String> redisConnection = redis.getRedisClient("0");
////										ModelMap mm = webMainService.selectListMainPlan();
////										redisConnection.set("selectListMainPlan", mapper.writeValueAsString(mm));
//										JSONObject obj = new JSONObject();
//										obj.put("plans", redisConnection.get(redis.getREDIS_HOST_SPLIT_PK() + "selectListMainPlan"));
//										if ( Redis.ssocioToMap(obj) != null) {
//											resultMap = (Map<String, Object>) Redis.ssocioToMap(obj);
//										} else {
//											resultMap = webMainService.selectListMainPlan();
//										}
//									} catch (Exception e) {
//										e.printStackTrace();
//										resultMap = webMainService.selectListMainPlan();
//									}
//									resultMap = webMainService.selectListMainPlan();
//									mav.addObject("result", webMainService.selectListMainPlan());
								}
							}else{
								mav.setViewName("web/board/selectMainNotice");
								mav.addObject("notice"		, main.get("notice"));		// 4.공지사항
								mav.addObject("termsAgree"	, main.get("termsAgree"));	// 3.약관 동의(변경)
								mav.addObject("useingStop"	, main.get("useingStop"));	// 1.이용정지 안내
								mav.addObject("sellerGuide"	, main.get("sellerGuide"));	// 2.판매회원 가입 반려 안내
							}

						}else{
							/*
							 * 1.공지사항				notice NOTICE
							 * [로그인되어 있지 않으면 제외]2.약관 동의(변경)			termsAgree TERMS_AGREE
							 * 3.이용정지 안내			useingStop USEING_STOP
							 * 4.판매회원 가입 반려 안내 	sellerGuide SELLER_GUIDE
							 */
							logger.debug("1-1.main 최초 메인조회시 4가지 중 하나가 포함됨");
							mav.setViewName("web/board/selectMainNotice");
							mav.addObject("notice"		, main.get("notice"));		// 4.공지사항
							mav.addObject("termsAgree"	, main.get("termsAgree"));	// 3.약관 동의(변경)
							mav.addObject("useingStop"	, main.get("useingStop"));	// 1.이용정지 안내
							mav.addObject("sellerGuide"	, main.get("sellerGuide"));	// 2.판매회원 가입 반려 안내
						}
				}else{
					logger.debug("[처리후 메인으로 이동시 사용]1.공지사항/2.약관 동의(변경)/3.이용정지 안내/4.판매회원 가입 반려 안내");
					mav.setViewName("web/main/mainSelectListPlan");
					resultMap = appCommonService.selectListMainPlan(request, headerObj);
//					try {
//						ObjectMapper mapper = new ObjectMapper();
//						Redis.getInstance();
//						RedisConnection<String, String> redisConnection = redis.getRedisClient("0");
////						ModelMap mm = webMainService.selectListMainPlan();
////						redisConnection.set("selectListMainPlan", mapper.writeValueAsString(mm));
//						JSONObject obj = new JSONObject();
//						obj.put("plans", redisConnection.get(redis.getREDIS_HOST_SPLIT_PK() + "selectListMainPlan"));
//						if ( Redis.ssocioToMap(obj) != null) {
//							resultMap = (Map<String, Object>) Redis.ssocioToMap(obj);
//						} else {
//							resultMap = webMainService.selectListMainPlan();
//						}
//					} catch (Exception e) {
//						e.printStackTrace();
//						resultMap = webMainService.selectListMainPlan();
//					}
//					resultMap = webMainService.selectListMainPlan();
//					mav.addObject("result", webMainService.selectListMainPlan());
				}
				logger.debug(" E 작업자 : shkim ");
			} else {
				mav.setViewName("web/main/mainSelectListPlan");
				resultMap = appCommonService.selectListMainPlan(request, headerObj);
//				try {
//					ObjectMapper mapper = new ObjectMapper();
//					Redis.getInstance();
//					RedisConnection<String, String> redisConnection = redis.getRedisClient("0");
////					ModelMap mm = webMainService.selectListMainPlan();
////					redisConnection.set("selectListMainPlan", mapper.writeValueAsString(mm));
//					JSONObject obj = new JSONObject();
//					obj.put("plans", redisConnection.get(redis.getREDIS_HOST_SPLIT_PK() + "selectListMainPlan"));
//					if ( Redis.ssocioToMap(obj) != null) {
//						resultMap = (Map<String, Object>) Redis.ssocioToMap(obj);
//					} else {
//						resultMap = webMainService.selectListMainPlan();
//					}
//				} catch (Exception e) {
//					e.printStackTrace();
//					resultMap = webMainService.selectListMainPlan();
//				}
//				resultMap = webMainService.selectListMainPlan();
//				mav.addObject("result", webMainService.selectListMainPlan());
			}
		} else{
			logger.debug("2.main");
			mav.setViewName("web/main/mainSelectListPlan");
			resultMap = appCommonService.selectListMainPlan(request, headerObj);
//			try {
//				ObjectMapper mapper = new ObjectMapper();
//				Redis.getInstance();
//				RedisConnection<String, String> redisConnection = redis.getRedisClient("0");
////				ModelMap mm = webMainService.selectListMainPlan();
////				redisConnection.set("selectListMainPlan", mapper.writeValueAsString(mm));
//				JSONObject obj = new JSONObject();
//				obj.put("plans", redisConnection.get(redis.getREDIS_HOST_SPLIT_PK() + "selectListMainPlan"));
//				if ( Redis.ssocioToMap(obj) != null) {
//					resultMap = (Map<String, Object>) Redis.ssocioToMap(obj);
//				} else {
//					resultMap = webMainService.selectListMainPlan();
//				}
//			} catch (Exception e) {
//				e.printStackTrace();
//				resultMap = webMainService.selectListMainPlan();
//			}
//			resultMap = webMainService.selectListMainPlan();
//			mav.addObject("result", webMainService.selectListMainPlan());
		}

		logger.info(resultMap.toString());

//		try {
//			if ( resultMap != null ) {
//				List<Map<String, Object>> resultList = (List<Map<String, Object>>) resultMap.get("plans");
//				if (resultList != null && resultList.size() > 0 ) {
//
//					for (int listSize = 0; listSize < resultList.size(); listSize++ ) {
//						List<Map<String, Object>> unsortMapList = (List<Map<String, Object>>) resultList.get(listSize).get("banners");
//						List<Map<String, Object>> sortMapList = new ArrayList<Map<String, Object>>();
//
//						if ( unsortMapList != null ) {
//							Map<String, Object> unsortMap = new HashMap<String, Object>();
//							for ( int i = 0; i < unsortMapList.size(); i++ ) {
//								Map<String, Object> tempMap = unsortMapList.get(i);
//								unsortMap.put(String.valueOf(tempMap.get("BANNDER_VIEW_SEQ")), tempMap);
//							}
//
//							SortedSet<String> keys = new TreeSet<String>(unsortMap.keySet());
//							for (String key : keys) {
//								sortMapList.add((Map<String, Object>) unsortMap.get(key));
//							}
//
//							resultList.get(listSize).put("banners", sortMapList);
//						}
//					}
//
//				}
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}

		String userAgent = request.getHeader("user-agent");			
		if (userAgent.toLowerCase().split("android").length > 1) {
			userAgent = userAgent.toLowerCase().split("android")[1].split(";")[0].trim();
		}
		
		mav.addObject("main_app_version", userAgent);
		mav.addObject("result", resultMap);
		
		logger.info("userAgent1111 : " + userAgent);
		
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 메인 기획전 목록 조회
	 * 설명
	 * @param request
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 9. 18. 오후 5:52:07
	 * @author WOOK.KIM
	 * @see com.ssocio.sharing.controller.mobile
	 * </pre>
	 */
	@RequestMapping("/mainSelectListPlan.do")
	public ModelAndView mainSelectListPlan(HttpServletRequest request, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE main START☆★☆★☆★☆★☆★☆★☆");

		HeaderVO headerObj = new HeaderVO();
		headerObj.setScreen("1280x640");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("web/main/mainSelectListPlan");
		Map<String, Object> resultMap = appCommonService.selectListMainPlan(request, headerObj);

//		Map<String, Object> resultMap = new HashMap<String, Object>();
//		try {
//			ObjectMapper mapper = new ObjectMapper();
//			Redis redis = Redis.getInstance();
//			RedisConnection<String, String> redisConnection = redis.getRedisClient("0");
////			ModelMap mm = webMainService.selectListMainPlan();
////			redisConnection.set("selectListMainPlan", mapper.writeValueAsString(mm));
//			JSONObject obj = new JSONObject();
//			obj.put("plans", redisConnection.get(redis.getREDIS_HOST_SPLIT_PK() + "selectListMainPlan"));
//			if ( Redis.ssocioToMap(obj) != null) {
//				resultMap = (Map<String, Object>) Redis.ssocioToMap(obj);
//			} else {
//				resultMap = webMainService.selectListMainPlan();
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//			resultMap = webMainService.selectListMainPlan();
//		}
//
//		try {
//			if ( resultMap != null ) {
//				List<Map<String, Object>> resultList = (List<Map<String, Object>>) resultMap.get("plans");
//				if (resultList != null && resultList.size() > 0 ) {
//
//					for (int listSize = 0; listSize < resultList.size(); listSize++ ) {
//						List<Map<String, Object>> unsortMapList = (List<Map<String, Object>>) resultList.get(listSize).get("banners");
//						List<Map<String, Object>> sortMapList = new ArrayList<Map<String, Object>>();
//
//						if ( unsortMapList != null ) {
//							Map<String, Object> unsortMap = new HashMap<String, Object>();
//							for ( int i = 0; i < unsortMapList.size(); i++ ) {
//								Map<String, Object> tempMap = unsortMapList.get(i);
//								unsortMap.put(String.valueOf(tempMap.get("BANNDER_VIEW_SEQ")), tempMap);
//							}
//
//							SortedSet<String> keys = new TreeSet<String>(unsortMap.keySet());
//							for (String key : keys) {
//								sortMapList.add((Map<String, Object>) unsortMap.get(key));
//							}
//
//							resultList.get(listSize).put("banners", sortMapList);
//						}
//					}
//
//				}
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
//
////		mav.addObject("result", webMainService.selectListMainPlan());
		
		String userAgent = request.getHeader("user-agent");			
		if (userAgent.toLowerCase().split("android").length > 1) {
			userAgent = userAgent.toLowerCase().split("android")[1].split(";")[0].trim();
		}
		
		mav.addObject("main_app_version", userAgent);
		mav.addObject("result", resultMap);
		
		logger.info("userAgent1111 : " + userAgent);
		
		return mav;
	}

	/**
	 *
	 * <pre>
	 * 설명 footer에서 카테고리 클릭시 호출되는 requestMapping 메소드
	 * 설명 PARENT_CTRY_CD 및 LVL_SEQ 에 따라서 대분류 / 중분류 / 소분류 카테고리 목록을 가져온다.
	 * @param request PARENT_CTRY_CD, LVL_SEQ
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 20. 오후 4:19:47
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	@RequestMapping("/mainSelectListCtry.do")
	public ModelAndView mainSelectListCtry(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectListCtry START☆★☆★☆★☆★☆★☆★☆");

		LoggerUtil.writeMap(inParam);

		ModelAndView mav = new ModelAndView("web/main/mainSelectListCtry");
		mav.addObject("result", webMainService.selectListCtry());

		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE mainSelectListLargeCtry END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}

	@RequestMapping("/selectMenuAjax.do")
	public ModelAndView selectMenuAjax(HttpServletRequest request, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectMenuAjax START☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("jsonView");
		int nRet = 0;

		if(WebCommonUtil.isLogin(request)){
			WebSession session = (WebSession)request.getSession().getAttribute("user");
			logger.info("MBER_SEQ[ " + session.getMBER_SEQ() + "]");
			inParam.put("MBER_SEQ", session.getMBER_SEQ());

			Map<String, Object> map = webMainService.selectMenuInfo(session.getMBER_SEQ());
			if(map != null ){
				nRet = 1;
				mav.addObject("menu", map);
			}
		}

		mav.addObject("data", nRet);
		return mav;
	}

	@RequestMapping("/selectCountCartAjax.do")
	public ModelAndView selectCountCardAjax(HttpServletRequest request, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆MOBILE selectCountCardAjax START☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("jsonView");
		if(WebCommonUtil.isLogin(request)){
			WebSession session = (WebSession)request.getSession().getAttribute("user");
			logger.info("MBER_SEQ[ " + session.getMBER_SEQ() + "]");

			mav.addObject("carts", webMainService.selectCountCart(session.getMBER_SEQ()));
		}
		else{
			mav.addObject("carts", 0);
		}

		return mav;
	}


	@RequestMapping("/selectMainNotice.do")
	public ModelAndView selectMainNotice(HttpServletRequest request, @RequestParam Map<String, Object> inParam) throws Exception{

		ModelAndView mav = new ModelAndView();

		try{



			ModelMap main = webMainService.useSateInfo(inParam);

			mav.setViewName("web/board/selectMainNotice");
			mav.addObject("notice"		, "");		// 4.공지사항
			mav.addObject("termsAgree"	, "");	// 3.약관 동의(변경)
			mav.addObject("useingStop"	, main.get("useingStop"));	// 1.이용정지 안내
			mav.addObject("sellerGuide"	, "");	// 2.판매회원 가입 반려 안내

		}catch(Exception e){
			e.printStackTrace();
		}


		return mav;

	}
}