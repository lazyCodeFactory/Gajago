/**
 * 
 */
package com.ssocio.sharing.cmmn.admin.handler;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.admin.util.AdminCommonUtil;
import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.handler.AbstractHandlerInterceptor;
import com.ssocio.sharing.cmmn.instance.cmmncode.CmmnCodeTableManager;
import com.ssocio.sharing.cmmn.instance.config.AppConfigManager;
import com.ssocio.sharing.cmmn.service.CommonService;

/**
 * <pre>
 *
 *
 * @author Administrator
 * @version
 * @since 2015. 6. 12.. 오후 7:58:34
 * @see
 * @History
 *  Date          |    author    | 변경내용  
 *  2015. 6. 12.  |    S.B.Lee   | 신규
 * @Todo
 * </pre>
 */
public class AdminLoginCheckInterceptor extends AbstractHandlerInterceptor {
	
	private static final long serialVersionUID = 8506260809820203144L;
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminLoginCheckInterceptor.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	//@Resource(name = "synchrnService")
	@Autowired
	private CommonService commonService;
	
//	@Autowired
//	private AdminLogService adminLogService;
	//  private AdminCategoryService adminCategoryService;

	//  public void setCommonService(CommonService commonService){
	//   this.commonService = commonService;
	//  }

	/**
	 * <pre>
	 * preHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 6. 12. 오후 4:28:11
	 * @author adrra
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#preHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {

		try {
			
			// ----------------------------------------------------------------------
			// LOGIN VAL CHECK
			// ----------------------------------------------------------------------
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★[AdminLoginCheckInterceptor]☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[isLogin]"+AdminCommonUtil.isLogin(request));
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");

			request.getServerName();
			boolean secure= request.isSecure();
			if ( secure ) {
				request.setAttribute("INIT_URL", "https://"+request.getServerName()+":"+request.getServerPort());
			} else {
				request.setAttribute("INIT_URL", "http://"+request.getServerName()+":"+request.getServerPort());
			}
			
			// ----------------------------------------------------------------------
			// 로그인 체크
			// ----------------------------------------------------------------------
			if(!AdminCommonUtil.isLogin(request)){
				
//				String loginUri = AdminCommonUtil.getAuthLoginUri(request);
				String loginUri = "/admin/login.do";
				logger.debug("loginUri : " + loginUri);
				
				String ajaxCall = (String)request.getHeader("AJAX");//Ajax호출 여부
				
				//Ajax호출
				if(ajaxCall!=null && ajaxCall.equals("true")){
					response.setStatus(HttpServletResponse.SC_FORBIDDEN);
					response.getWriter().write(loginUri);
					response.flushBuffer();
					return false;
				} else { //Submit 호출
					response.sendRedirect(loginUri);
					return false;
				}
				
			}
			
			
		} catch (Exception e) {
			logger.error("AdminLoginCheckInterceptor 오류 [" + e.toString() + "]");
			e.printStackTrace();
		}
		return true;
	}
	
	/**
	 * <pre>
	 * postHandle
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param model
	 * @throws Exception 
	 * @exception 
	 * @date 2014. 8. 20. 오후 4:28:31
	 * @author adrra
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#postHandle(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, org.springframework.web.servlet.ModelAndView)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView model) throws Exception {
		// TODO Auto-generated method stub
	}

	/**
	 * <pre>
	 * afterCompletion
	 * 
	 * @param request
	 * @param response
	 * @param handler
	 * @param exception
	 * @throws Exception 
	 * @exception 
	 * @date 2014. 8. 20. 오후 4:28:44
	 * @author adrra
	 * @see org.springframework.web.servlet.handler.HandlerInterceptorAdapter#afterCompletion(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse, java.lang.Object, java.lang.Exception)
	 * @비고
	 * 
	 * </pre>
	 */
	@Override
	public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception) throws Exception {
		// TODO Auto-generated method stub
	}

	/**
	 * <pre>
	 * AfterContextPathUri반환
	 *  - request에서 가져옴
	 * @param request
	 * @return 
	 * @exception 
	 * @date 2014. 8. 6. 오전 10:43:38
	 * @author adrra
	 * @비고
	 * 
	 * </pre>
	 */
	public static String getAfterContextPathUri(HttpServletRequest request) {

		String requestUri             = "";
		String strAfterContextPathUri = "";
		
		requestUri = request.getRequestURI();   // ex) /gapping/web/web.apiTest
		logger.debug("requestUri          : " + requestUri);
		strAfterContextPathUri = requestUri.substring(request.getContextPath().length());
		//logger.debug("@@afterContextPathUri : " + strAfterContextPathUri);
		
		return strAfterContextPathUri;
	}
}
