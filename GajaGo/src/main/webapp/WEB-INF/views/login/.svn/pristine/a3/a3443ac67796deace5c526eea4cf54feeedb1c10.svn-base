package com.ssocio.sharing.service.seller;

import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.ssocio.sharing.cmmn.admin.util.FileUtil;
import com.ssocio.sharing.dao.seller.SellerBrandDao;
import com.ssocio.sharing.dao.seller.SellerCommonDao;

/**
 * <pre>
 * 브랜드 서비스
 * 브랜드 관리를 위한 서비스
 * @author Y.I.Chun
 * @version 
 * @since 2015. 7. 6. 오후 6:41:07
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 7. 6.   |    Y.I.Chun  | 신규
 * @Todo
 * </pre>
 */
@Service
public class SellerBrandServiceImpl implements SellerBrandService {
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerBrandServiceImpl.class);

	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="sellerCommonDao")
	private SellerCommonDao sellerCommonDao;
	@Resource(name="sellerBrandDao")
	private SellerBrandDao sellerBrandDao;
	
	/**
	 * <pre>
	 * 브랜드 리스트
	 * 브랜드 리스트정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap selectBrandList(Map<String, Object> inParam) throws Exception {

		ModelMap mm = new ModelMap();
		//노출여부관계없이 조회
		inParam.put("viewYn", null);
		mm.put("brandList", sellerBrandDao.selectBrandList(inParam));
		return mm;
	}
	
	/**
	 * <pre>
	 * 브랜드정보 조회
	 * 브랜드정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:44:52
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap selectBrandInfo(Map<String, Object> inParam) throws Exception {

		ModelMap mm = new ModelMap();
		mm.put("brandInfo", sellerBrandDao.selectBrandInfo(inParam));
		mm.put("brandCtryList", sellerBrandDao.selectBrandCtryList(inParam));
		return mm;
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 정보 등록
	 * 브랜드카테고리 정보를 등록 합니다.
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:13
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap insertBrandCtry (Map<String, Object> inParam) throws Exception {
		//브랜드카테고리 삭제
		sellerBrandDao.insertBrandCtry(inParam);
		
		//삭제후 브랜드카테고리정보 재조회
		ModelMap mm = new ModelMap();
		mm.put("brandCtryList", sellerBrandDao.selectBrandCtryList(inParam));
		return mm;
		
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 정보 삭제
	 * 브랜드카테고리 정보를 삭제 합니다.
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:13
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public ModelMap deleteBrandCtry (Map<String, Object> inParam) throws Exception {
		//브랜드카테고리 삭제
		sellerBrandDao.deleteBrandCtry(inParam);
		
		//삭제후 브랜드카테고리정보 재조회
		ModelMap mm = new ModelMap();
		mm.put("brandCtryList", sellerBrandDao.selectBrandCtryList(inParam));
		return mm;
		
	}
	
	/**
	 * <pre>
	 * 브랜드정보 수정
	 * 브랜드정보를 수정 합니다.
	 * @param req
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:13
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public void updateBrandInfo (MultipartHttpServletRequest req, Map<String, Object> inParam) throws Exception {
		
		//브랜드이미지 파일
		MultipartFile brandImg = req.getFile("brandImg");
		
		//브랜드이미지 등록
		String fileSeq = null;
		if(brandImg != null && brandImg.getSize() > 0){
			Map<String, Object> fileInfo = FileUtil.saveMultipartFile(brandImg);//파일 저장
			fileSeq = sellerCommonDao.insertFile(fileInfo);
		}
		inParam.put("fileSeq", fileSeq);

		sellerBrandDao.updateBrandInfo(inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드정보 삭제
	 * 브랜드정보를 삭제 합니다.
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:13
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public void deleteBrandInfo(Map<String, Object> inParam) throws Exception {
		sellerBrandDao.deleteBrandInfo(inParam);
		sellerBrandDao.deleteBrandCtry(inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드정보 등록
	 * 브랜드정보를 등록 합니다.
	 * @param req
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 7. 8. 오후 4:45:31
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.service.admin
	 * </pre>
	 */
	public String insertBrandInfo (MultipartHttpServletRequest req, Map<String, Object> inParam) throws Exception {

		//브랜드이미지 파일
		MultipartFile brandImg = req.getFile("regBrandImg");
		
		//브랜드이미지 등록
		String fileSeq = null;
		if(brandImg != null && brandImg.getSize() > 0){
			Map<String, Object> fileInfo = FileUtil.saveMultipartFile(brandImg);//파일 저장
			fileSeq = sellerCommonDao.insertFile(fileInfo);
		}
		inParam.put("fileSeq", fileSeq);
				
		String brandCd = sellerBrandDao.insertBrandInfo(inParam);
		
		String[] ctryCdList = (String[])inParam.get("brandCtryCd");
		if(ctryCdList != null && ctryCdList.length > 0){
			Map<String, Object> param = new HashMap<String, Object>();
			param.put("brandCd", brandCd);
			for(String ctryCd : ctryCdList){
				param.put("ctryCd", ctryCd);
				sellerBrandDao.insertBrandCtry(param);
			}
		}
		return brandCd;
	}
}