package com.ssocio.sharing.dao.seller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 공통 Dao
 * 공통 처리 Dao
 * @author S.B.LEE
 * @version
 * @since 2015. 6. 22.. 오후 4:24:10
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 6. 22.	|	S.B.LEE	|신규
 * @쌔애
 * </pre>
 */
@Component
public class SellerJoinDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerJoinDao.class);

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionSeller")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}


	public List<Map<String, Object>> selectAgreePopup(ModelMap mm)throws Exception {
		logger.info("@@@ DAO @@@ selectAgreePopup Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("sellerJoinMapper.selectAgreePopup", mm);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}



	public int insertUserMber(Map<String, Object> inParam) throws Exception {

		logger.info("@@@ DAO @@@ insertUserMber Start");
		int ret = 0;
		try {
			ret = sqlSession.insert("sellerJoinMapper.insertUserMber", inParam);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}

	public int insertAgree(Map<String, Object> inParam) throws Exception {

		logger.info("@@@ DAO @@@ insertAgree Start");
		int ret = 0;
		try {
			ret = sqlSession.insert("sellerJoinMapper.insertAgree", inParam);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}


	public int insertCmpnyNo(Map<String, Object> inParam) throws Exception {

		logger.info("@@@ DAO @@@ insertCmpnyNo Start");
		int ret = 0;
		try {
			ret = sqlSession.insert("sellerJoinMapper.insertCmpnyNo", inParam);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}


	public int insertMiniShop(Map<String, Object> inParam) throws Exception {

		logger.info("@@@ DAO @@@ insertCmpnyNo Start");
		int ret = 0;
		try {
			ret = sqlSession.insert("sellerJoinMapper.insertMiniShop", inParam);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}

	public int insertMberDtl(Map<String, Object> inParam) throws Exception {

		logger.info("@@@ DAO @@@ insertMberDtl Start");
		int ret = 0;
		try {
			ret = sqlSession.insert("sellerJoinMapper.insertMberDtl", inParam);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}




	public String selectLevCode(String code) throws Exception{
		String comCdNm;
		try {
			comCdNm = sqlSession.selectOne("sellerJoinMapper.selectLevCode", code);
		} catch (Exception e) {
			logger.error("selectLevCode DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}

		return comCdNm;
	}


	public int selecMberPhoneChek(Map<String, Object> inParam)  throws Exception{
		int comCdNm;
		try {
			comCdNm = sqlSession.selectOne("sellerJoinMapper.selecMberPhoneChek", inParam);
		} catch (Exception e) {
			logger.error("selecMberPhoneChek DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}

		return comCdNm;
	}
	public int selecMberEmailChek(Map<String, Object> inParam)  throws Exception{
		int comCdNm;
		try {
			comCdNm = sqlSession.selectOne("sellerJoinMapper.selecMberEmailChek", inParam);
		} catch (Exception e) {
			logger.error("selecMberEmailChek DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}

		return comCdNm;
	}
	public int selecMberEmailChek1(Map<String, Object> inParam)  throws Exception{
		int comCdNm;
		try {
			comCdNm = sqlSession.selectOne("sellerJoinMapper.selecMberEmailChek1", inParam);
		} catch (Exception e) {
			logger.error("selecMberEmailChek1 DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}

		return comCdNm;
	}

	public int updateUserMber(Map<String, Object> inParam) throws Exception {

		logger.info("@@@ DAO @@@ updateUserMber Start");
		LoggerUtil.writeMap(inParam);
		int ret = 0;
		try {
			ret = sqlSession.update("sellerJoinMapper.updateUserMber", inParam);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}

	public int updateMberDtl(Map<String, Object> inParam) throws Exception {

		logger.info("@@@ DAO @@@ updateMberDtl Start");
		int ret = 0;
		try {
			ret = sqlSession.update("sellerJoinMapper.updateMberDtl", inParam);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}

	public Map<String, Object> selecMberInfoChek(Map<String, Object> inParam) throws Exception{
		Map<String, Object> info;
		try {
			info = sqlSession.selectOne("sellerJoinMapper.selecMberInfoChek", inParam);
		} catch (Exception e) {
			logger.error("selecMberInfoChek DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}

		return info;
	}

	/*
	 * ******************************************************************************
	 * 가입 추가 by SEKIM
	 * ******************************************************************************
	 */

	// insert시 mberSeq 가져오기
	public String selectMberSeq() throws Exception{
		String MBER_SEQ="";
		try {
			MBER_SEQ = sqlSession.selectOne("sellerJoinMapper.selectMberSeq");
		} catch (Exception e) {
			logger.error("selectMberSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return MBER_SEQ;
	}

	// insert시 WishSeq 가져오기
	public String selectWishSeq() throws Exception {
		String WISH_SEQ="";
		try {
			WISH_SEQ = sqlSession.selectOne("sellerJoinMapper.selectWishSeq");
		} catch (Exception e) {
			logger.error("selectWishSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return WISH_SEQ;
	}

	// insert시 SerialKey 가져오기
	public String selectSerialKey() throws Exception{
		String SERIAL_KEY="";
		try {
			SERIAL_KEY = sqlSession.selectOne("sellerJoinMapper.selectSerialKey");
		} catch (Exception e) {
			logger.error("selectSerialKey DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return SERIAL_KEY;
	}

	public String selectSellerSeq()throws Exception  {
		String SELLER_CD="";
		try {
			SELLER_CD = sqlSession.selectOne("sellerJoinMapper.selectSellerSeq");
		} catch (Exception e) {
			logger.error("selectSellerSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return SELLER_CD;
	}

	public void insertUserMberS(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.insert("sellerJoinMapper.insertUserMberS", inParam);
		} catch (Exception e) {
			logger.error("insertUserMberS DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void insertSellerInfo(Map<String, Object> inParam) throws Exception {
		try {
			sqlSession.insert("sellerJoinMapper.insertSellerInfo", inParam);
		} catch (Exception e) {
			logger.error("insertSellerInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void insertWishCate(Map<String, Object> inParam)throws Exception  {
		try {
			sqlSession.insert("sellerJoinMapper.insertWishCate", inParam);
		} catch (Exception e) {
			logger.error("insertWishCate DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void insertMberMiniShop(Map<String, Object> inParam)throws Exception {
		try {
			sqlSession.insert("sellerJoinMapper.insertMberMiniShop", inParam);
		} catch (Exception e) {
			logger.error("insertMberMiniShop DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void insertGrpProd(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.insert("sellerJoinMapper.insertGrpProd", inParam);
		} catch (Exception e) {
			logger.error("insertGrpProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void insertAlrm(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.insert("sellerJoinMapper.insertAlrm", inParam);
		} catch (Exception e) {
			logger.error("insertAlrm DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public Map<String, Object> selectMyAccount (Map<String, Object> inParam) throws Exception{
		logger.info("selectMyAccount Start");
		return sqlSession.selectOne("sellerJoinMapper.selectMyAccount", inParam);
	}

	public String selectsiteIFUrl() throws Exception {
		return sqlSession.selectOne("sellerJoinMapper.selectsiteIFUrl");
	}

	// 판매회원 전환
	public int updateSellerInfo(Map<String, Object> inParam) throws Exception {

		logger.info("@@@ DAO @@@ updateSellerInfo Start");
		LoggerUtil.writeMap(inParam);
		int ret = 0;
		try {
			ret = sqlSession.update("sellerJoinMapper.updateSellerInfo", inParam);
		} catch (Exception e) {
			logger.error(" DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}

	// 미니샵 중복 확인
	public int selectShopPathCount(Map<String, Object> inParam) throws Exception{
		// // ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectShopPathCount Start");
		int count= 0;
		try {
			count = sqlSession.selectOne("sellerJoinMapper.selectShopPathCount", inParam);
		}catch (Exception e) {
			logger.error("selectShopPathCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	// 사업자번호 중복 확인
	public int selectAuthCPNY(Map<String, Object> inParam) throws Exception{
		logger.info("selectAuthCPNY Start");
		int count= 0;
		try {
			count = sqlSession.selectOne("sellerJoinMapper.selectAuthCPNY", inParam);
		}catch (Exception e) {
			logger.error("selectShopPathCount DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	// 회원가입 히스토리 처리
	public void insertUserMberHist(Map<String, Object> inParam)throws Exception  {
		try {
			sqlSession.insert("sellerJoinMapper.insertUserMberHist", inParam);
		} catch (Exception e) {
			logger.error("insertUserMberHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public Map<String, Object> selectUserInfo(Map<String, Object> inParam) throws Exception{
		logger.info("selectTerms Start");
		Map<String, Object> mm = null;
		try {
			mm =  sqlSession.selectOne("sellerJoinMapper.selectUserInfo", inParam);
		} catch (Exception e) {
			logger.error("selectTerms DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return mm;
	}
	
	public Map<String, Object> goMyInfoInfo(Map<String, Object> inParam) {
		return sqlSession.selectOne("sellerJoinMapper.goMyInfoInfo",inParam);
	}
	
	public Integer updateMyInfo(Map<String, Object> inParam) {
		logger.debug("회원 정보 변경  - updateMyInfo:"+inParam);
		return sqlSession.selectOne("sellerJoinMapper.updateMyInfo",inParam);
	}
	
	public Integer updateMberInfo(Map<String, Object> inParam) {
		logger.debug("회원 정보 변경  - updateMberInfo:"+inParam);
		return sqlSession.selectOne("sellerJoinMapper.updateMberInfo",inParam);
	}
	
	public Integer updateMberDtlInfo(Map<String, Object> inParam) {
		logger.debug("회원 정보 변경  - updateMberDtlInfo:"+inParam);
		return sqlSession.selectOne("sellerJoinMapper.updateMberDtlInfo",inParam);
	}
	
	public Integer updatePwChg(Map<String, Object> inParam) {
		logger.debug("패스워드 변경  - updatePwChg:"+inParam);
		return sqlSession.selectOne("sellerJoinMapper.saveMyPwChange",inParam);
	}
	
	public Integer updateMyAccount(Map<String, Object> inParam) {
		logger.debug("계좌 변경  - updateMyAccount:"+inParam);
		return sqlSession.selectOne("sellerJoinMapper.updateMyAccount",inParam);
	}
}
