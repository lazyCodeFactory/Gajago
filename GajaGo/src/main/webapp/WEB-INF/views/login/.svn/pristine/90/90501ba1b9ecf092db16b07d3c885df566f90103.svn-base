package com.ssocio.sharing.service.web;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSessionException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.dao.web.MobileNoAuthPaymentDao;
import com.ssocio.sharing.dao.web.WebCtryDao;
import com.ssocio.sharing.service.admin.AdminReferServiceImpl;
import com.ssocio.sharing.vo.web.SetlInfo;










/**
 * <pre>
 * 결제 서비스
 * 결제 서비스
 * @author J.Y.KANG
 * @version
 * @since 2015. 7. 17. 오후 7:33:23
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 17.	|	J.Y.KANG	|신규
 * @비고
 * </pre>
 */
@Service
public class MobileNoAuthPaymentServiceImpl extends AdminReferServiceImpl implements MobilePaymentService {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(MobileNoAuthPaymentServiceImpl.class);
	
	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="mobileNoAuthPaymentDao")
	private MobileNoAuthPaymentDao mobileNoAuthPaymentDao;
	
	
//	@Resource(name="webCtryDao")
//	private WebCtryDao webCtryDao;

	
	
	@Override
	public ModelMap selectDaoTest(Map<String, Object> inParam)throws Exception{

		mobileNoAuthPaymentDao.testDao(inParam);
		return new ModelMap();
	}

	
	
	/**
	 * 	결제정보 json 데이터 insert
	 */
	@Override
	public ModelMap insertPaymentInfo(Map<String, Object> inParam) throws Exception {
		// TODO Auto-generated method stub
		
		mobileNoAuthPaymentDao.insertPaymentInfo(inParam);
		return null;
	}



	/**
	 *	결제정보 json 데이터 update
	 */
	@Override
	public ModelMap updatePaymentInfo(Map<String, Object> inParam) throws Exception {
		// TODO Auto-generated method stub
		
		mobileNoAuthPaymentDao.updatePaymentInfo(inParam);
		return null;
	}



	/**
	 * 	카드사 이름 정보 get
	 */
	@Override
	public String selectCardCompNm(String code) throws Exception {

		logger.debug("code : " + code);

		String knm = null;
		try {
			knm = mobileNoAuthPaymentDao.selectCardCompNm(code);
		}catch (Exception e) {
			throw e;
		}

		return knm;
	}



	
	/**
	 * 	결제 금액 가져오기
	 */
	@Override
	public int selectOrdInfo(String ordCd) throws Exception {
		// TODO Auto-generated method stub

		HashMap<String,Object>  ordInfo = mobileNoAuthPaymentDao.selectOrdInfo(ordCd);
		
		return ((BigDecimal) ordInfo.get("REAL_SELT_AMT")).intValue();
	}



	/**
	 * 	결제 완료처리
	 */
	@Override
	public boolean insertSetlInfo(SetlInfo ordVo) throws Exception {
		
		boolean rtn = false;
		
		int rtn1 = mobileNoAuthPaymentDao.insertSetlInfo(ordVo);		
		if(rtn1 < 1) throw new Exception("ORD_SETL_INFO 내역 INSERT 실패");
		
		int rtn2 = mobileNoAuthPaymentDao.updateOrdInfoStat(ordVo);		
		if(rtn2 < 1) throw new Exception("ORD_INFO 상태 UPDATE 실패");
		
		int rtn3 = mobileNoAuthPaymentDao.updateOrdProdInfoStat(ordVo);	
		if(rtn3 < 1) throw new Exception("ORD_PROD_INFO 상태 UPDATE 실패");
		
		logger.info("주문처리 성공 =====> "+rtn1 + ":" + rtn2 + ":" + rtn3);
		
		// 주문서에서 포인트 사용여부 체크
		Map<String,Object> pointMap = mobileNoAuthPaymentDao.selectPointUseAmt(ordVo.getOrdCd());
		int pointUseAmt = ((BigDecimal) pointMap.get("POINT_USE_AMT")).intValue();
		String mberSeq = String.valueOf((BigDecimal) pointMap.get("MBER_SEQ"));
		
		// 포인트를 사용 했을 경우
		if(pointUseAmt > 0 ){
			
			int mberPoint = mobileNoAuthPaymentDao.selectMberPoint(mberSeq);
			
			if(mberPoint < pointUseAmt){
				throw new Exception("잔여 포인트가 부족합니다." + "[결제 포인트 : "+pointUseAmt+", 잔여포인트 : "+ mberPoint +"]");
			}
		 	if ( CmmnCnst.SELT_UPPER_LIMIT_POINT < Long.valueOf(pointUseAmt) ){
				throw new Exception("포인트 사용액은 최대 " + CmmnCnst.SELT_UPPER_LIMIT_POINT + " point 입니다.");
			} 
		 	if ( pointUseAmt % CmmnCnst.POINT_UNIT_AMT != 0 ){
				throw new Exception("포인트는" + CmmnCnst.POINT_UNIT_AMT + "point 단위로 사용 가능합니다.");
			}
		 	
			int rtn4 = mobileNoAuthPaymentDao.updateUsedPoint(mberSeq, pointUseAmt);							
			if(rtn4 < 1) throw new Exception("포인트 차감 실패");
		
			int rtn5 = mobileNoAuthPaymentDao.insertPointUseLog(mberSeq, pointUseAmt, ordVo.getOrdCd());		
			if(rtn5 < 1) throw new Exception("포인트 사용내역 INSERT 실패");

			logger.info("포인트 차감 성공 =====>" + pointUseAmt + "원");
		}
		
		rtn = true;
		
		return rtn;
	}

	
	
	/**
	 * 	스마트폰셰어링 상품 구매시
	 */
	@Override
	@Transactional
	public int insertSetlInfoIssuBill(SetlInfo ordVo) throws Exception {
		
		int ret0 = mobileNoAuthPaymentDao.insertSetlInfo(ordVo);
		return 1;
	}



	/**
	 * 주문서의 포인트 사용량 확인
	 */
	@Override
	public Map<String, Object> selectPointUseAmt(String ordCd) throws Exception {
		return  mobileNoAuthPaymentDao.selectPointUseAmt(ordCd);
		
	}



	/**
	 * 	유저의 잔여포인트 확인
	 */
	@Override
	public int selectMberPoint(String mberSeq) throws Exception  {
		return  mobileNoAuthPaymentDao.selectMberPoint(mberSeq);
	}


}
