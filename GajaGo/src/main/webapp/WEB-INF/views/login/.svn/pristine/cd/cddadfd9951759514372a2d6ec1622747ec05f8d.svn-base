package com.ssocio.sharing.controller.admin;

import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.service.admin.AdminAdjustService;

/**
 * <pre>
 * 콩통 컨트롤러
 * 콩통 처리를 위한 컨트롤러
 * @author J.K.CHOI
 * @version
 * @since 2015. 7. 17. 오후 7:18:35
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 17.	|	J.K.CHOI	|신규
 * @비고
 * </pre>
 */
@Controller
public class AdminAdjustController extends AdminReferController {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminAdjustController.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private AdminAdjustService adminAdjustService;
	
	
	/**
	 * <pre>
	 * 정산대기 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectListAdjust.do")
	public ModelAndView selectListAdjust(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectListAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("list", adminAdjustService.selectListAdjust(inParam));			
			mav.setViewName("admin/adjust/selectListAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산대기 판매정산 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectListSellAdjust.do")
	public ModelAndView selectListSellAdjust(HttpServletRequest request, 
			HttpServletResponse response, 
			@RequestParam Map<String, Object> inParam
			) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectListSellAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("list", adminAdjustService.selectListSellAdjust(inParam));			
			mav.setViewName("admin/adjust/selectListSellAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산대기 셰어링정산 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectListShareAdjust.do")
	public ModelAndView selectListShareAdjust(HttpServletRequest request, 
			HttpServletResponse response, 
			@RequestParam Map<String, Object> inParam
			) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectListShareAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("list", adminAdjustService.selectListShareAdjust(inParam));			
			mav.setViewName("admin/adjust/selectListShareAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산대기 리스트 엑셀
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectListAdjustToExcel.do")
	public ModelAndView selectListAdjustToExcel(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectListAdjustToExcel START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		mav.setViewName("excelDownloadView");
		try {
			
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("SSOCIO_정산대기_"+today+".xls", check_browser(request)));
		
			String SheetName = "정산대기";
			
			List<String> excelTitle = new ArrayList<String>();
			
			//다날
			excelTitle.add("서비스");
			excelTitle.add("거래번호");
			excelTitle.add("CPID");
//			excelTitle.add("금액(취소시 마이너스)");
			excelTitle.add("남은결제금액");
			excelTitle.add("거래일시");
			excelTitle.add("주문번호");
			excelTitle.add("구매확정일");
			//쏘시오
			excelTitle.add("주문번호");
			excelTitle.add("업체ID");
			excelTitle.add("업체명");
			excelTitle.add("정산유형");
			excelTitle.add("상품ID");
			excelTitle.add("상품명");
//			excelTitle.add("판매기간");
			excelTitle.add("출고유형");
			excelTitle.add("구분");
			excelTitle.add("판매액-이달판매");
			excelTitle.add("판매액-이달환불");
			excelTitle.add("판매액-전달환불");
			
			excelTitle.add("NET결제금액");
			excelTitle.add("쿠폰사용금액");
			excelTitle.add("포인트사용금액");
			
			excelTitle.add("판매액-소계");
			excelTitle.add("총판매액");
			excelTitle.add("수수료율");
			excelTitle.add("판매수수료-이달판매");
			excelTitle.add("판매수수료-이달환불");
			excelTitle.add("판매수수료-전달환불");
			excelTitle.add("판매수수료-소계");
			excelTitle.add("총판매수수료");
			excelTitle.add("정산대상액");
			excelTitle.add("전담택배비");
			excelTitle.add("서버운영수수료");
			excelTitle.add("페널티");
			excelTitle.add("정산차감");
			excelTitle.add("최종지급액");
			excelTitle.add("회원유형");
			excelTitle.add("사업자등록번호");
			excelTitle.add("대표자");
			excelTitle.add("전화번호");
			excelTitle.add("주소");
			excelTitle.add("은행명");
			excelTitle.add("계좌번호");
			excelTitle.add("예금주명");
			excelTitle.add("정산여부");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("SELT_GB_CD_NM");      
			CellName.add("TR_ID");      
			CellName.add("CPID");      
//			CellName.add("AMT");      
			CellName.add("REMAIN_AMT");      
			CellName.add("TR_DT");      
			CellName.add("ORD_CD_DANAL");      
			CellName.add("CNF_YMD");      
			CellName.add("ORD_CD_SSOCIO");      
			CellName.add("MBER_SEQ");      
			CellName.add("NAME");      
			CellName.add("ADJ_GUBUN");      
			CellName.add("PROD_CD");      
			CellName.add("PROD_NM");      
//			CellName.add("SELL_PERIOD");      
			CellName.add("EXP_GUBUN");      
			CellName.add("GUBUN");      
			CellName.add("ORD_AMT1");      
			CellName.add("THIS_RFND");      
			CellName.add("LAST_RFND");     
			
			CellName.add("RL_AMT");     
			CellName.add("CPN_USE_AMT");     
			CellName.add("POINT_USE_AMT");     
			
			CellName.add("ORD_AMT2");      
			CellName.add("ORD_AMT3");      
			CellName.add("DNL_CMTN_RATE");      
			CellName.add("DNL_CMTN1");      
			CellName.add("DNL_CMTN_THIS_RFND");      
			CellName.add("DNL_CMTN_LAST_RFND");      
			CellName.add("DNL_CMTN2");      
			CellName.add("DNL_CMTN3");      
			CellName.add("ADJ_AMT2");      
			CellName.add("DLV_PRCE");      
			CellName.add("SERVER_CMTN");      
			CellName.add("PENALTY");      
			CellName.add("DSCNT_TOT_AMT");      
			CellName.add("ADJ_AMT3");      
			CellName.add("CMPNY_GUBUN");      
			CellName.add("CMPNY_NO");      
			CellName.add("CEO_NM");      
			CellName.add("CS_PER_TEL");      
			CellName.add("CMPNY_JUSO_DORO");      
			CellName.add("BANK_NM");      
			CellName.add("BANK_ACNT_NO");      
			CellName.add("ACNT_NM");      
			CellName.add("ADJ_STAT");      
			
			
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("excelList", adminAdjustService.selectListAdjustToExcel(inParam));
			mav.addObject("param", inParam);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping("/admin/adjust/selectListAdjustToCsv.do")
	public void selectListAdjustToCsv(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectListAdjustToCsv START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);
		try {
			
			List<String> excelTitle = new ArrayList<String>();
			
			//다날
			excelTitle.add("서비스");
			excelTitle.add("거래번호");
			excelTitle.add("CPID");
//			excelTitle.add("금액(취소시 마이너스)");
			excelTitle.add("남은결제금액");
			excelTitle.add("거래일시");
			excelTitle.add("주문번호");
			excelTitle.add("구매확정일");
			//쏘시오
			excelTitle.add("주문번호");
			excelTitle.add("업체ID");
			excelTitle.add("업체명");
			excelTitle.add("정산유형");
			excelTitle.add("상품ID");
			excelTitle.add("상품명");
//			excelTitle.add("판매기간");
			excelTitle.add("출고유형");
			excelTitle.add("구분");
			excelTitle.add("판매액-이달판매");
			excelTitle.add("판매액-이달환불");
			excelTitle.add("판매액-전달환불");
			
			excelTitle.add("NET결제금액");
			excelTitle.add("쿠폰사용금액");
			excelTitle.add("포인트사용금액");
			
			excelTitle.add("판매액-소계");
			excelTitle.add("총판매액");
			excelTitle.add("수수료율");
			excelTitle.add("판매수수료-이달판매");
			excelTitle.add("판매수수료-이달환불");
			excelTitle.add("판매수수료-전달환불");
			excelTitle.add("판매수수료-소계");
			excelTitle.add("총판매수수료");
			excelTitle.add("정산대상액");
			excelTitle.add("전담택배비");
			excelTitle.add("서버운영수수료");
			excelTitle.add("페널티");
			excelTitle.add("정산차감");
			excelTitle.add("최종지급액");
			excelTitle.add("회원유형");
			excelTitle.add("사업자등록번호");
			excelTitle.add("대표자");
			excelTitle.add("전화번호");
			excelTitle.add("주소");
			excelTitle.add("은행명");
			excelTitle.add("계좌번호");
			excelTitle.add("예금주명");
			excelTitle.add("정산여부");
			
			List<Map<String, Object>> list  = (List<Map<String, Object>> )adminAdjustService.selectListAdjustToExcel(inParam);
			
			response.setContentType("application/vnd.ms-excel:UTF-8");
//			response.setContentType("text/csv;charset= MS949");
		    response.setHeader("Content-Disposition", "attachment; filename=\"SSOCIO_SETTLEMENT_REF_SSOCIO_"+StringUtil.getCurrentDate()+".csv\"");
		    try
		    {
		        OutputStream outputStream = response.getOutputStream();
		        outputStream.write(0xEF);  
		        outputStream.write(0xBB);
		        outputStream.write(0xBF);   
		        StringBuffer outputResult = new StringBuffer();
		        for(String str : excelTitle){
		        	if(outputResult.length() > 0){
		        		outputResult.append("\t ");
		        	}
		        	outputResult.append(str); 
		        }
		        outputResult.append("\n");
		        
		        for(Map<String, Object> map : list){
		        	outputResult.append(map.get("SELT_GB_CD_NM")+"\t ");     
					outputResult.append("\'"+map.get("TR_ID")+"\t ");     
					outputResult.append("\'"+map.get("CPID")+"\t ");     
//					outputResult.append(map.get("AMT")+"\t ");     
					outputResult.append(map.get("REMAIN_AMT")+"\t ");     
					outputResult.append(map.get("TR_DT")+"\t ");     
					outputResult.append("\'"+map.get("ORD_CD_DANAL")+"\t ");     
					outputResult.append(map.get("CNF_YMD")+"\t ");     
					outputResult.append("\'"+map.get("ORD_CD_SSOCIO")+"\t ");     
					outputResult.append(map.get("MBER_SEQ")+"\t ");     
					outputResult.append(map.get("NAME")+"\t ");     
					outputResult.append(map.get("ADJ_GUBUN")+"\t ");     
					outputResult.append("\'"+map.get("PROD_CD")+"\t ");     
//					outputResult.append(map.get("PROD_NM")+"\t "); 
					if(map.get("PROD_NM") != null && !"".equals(map.get("PROD_NM").toString())){
						
						outputResult.append(map.get("PROD_NM").toString().replace(",", " ")+"\t "); 
					}else{
						
						outputResult.append(map.get("PROD_NM")+"\t "); 
					}
//					outputResult.append(map.get("SELL_PERIOD")+"\t ");     
					outputResult.append(map.get("EXP_GUBUN")+"\t ");     
					outputResult.append(map.get("GUBUN")+"\t ");     
					outputResult.append(map.get("ORD_AMT1")+"\t ");     
					outputResult.append(map.get("THIS_RFND")+"\t ");     
					outputResult.append(map.get("LAST_RFND")+"\t ");    
					
					outputResult.append(map.get("RL_AMT")+"\t ");    
					outputResult.append(map.get("CPN_USE_AMT")+"\t ");    
					outputResult.append(map.get("POINT_USE_AMT")+"\t ");    
					
					outputResult.append(map.get("ORD_AMT2")+"\t ");     
					outputResult.append(map.get("ORD_AMT3")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_RATE")+"\t ");     
					outputResult.append(map.get("DNL_CMTN1")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_THIS_RFND")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_LAST_RFND")+"\t ");     
					outputResult.append(map.get("DNL_CMTN2")+"\t ");     
					outputResult.append(map.get("DNL_CMTN3")+"\t ");     
					outputResult.append(map.get("ADJ_AMT2")+"\t ");     
					outputResult.append(map.get("DLV_PRCE")+"\t ");     
					outputResult.append(map.get("SERVER_CMTN")+"\t ");     
					outputResult.append(map.get("PENALTY")+"\t ");     
					outputResult.append(map.get("DSCNT_TOT_AMT")+"\t ");     
					outputResult.append(map.get("ADJ_AMT3")+"\t ");     
					outputResult.append(map.get("CMPNY_GUBUN")+"\t ");     
					outputResult.append("\'"+map.get("CMPNY_NO")+"\t ");     
					outputResult.append(map.get("CEO_NM")+"\t ");     
					outputResult.append("\'"+map.get("CS_PER_TEL")+"\t ");     
					if(map.get("CMPNY_JUSO_DORO") != null && !"".equals(map.get("CMPNY_JUSO_DORO").toString())){
						
						outputResult.append(map.get("CMPNY_JUSO_DORO").toString().replace(",", " ")+"\t "); 
					}else{
						
						outputResult.append(map.get("CMPNY_JUSO_DORO")+"\t "); 
					}
					outputResult.append(map.get("BANK_NM")+"\t ");     
					outputResult.append("\'"+map.get("BANK_ACNT_NO")+"\t ");     
					outputResult.append(map.get("ACNT_NM")+"\t ");     
					outputResult.append(map.get("ADJ_STAT")+"\n");
		        }
		        
		        outputStream.write(outputResult.toString().getBytes());
		        outputStream.flush();
		        outputStream.close();
		    }
		    catch(Exception e)
		    {
		        logger.error(">>>>> error : "+e.toString());
		    }
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		return;
	}
	
	@RequestMapping("/admin/adjust/selectListAdjustByTrToExcel.do")
	public ModelAndView selectListAdjustByTrToExcel(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectListAdjustToExcel START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		mav.setViewName("excelDownloadView");
		try {
			
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("SSOCIO_정산대기_결제기준_"+today+".xls", check_browser(request)));
			
			String SheetName = "정산대기결제기준";
			
			List<String> excelTitle = new ArrayList<String>();
			
			//다날
			excelTitle.add("서비스");
			excelTitle.add("거래번호");
			excelTitle.add("CPID");
//			excelTitle.add("금액(취소시 마이너스)");
			excelTitle.add("남은결제금액");
			excelTitle.add("거래일시");
			excelTitle.add("주문번호");
			excelTitle.add("구매확정일");
			//쏘시오
			excelTitle.add("주문번호");
			excelTitle.add("업체ID");
			excelTitle.add("업체명");
			excelTitle.add("정산유형");
			excelTitle.add("상품ID");
			excelTitle.add("상품명");

			excelTitle.add("진행상태");
			
//			excelTitle.add("판매기간");
			excelTitle.add("출고유형");
			excelTitle.add("구분");
			excelTitle.add("판매액-이달판매");
			excelTitle.add("판매액-이달환불");
			excelTitle.add("판매액-전달환불");
			
			excelTitle.add("NET결제금액");
			excelTitle.add("쿠폰사용금액");
			excelTitle.add("포인트사용금액");
			
			excelTitle.add("판매액-소계");
			excelTitle.add("총판매액");
			excelTitle.add("수수료율");
			excelTitle.add("판매수수료-이달판매");
			excelTitle.add("판매수수료-이달환불");
			excelTitle.add("판매수수료-전달환불");
			excelTitle.add("판매수수료-소계");
			excelTitle.add("총판매수수료");
			excelTitle.add("정산대상액");
			excelTitle.add("전담택배비");
			excelTitle.add("서버운영수수료");
			excelTitle.add("페널티");
			excelTitle.add("정산차감");
			excelTitle.add("최종지급액");
			excelTitle.add("회원유형");
			excelTitle.add("사업자등록번호");
			excelTitle.add("대표자");
			excelTitle.add("전화번호");
			excelTitle.add("주소");
			excelTitle.add("은행명");
			excelTitle.add("계좌번호");
			excelTitle.add("예금주명");
			excelTitle.add("정산여부");
			
			List<String> CellName = new ArrayList<String>();
			CellName.add("SELT_GB_CD_NM");      
			CellName.add("TR_ID");      
			CellName.add("CPID");      
//			CellName.add("AMT");      
			CellName.add("REMAIN_AMT");      
			CellName.add("TR_DT");      
			CellName.add("ORD_CD_DANAL");      
			CellName.add("CNF_YMD");      
			CellName.add("ORD_CD_SSOCIO");      
			CellName.add("MBER_SEQ");      
			CellName.add("NAME");      
			CellName.add("ADJ_GUBUN");      
			CellName.add("PROD_CD");      
			CellName.add("PROD_NM");  
			
			CellName.add("PROC_STAT_CD_NM");  
			
//			CellName.add("SELL_PERIOD");      
			CellName.add("EXP_GUBUN");      
			CellName.add("GUBUN");      
			CellName.add("ORD_AMT1");      
			CellName.add("THIS_RFND");      
			CellName.add("LAST_RFND");     
			
			CellName.add("RL_AMT");     
			CellName.add("CPN_USE_AMT");     
			CellName.add("POINT_USE_AMT");     
			
			CellName.add("ORD_AMT2");      
			CellName.add("ORD_AMT3");      
			CellName.add("DNL_CMTN_RATE");      
			CellName.add("DNL_CMTN1");      
			CellName.add("DNL_CMTN_THIS_RFND");      
			CellName.add("DNL_CMTN_LAST_RFND");      
			CellName.add("DNL_CMTN2");      
			CellName.add("DNL_CMTN3");      
			CellName.add("ADJ_AMT2");      
			CellName.add("DLV_PRCE");      
			CellName.add("SERVER_CMTN");      
			CellName.add("PENALTY");      
			CellName.add("DSCNT_TOT_AMT");      
			CellName.add("ADJ_AMT3");      
			CellName.add("CMPNY_GUBUN");      
			CellName.add("CMPNY_NO");      
			CellName.add("CEO_NM");      
			CellName.add("CS_PER_TEL");      
			CellName.add("CMPNY_JUSO_DORO");      
			CellName.add("BANK_NM");      
			CellName.add("BANK_ACNT_NO");      
			CellName.add("ACNT_NM");      
			CellName.add("ADJ_STAT");      
			
			
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("excelList", adminAdjustService.selectListAdjustByTrToExcel(inParam));
			mav.addObject("param", inParam);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	@RequestMapping("/admin/adjust/selectListAdjustByTrToCsv.do")
	public void selectListAdjustByTrToCsv(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectListAdjustByTrToCsv START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);
		try {
			List<String> excelTitle = new ArrayList<String>();
			
			//다날
			excelTitle.add("서비스");
			excelTitle.add("거래번호");
			excelTitle.add("CPID");
//			excelTitle.add("금액(취소시 마이너스)");
			excelTitle.add("남은결제금액");
			excelTitle.add("거래일시");
			excelTitle.add("주문번호");
			excelTitle.add("구매확정일");
			//쏘시오
			excelTitle.add("주문번호");
			excelTitle.add("업체ID");
			excelTitle.add("업체명");
			excelTitle.add("정산유형");
			excelTitle.add("상품ID");
			excelTitle.add("상품명");
			
			excelTitle.add("진행상태");
			
//			excelTitle.add("판매기간");
			excelTitle.add("출고유형");
			excelTitle.add("구분");
			excelTitle.add("판매액-이달판매");
			excelTitle.add("판매액-이달환불");
			excelTitle.add("판매액-전달환불");
			
			excelTitle.add("NET결제금액");
			excelTitle.add("쿠폰사용금액");
			excelTitle.add("포인트사용금액");
			
			excelTitle.add("판매액-소계");
			excelTitle.add("총판매액");
			excelTitle.add("수수료율");
			excelTitle.add("판매수수료-이달판매");
			excelTitle.add("판매수수료-이달환불");
			excelTitle.add("판매수수료-전달환불");
			excelTitle.add("판매수수료-소계");
			excelTitle.add("총판매수수료");
			excelTitle.add("정산대상액");
			excelTitle.add("전담택배비");
			excelTitle.add("서버운영수수료");
			excelTitle.add("페널티");
			excelTitle.add("정산차감");
			excelTitle.add("최종지급액");
			excelTitle.add("회원유형");
			excelTitle.add("사업자등록번호");
			excelTitle.add("대표자");
			excelTitle.add("전화번호");
			excelTitle.add("주소");
			excelTitle.add("은행명");
			excelTitle.add("계좌번호");
			excelTitle.add("예금주명");
			excelTitle.add("정산여부");
			
			List<Map<String, Object>> list  = (List<Map<String, Object>> )adminAdjustService.selectListAdjustByTrToExcel(inParam);
			
			response.setContentType("application/vnd.ms-excel:UTF-8");
//			response.setContentType("text/csv;charset= MS949");
		    response.setHeader("Content-Disposition", "attachment; filename=\"SSOCIO_SETTLEMENT_REF_DANAL_"+StringUtil.getCurrentDate()+".csv\"");
		    try
		    {
		        OutputStream outputStream = response.getOutputStream();
		        outputStream.write(0xEF);  
		        outputStream.write(0xBB);
		        outputStream.write(0xBF);   
		        StringBuffer outputResult = new StringBuffer();
		        for(String str : excelTitle){
		        	if(outputResult.length() > 0){
		        		outputResult.append("\t ");
		        	}
		        	outputResult.append(str); 
		        }
		        outputResult.append("\n");
		        
		        for(Map<String, Object> map : list){
		        	outputResult.append(map.get("SELT_GB_CD_NM")+"\t ");     
					outputResult.append("\'"+map.get("TR_ID")+"\t ");     
					outputResult.append("\'"+map.get("CPID")+"\t ");     
//					outputResult.append(map.get("AMT")+"\t ");     
					outputResult.append(map.get("REMAIN_AMT")+"\t ");     
					outputResult.append(map.get("TR_DT")+"\t ");     
					outputResult.append("\'"+map.get("ORD_CD_DANAL")+"\t ");     
					outputResult.append(map.get("CNF_YMD")+"\t ");     
					outputResult.append("\'"+map.get("ORD_CD_SSOCIO")+"\t ");     
					outputResult.append(map.get("MBER_SEQ")+"\t ");     
					outputResult.append(map.get("NAME")+"\t ");     
					outputResult.append(map.get("ADJ_GUBUN")+"\t ");     
					outputResult.append("\'"+map.get("PROD_CD")+"\t ");     
//					outputResult.append(map.get("PROD_NM")+"\t "); 
					
					if(map.get("PROD_NM") != null && !"".equals(map.get("PROD_NM").toString())){
						
						outputResult.append(map.get("PROD_NM").toString().replace(",", " ")+"\t "); 
					}else{
						
						outputResult.append(map.get("PROD_NM")+"\t "); 
					}
					outputResult.append(map.get("PROC_STAT_CD_NM")+"\t "); 
					
//					outputResult.append(map.get("SELL_PERIOD")+"\t ");     
					outputResult.append(map.get("EXP_GUBUN")+"\t ");     
					outputResult.append(map.get("GUBUN")+"\t ");     
					outputResult.append(map.get("ORD_AMT1")+"\t ");     
					outputResult.append(map.get("THIS_RFND")+"\t ");     
					outputResult.append(map.get("LAST_RFND")+"\t ");    
					
					outputResult.append(map.get("RL_AMT")+"\t ");    
					outputResult.append(map.get("CPN_USE_AMT")+"\t ");    
					outputResult.append(map.get("POINT_USE_AMT")+"\t ");    
					
					outputResult.append(map.get("ORD_AMT2")+"\t ");     
					outputResult.append(map.get("ORD_AMT3")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_RATE")+"\t ");     
					outputResult.append(map.get("DNL_CMTN1")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_THIS_RFND")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_LAST_RFND")+"\t ");     
					outputResult.append(map.get("DNL_CMTN2")+"\t ");     
					outputResult.append(map.get("DNL_CMTN3")+"\t ");     
					outputResult.append(map.get("ADJ_AMT2")+"\t ");     
					outputResult.append(map.get("DLV_PRCE")+"\t ");     
					outputResult.append(map.get("SERVER_CMTN")+"\t ");     
					outputResult.append(map.get("PENALTY")+"\t ");     
					outputResult.append(map.get("DSCNT_TOT_AMT")+"\t ");     
					outputResult.append(map.get("ADJ_AMT3")+"\t ");     
					outputResult.append(map.get("CMPNY_GUBUN")+"\t ");     
					outputResult.append("\'"+map.get("CMPNY_NO")+"\t ");     
					outputResult.append(map.get("CEO_NM")+"\t ");     
					outputResult.append("\'"+map.get("CS_PER_TEL")+"\t ");     
					if(map.get("CMPNY_JUSO_DORO") != null && !"".equals(map.get("CMPNY_JUSO_DORO").toString())){
						
						outputResult.append(map.get("CMPNY_JUSO_DORO").toString().replace(",", " ")+"\t "); 
					}else{
						
						outputResult.append(map.get("CMPNY_JUSO_DORO")+"\t "); 
					}
					outputResult.append(map.get("BANK_NM")+"\t ");     
					outputResult.append("\'"+map.get("BANK_ACNT_NO")+"\t ");     
					outputResult.append(map.get("ACNT_NM")+"\t ");     
					outputResult.append(map.get("ADJ_STAT")+"\"\n");
		        }
		        
		        outputStream.write(outputResult.toString().getBytes());
		        outputStream.flush();
		        outputStream.close();
		    }
		    catch(Exception e)
		    {
		        logger.error(">>>>> error : "+e.toString());
		    }
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		return;
	}
	
	/**
	 * <pre>
	 * 정산대기 판매정산 상세 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectDtlListSellAdjust.do")
	public ModelAndView selectDtlListSellAdjust(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectDtlListSellAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			logger.debug(">>>>> inParam : "+inParam.toString());
			mav.addObject("list", adminAdjustService.selectDtlListSellAdjust(inParam));			
			mav.addObject("params", inParam);
			mav.setViewName("admin/adjust/selectDtlListSellAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산대기 셰어링정산 상세 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectDtlListShareAdjust.do")
	public ModelAndView selectDtlListShareAdjust(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectDtlListShareAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			logger.debug(">>>>> inParam : "+inParam.toString());
			mav.addObject("list", adminAdjustService.selectDtlListShareAdjust(inParam));			
			mav.addObject("params", inParam);
			mav.setViewName("admin/adjust/selectDtlListShareAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산대기 상세 선택정산완료 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/goCpltAdjust.do")
	public String goCpltAdjust(HttpServletRequest request, HttpServletResponse response
			, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("goCpltAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		logger.debug(">>>>> inParam : "+inParam.toString());
		LoggerUtil.writeMap(inParam);
		try {
			adminAdjustService.insertAdjustInfo(inParam);
			adminAdjustService.goCpltAdjust(inParam);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		if( "1".equals(inParam.get("PROD_TYPE_CD").toString()) ){
			return "redirect:/admin/adjust/selectDtlListSellAdjust.do?S_START_DATE=" + inParam.get("S_START_DATE") + "&S_END_DATE=" + inParam.get("S_END_DATE")+ "&MBER_SEQ=" + inParam.get("MBER_SEQ");
		}else{
			return "redirect:/admin/adjust/selectDtlListShareAdjust.do?S_START_DATE=" + inParam.get("S_START_DATE") + "&S_END_DATE=" + inParam.get("S_END_DATE")+ "&MBER_SEQ=" + inParam.get("MBER_SEQ");
		}

	}
	
	/**
	 * <pre>
	 * 정산대기 상세 정산상태변경
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping ("/admin/adjust/chgAdjStat.do")
	public ModelAndView chgAdjStat(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("chgAdjStat START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);

		try {
			logger.info(">>>>>>>>>>>>>>>> ADJ_STAT : " + inParam.get("ADJ_STAT"));
			
			mav.addObject("CNT", adminAdjustService.chgAdjStat(inParam));
			mav.setViewName("jsonView");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산완료 전체정산 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectCpltListAdjust.do")
	public ModelAndView selectCpltListAdjust(HttpServletRequest request, 
			HttpServletResponse response, 
			@RequestParam Map<String, Object> inParam
			) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectCpltListAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("list", adminAdjustService.selectCpltListAdjust(inParam));		
			mav.setViewName("admin/adjust/selectCpltListAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산완료 판매정산 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectCpltListSellAdjust.do")
	public ModelAndView selectCpltListSellAdjust(HttpServletRequest request, 
			HttpServletResponse response, 
			@RequestParam Map<String, Object> inParam
			) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectCpltListSellAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("list", adminAdjustService.selectCpltListSellAdjust(inParam));			
			mav.setViewName("admin/adjust/selectCpltListSellAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산완료 셰어링정산 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectCpltListShareAdjust.do")
	public ModelAndView selectCpltListShareAdjust(HttpServletRequest request, 
			HttpServletResponse response, 
			@RequestParam Map<String, Object> inParam
			) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectCpltListShareAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("list", adminAdjustService.selectCpltListShareAdjust(inParam));			
			mav.setViewName("admin/adjust/selectCpltListShareAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산완료 리스트 엑셀
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectCpltListAdjustToExcel.do")
	public ModelAndView selectCpltListAdjustToExcel(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectCpltListAdjustToExcel START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		mav.setViewName("excelDownloadView");
		try {
			
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("SSOCIO_정산완료_"+today+".xls", check_browser(request)));
		
			String SheetName = "정산완료";
			
			List<String> excelTitle = new ArrayList<String>();
			
			//다날
			excelTitle.add("서비스");
			excelTitle.add("거래번호");
			excelTitle.add("CPID");
			excelTitle.add("금액(취소시 마이너스)");
			excelTitle.add("거래일시");
			excelTitle.add("주문번호");
			excelTitle.add("구매확정일");
			//쏘시오
			excelTitle.add("주문번호");
			excelTitle.add("업체ID");
			excelTitle.add("업체명");
			excelTitle.add("정산유형");
			excelTitle.add("상품ID");
			excelTitle.add("상품명");
			excelTitle.add("판매기간");
			excelTitle.add("출고유형");
			excelTitle.add("구분");
			excelTitle.add("판매액-이달판매");
			excelTitle.add("판매액-이달환불");
			excelTitle.add("판매액-전달환불");
			excelTitle.add("판매액-소계");
			excelTitle.add("총판매액");
			excelTitle.add("수수료율");
			excelTitle.add("판매수수료-이달판매");
			excelTitle.add("판매수수료-이달환불");
			excelTitle.add("판매수수료-전달환불");
			excelTitle.add("판매수수료-소계");
			excelTitle.add("총판매수수료");
			excelTitle.add("정산대상액");
			excelTitle.add("전담택배비");
			excelTitle.add("서버운영수수료");
			excelTitle.add("페널티");
			excelTitle.add("정산차감");
			excelTitle.add("최종지급액");
			excelTitle.add("회원유형");
			excelTitle.add("사업자등록번호");
			excelTitle.add("대표자");
			excelTitle.add("전화번호");
			excelTitle.add("주소");
			excelTitle.add("은행명");
			excelTitle.add("계좌번호");
			excelTitle.add("예금주명");
			excelTitle.add("정산여부");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("SELT_GB_CD_NM");      
			CellName.add("TR_ID");      
			CellName.add("CPID");      
			CellName.add("AMT");      
			CellName.add("TR_DT");      
			CellName.add("ORD_CD_DANAL");      
			CellName.add("CNF_YMD");      
			CellName.add("MBER_SEQ");      
			CellName.add("ORD_CD_SSOCIO");      
			CellName.add("NAME");      
			CellName.add("ADJ_GUBUN");      
			CellName.add("PROD_CD");      
			CellName.add("PROD_NM");      
			CellName.add("SELL_PERIOD");      
			CellName.add("EXP_GUBUN");      
			CellName.add("GUBUN");      
			CellName.add("ORD_AMT1");      
			CellName.add("THIS_RFND");      
			CellName.add("LAST_RFND");      
			CellName.add("ORD_AMT2");      
			CellName.add("ORD_AMT3");      
			CellName.add("DNL_CMTN_RATE");      
			CellName.add("DNL_CMTN1");      
			CellName.add("DNL_CMTN_THIS_RFND");      
			CellName.add("DNL_CMTN_LAST_RFND");      
			CellName.add("DNL_CMTN2");      
			CellName.add("DNL_CMTN3");      
			CellName.add("ADJ_AMT2");      
			CellName.add("DLV_PRCE");      
			CellName.add("SERVER_CMTN");      
			CellName.add("PENALTY");      
			CellName.add("DSCNT_TOT_AMT");      
			CellName.add("ADJ_AMT3");      
			CellName.add("CMPNY_GUBUN");      
			CellName.add("CMPNY_NO");      
			CellName.add("CEO_NM");      
			CellName.add("CS_PER_TEL");      
			CellName.add("CMPNY_JUSO_DORO");      
			CellName.add("BANK_NM");      
			CellName.add("BANK_ACNT_NO");      
			CellName.add("ACNT_NM");      
			CellName.add("ADJ_STAT");        
			
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("excelList", adminAdjustService.selectCpltListAdjustToExcel(inParam));
			mav.addObject("param", inParam);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping("/admin/adjust/selectCpltListAdjustToCsv.do")
	public void selectCpltListAdjustToCsv(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectListAdjustToCsv START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		LoggerUtil.writeMap(inParam);
		try {
			
			List<String> excelTitle = new ArrayList<String>();
			
			//다날
			excelTitle.add("서비스");
			excelTitle.add("거래번호");
			excelTitle.add("CPID");
			excelTitle.add("금액(취소시 마이너스)");
//			excelTitle.add("남은결제금액");
			excelTitle.add("거래일시");
			excelTitle.add("주문번호");
			excelTitle.add("구매확정일");
			//쏘시오
			excelTitle.add("주문번호");
			excelTitle.add("업체ID");
			excelTitle.add("업체명");
			excelTitle.add("정산유형");
			excelTitle.add("상품ID");
			excelTitle.add("상품명");
//			excelTitle.add("판매기간");
			excelTitle.add("출고유형");
			excelTitle.add("구분");
			excelTitle.add("판매액-이달판매");
			excelTitle.add("판매액-이달환불");
			excelTitle.add("판매액-전달환불");
			
			excelTitle.add("NET결제금액");
			excelTitle.add("쿠폰사용금액");
			excelTitle.add("포인트사용금액");
			
			excelTitle.add("판매액-소계");
			excelTitle.add("총판매액");
			excelTitle.add("수수료율");
			excelTitle.add("판매수수료-이달판매");
			excelTitle.add("판매수수료-이달환불");
			excelTitle.add("판매수수료-전달환불");
			excelTitle.add("판매수수료-소계");
			excelTitle.add("총판매수수료");
			excelTitle.add("정산대상액");
			excelTitle.add("전담택배비");
			excelTitle.add("서버운영수수료");
			excelTitle.add("페널티");
			excelTitle.add("정산차감");
			excelTitle.add("최종지급액");
			excelTitle.add("회원유형");
			excelTitle.add("사업자등록번호");
			excelTitle.add("대표자");
			excelTitle.add("전화번호");
			excelTitle.add("주소");
			excelTitle.add("은행명");
			excelTitle.add("계좌번호");
			excelTitle.add("예금주명");
			excelTitle.add("정산여부");
			
			List<Map<String, Object>> list  = (List<Map<String, Object>> )adminAdjustService.selectCpltListAdjustToExcel(inParam);
			
			response.setContentType("application/vnd.ms-excel:UTF-8");
//			response.setContentType("text/csv;charset= MS949");
		    response.setHeader("Content-Disposition", "attachment; filename=\"SSOCIO_CPLT_SETTLEMENT_REF_SSOCIO_"+StringUtil.getCurrentDate()+".csv\"");
		    try
		    {
		        OutputStream outputStream = response.getOutputStream();
		        outputStream.write(0xEF);  
		        outputStream.write(0xBB);
		        outputStream.write(0xBF);   
		        StringBuffer outputResult = new StringBuffer();
		        for(String str : excelTitle){
		        	if(outputResult.length() > 0){
		        		outputResult.append("\t ");
		        	}
		        	outputResult.append(str); 
		        }
		        outputResult.append("\n");
		        
		        for(Map<String, Object> map : list){
		        	outputResult.append(map.get("SELT_GB_CD_NM")+"\t ");     
					outputResult.append("\'"+map.get("TR_ID")+"\t ");     
					outputResult.append("\'"+map.get("CPID")+"\t ");     
					outputResult.append(map.get("AMT")+"\t ");     
//					outputResult.append(map.get("REMAIN_AMT")+"\t ");     
					outputResult.append(map.get("TR_DT")+"\t ");     
					outputResult.append("\'"+map.get("ORD_CD_DANAL")+"\t ");     
					outputResult.append(map.get("CNF_YMD")+"\t ");     
					outputResult.append("\'"+map.get("ORD_CD_SSOCIO")+"\t ");     
					outputResult.append(map.get("MBER_SEQ")+"\t ");     
					outputResult.append(map.get("NAME")+"\t ");     
					outputResult.append(map.get("ADJ_GUBUN")+"\t ");     
					outputResult.append("\'"+map.get("PROD_CD")+"\t ");  
//					outputResult.append(map.get("PROD_NM")+"\t ");  
					if(map.get("PROD_NM") != null && !"".equals(map.get("PROD_NM").toString())){
						
						outputResult.append(map.get("PROD_NM").toString().replace(",", " ")+"\t "); 
					}else{
						
						outputResult.append(map.get("PROD_NM")+"\t "); 
					}
					
//					outputResult.append(map.get("SELL_PERIOD")+"\t ");    
					outputResult.append(map.get("EXP_GUBUN")+"\t ");     
					outputResult.append(map.get("GUBUN")+"\t ");     
					outputResult.append(map.get("ORD_AMT1")+"\t ");     
					outputResult.append(map.get("THIS_RFND")+"\t ");     
					outputResult.append(map.get("LAST_RFND")+"\t ");    
					
					outputResult.append(map.get("RL_AMT")+"\t ");    
					outputResult.append(map.get("CPN_USE_AMT")+"\t ");    
					outputResult.append(map.get("POINT_USE_AMT")+"\t ");    
					
					outputResult.append(map.get("ORD_AMT2")+"\t ");     
					outputResult.append(map.get("ORD_AMT3")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_RATE")+"\t ");     
					outputResult.append(map.get("DNL_CMTN1")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_THIS_RFND")+"\t ");     
					outputResult.append(map.get("DNL_CMTN_LAST_RFND")+"\t ");     
					outputResult.append(map.get("DNL_CMTN2")+"\t ");     
					outputResult.append(map.get("DNL_CMTN3")+"\t ");     
					outputResult.append(map.get("ADJ_AMT2")+"\t ");     
					outputResult.append(map.get("DLV_PRCE")+"\t ");     
					outputResult.append(map.get("SERVER_CMTN")+"\t ");     
					outputResult.append(map.get("PENALTY")+"\t ");     
					outputResult.append(map.get("DSCNT_TOT_AMT")+"\t ");     
					outputResult.append(map.get("ADJ_AMT3")+"\t ");     
					outputResult.append(map.get("CMPNY_GUBUN")+"\t ");     
					outputResult.append("\'"+map.get("CMPNY_NO")+"\t ");     
					outputResult.append(map.get("CEO_NM")+"\t ");     
					outputResult.append("\'"+map.get("CS_PER_TEL")+"\t ");     
					
					if(map.get("CMPNY_JUSO_DORO") != null && !"".equals(map.get("CMPNY_JUSO_DORO").toString())){
						
						outputResult.append(map.get("CMPNY_JUSO_DORO").toString().replace(",", " ")+"\t "); 
					}else{
						
						outputResult.append(map.get("CMPNY_JUSO_DORO")+"\t "); 
					}

					outputResult.append(map.get("BANK_NM")+"\t ");     
					outputResult.append("\'"+map.get("BANK_ACNT_NO")+"\t ");     
					outputResult.append(map.get("ACNT_NM")+"\t ");     
					outputResult.append(map.get("ADJ_STAT")+"\"\n");
		        }
		        
		        outputStream.write(outputResult.toString().getBytes());
		        outputStream.flush();
		        outputStream.close();
		    }
		    catch(Exception e)
		    {
		        logger.error(">>>>> error : "+e.toString());
		    }
		    
		} catch (Exception e) {
			e.printStackTrace();
		}
		return;
	}
	
	/**
	 * <pre>
	 * 정산완료 판매정산 상세 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectCpltDtlListSellAdjust.do")
	public ModelAndView selectCpltDtlListSellAdjust(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectCpltDtlListSellAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			logger.debug(">>>>> inParam : "+inParam.toString());
			mav.addObject("list", adminAdjustService.selectCpltDtlListSellAdjust(inParam));			
			mav.addObject("params", inParam);
			mav.setViewName("admin/adjust/selectCpltDtlListSellAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 정산완료 셰어링정산 상세 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectCpltDtlListShareAdjust.do")
	public ModelAndView selectCpltDtlListShareAdjust(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectCpltDtlListShareAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			logger.debug(">>>>> inParam : "+inParam.toString());
			mav.addObject("list", adminAdjustService.selectCpltDtlListShareAdjust(inParam));			
			mav.addObject("params", inParam);
			mav.setViewName("admin/adjust/selectCpltDtlListShareAdjust");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	
	
	
	
	/**
	 * <pre>
	 * 정산 엑셀 업로드
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 23. 16:14
	 * @author J.H PARK
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/updateCpltListExcelToAdjust.do")
	public ModelAndView updateCpltListExcelToAdjust(ModelMap modelMap,MultipartHttpServletRequest req) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("updateCpltListExcelToAdjust START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();

		
		try {
			MultipartFile file = req.getFile("file_excel");
			logger.debug("ExcelName : " + file.getOriginalFilename());
			logger.debug("ExcelName : " + (file == null));
			mav.addObject("result", adminAdjustService.updateCpltListExcelToAdjust(file,modelMap));			
			mav.setViewName("admin/adjust/uploadRtnExcelPopup");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return mav;
	}
	
	@RequestMapping("/admin/adjust/uploadRtnExcelPopup.do")
	public ModelAndView uploadRtnExcelPopup(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("uploadRtnExcelPopup START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("admin/adjust/uploadRtnExcelPopup");
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("params", inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 지급요청 엑셀
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/adjust/selectPayRequestToExcel.do")
	public ModelAndView selectPayRequestToExcel(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectPayRequestToExcel START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView");
		try {
			
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("지급요청_"+today+".xls", check_browser(request)));
		
			String SheetName = "정산예정";
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("주문번호");
			excelTitle.add("상품코드");
			excelTitle.add("은행코드");
			excelTitle.add("계좌번호");
			excelTitle.add("통화");
			excelTitle.add("금액");
			excelTitle.add("예금주");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("ORD_CD");      
			CellName.add("PROD_CODE");      
			CellName.add("BANK_CD");      
			CellName.add("BANK_ACNT_NO");      
			CellName.add("CRNCY");      
			CellName.add("AMT");      
			CellName.add("ACNT_NM");      
			
			
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("excelList", adminAdjustService.selectPayRequestToExcel(inParam));
			mav.addObject("param", inParam);
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping("/admin/adjust/selectPayRequestToCsv.do")
	public void selectPayRequestToCsv(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("selectPayRequestToCsv START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		try {
			
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("주문번호");
			excelTitle.add("상품코드");
			excelTitle.add("은행코드");
			excelTitle.add("계좌번호");
			excelTitle.add("통화");
			excelTitle.add("금액");
			excelTitle.add("예금주");
			
			List<Map<String, Object>> list  = (List<Map<String, Object>> )adminAdjustService.selectPayRequestToExcel(inParam);
			
			response.setContentType("application/vnd.ms-excel:UTF-8");
//			response.setContentType("text/csv;charset= MS949");
		    response.setHeader("Content-Disposition", "attachment; filename=\"SSOCIO_REQUEST_PAYMENT_"+StringUtil.getCurrentDate()+".csv\"");
		    try
		    {
		        OutputStream outputStream = response.getOutputStream();
		        outputStream.write(0xEF);  
		        outputStream.write(0xBB);
		        outputStream.write(0xBF);   
		        StringBuffer outputResult = new StringBuffer();
		        for(String str : excelTitle){
		        	if(outputResult.length() > 0){
		        		outputResult.append("\t ");
		        	}
		        	outputResult.append(str); 
		        }
		        outputResult.append("\n");
		        
		        for(Map<String, Object> map : list){
		        	outputResult.append("\'"+map.get("ORD_CD")+"\t ");
					outputResult.append("\'"+map.get("PROD_CODE")+"\t ");   
					outputResult.append("\'"+map.get("BANK_CD")+"\t ");
					outputResult.append("\'"+map.get("BANK_ACNT_NO")+"\t ");      
					outputResult.append(map.get("CRNCY")+"\t ");
					outputResult.append(map.get("AMT")+"\t ");
					outputResult.append(map.get("ACNT_NM")+"\n ");   
		        }
		        
		        outputStream.write(outputResult.toString().getBytes());
		        outputStream.flush();
		        outputStream.close();
		    }
		    catch(Exception e)
		    {
		        logger.error(">>>>> error "+e.toString());
		    }
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return;
	}
	
	/**
	 * 정산예정 데이터 danal 시스템으로 업로드
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 */
	@RequestMapping("/admin/adjust/uploadSFTP.do")
	public ModelAndView uploadSFTP(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("uploadSFTP START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("result", adminAdjustService.uploadSFTP(inParam));			
			mav.addObject("params", inParam);
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping("/admin/adjust/uploadTrTxtPopup.do")
	public ModelAndView uploadTrTxtPopup(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("uploadTrTxtPopup START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("admin/adjust/uploadTrTxtPopup");
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("params", inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	@RequestMapping(value = "admin/adjust/uploadTrTxt.do", method = RequestMethod.POST)
	public ModelAndView uploadTrTxt(MultipartHttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("uploadTrTxt START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		inParam.put("TR_TXT", request.getFile("TR_TXT"));
		
		try {
			mav.addObject("result", adminAdjustService.uploadTrTxt(inParam));			
			mav.addObject("params", inParam);
			mav.setViewName("/admin/adjust/uploadTrTxtPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping("/admin/adjust/uploadRtnTxtPopup.do")
	public ModelAndView uploadRtnTxtPopup(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("uploadRtnTxtPopup START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("admin/adjust/uploadRtnTxtPopup");
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("params", inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping(value = "admin/adjust/uploadRtnTxt.do", method = RequestMethod.POST)
	public ModelAndView uploadRtnTxt(MultipartHttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("uploadRtnTxt START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		inParam.put("RTN_TXT", request.getFile("RTN_TXT"));
		
		try {
			mav.addObject("result", adminAdjustService.uploadRtnTxt(inParam));			
			mav.addObject("params", inParam);
			mav.setViewName("/admin/adjust/uploadRtnTxtPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping(value = "admin/adjust/ExcelToTxt.do", method = RequestMethod.POST)
	public ModelAndView ExcelToTxt(MultipartHttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ExcelToTxt START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		inParam.put("RTN_TXT", request.getFile("RTN_TXT"));
		
		try {
			mav.addObject("result", adminAdjustService.uploadRtnTxt(inParam));			
			mav.addObject("params", inParam);
			mav.setViewName("/admin/adjust/uploadRtnTxtPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	private String getDisposition(String down_filename, String browser_check) throws UnsupportedEncodingException {
		String prefix = "attachment;filename=";
		String encodedfilename = null;
		System.out.println("browser_check:"+browser_check);
		if (browser_check.equals("ie")) {
		encodedfilename = URLEncoder.encode(down_filename, "UTF-8").replaceAll("\\+", "%20");
		}else if (browser_check.equals("chrome")) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < down_filename.length(); i++){
		    char c = down_filename.charAt(i);
		    if (c > '~') {
		        sb.append(URLEncoder.encode("" + c, "UTF-8"));
		    } else {
		        sb.append(c);
		    }
		}
		encodedfilename = sb.toString();
		}else {
		encodedfilename = "\"" + new String(down_filename.getBytes("UTF-8"), "8859_1") + "\"";
		} 
		return prefix + encodedfilename;
	}
	
	private String check_browser(HttpServletRequest request) {
		String browser = "";
		String header = request.getHeader("User-Agent");
		//신규추가된 indexof : Trident(IE11) 일반 MSIE로는 체크 안됨
		if (header.indexOf("MSIE") > -1 || header.indexOf("Trident") > -1){
		browser = "ie";
		}
		//크롬일 경우
		else if (header.indexOf("Chrome") > -1){
		browser = "chrome";
		}
		//오페라일경우
		else if (header.indexOf("Opera") > -1){
		browser = "opera";
		}
		//사파리일 경우
		else if (header.indexOf("Apple") > -1){
		browser = "sarari";
		} else {
		browser = "firfox"; 
		}
		return browser;
	}
	
}
