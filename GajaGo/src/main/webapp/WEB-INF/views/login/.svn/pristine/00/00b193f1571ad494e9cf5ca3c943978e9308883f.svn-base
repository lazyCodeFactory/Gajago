package com.ssocio.sharing.cmmn.instance.cmmncode;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <pre>
 * 인스턴스 코드테이블의 형태의 데이터 형태를 구현
 * 
 * @author D.G
 * @version 
 * @since 2015. 2. 12. 오후 8:15:38
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 2. 12.  |    D.G       | 신규 
 * @Todo
 * </pre>
 */
public class CmmnCodeTable {

  // --------------------------------------------------------------------------
  // # Log 설정
  // --------------------------------------------------------------------------
  private static final Logger logger = LoggerFactory.getLogger(CmmnCodeTable.class);

  private String groupCode    = "";
  private String groupNm      = "";
  private CmmnCodeDescriptor[] mCodeList  = null;

  /**
   * 그룹코드및하위코드리스트 Set
   * @param groupCode
   * @param instanceName
   * @param codelist
   */
  public CmmnCodeTable(String groupCode, String groupNm, CmmnCodeDescriptor[] codelist) {
    this.groupCode  = groupCode;
    this.groupNm    = groupNm;
    this.mCodeList  = codelist;
  }

  /**
   * <pre>
   * 인스턴스코드값(key)의 리스트를 배열로 구함
   * 
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:24:43
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String[] listCodes() {
    String[] codes = new String[mCodeList.length];
    for (int i = 0; i < mCodeList.length; i++) {
      codes[i] = mCodeList[i].getCode();
    }
    return codes;
  }

  /**
   * <pre>
   * 인스턴스코드명 (codeNm)의 리스트를 배열로 구함
   * 
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:24:55
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String[] listCodeNms() {
    String[] meanings = new String[mCodeList.length];
    for (int i = 0; i < mCodeList.length; i++) {
      meanings[i] = mCodeList[i].getCodeNm();
    }
    return meanings;
  }

  /**
   * <pre>
   * 해당코드에 대한 인스턴스코드명 (codeNm)을 구함
   * 
   * @param instanceCd
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:25:09
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String getTextForCode(String instanceCd) {
    for (int i = 0; i < mCodeList.length; i++) {
      if (mCodeList[i].getCode().equalsIgnoreCase(instanceCd))
        return mCodeList[i].getCodeNm();
    }
    return null;
  }

  /**
   * <pre>
   * 해당코드명에 대한 인스턴스코드값(instanceCd)을 구함
   * 
   * @param codeNm
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:25:21
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String getCodeForText(String codeNm) {
    for (int i = 0; i < mCodeList.length; i++) {
      if (mCodeList[i].getCodeNm().equalsIgnoreCase(codeNm))
        return mCodeList[i].getCode();
    }
    return null;
  }

  /**
   * <pre>
   * 해당 code에 대한 CodeDescriptor객체를 구함
   * 
   * @param instanceCd
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:25:34
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public CmmnCodeDescriptor getCodeDescriptor(String code) {
    for (int i = 0; i < mCodeList.length; i++) {
      if (code.equalsIgnoreCase(mCodeList[i].getCode()))
        return mCodeList[i];
    }
    return null;
  }

  /**
   * <pre>
   * 해당 instanceCd에 대한 CodeDescriptor객체를 구함
   * 
   * @param code
   * @param newCodeList 
   * @exception 
   * @date 2014. 8. 5. 오후 4:25:48
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public void setCodeDescriptor(String code, CmmnCodeDescriptor newCodeList) {
    for (int i = 0; i < mCodeList.length; i++) {
      if (code.equalsIgnoreCase(mCodeList[i].getCode()))
        mCodeList[i] = newCodeList;
    }
  }

  /**
   * <pre>
   * 
   * 
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:26:01
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String getGroupCode() {
    return groupCode;
  }

  /**
   * <pre>
   * 
   * 
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:26:08
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public CmmnCodeDescriptor[] getCodeDescriptors() {
    return mCodeList;
  }

  /**
   * <pre>
   * 
   * 
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:26:16
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String getGroupNm() {
    return groupNm;
  }
}
