package com.ssocio.sharing.service.web;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.elasticsearch.Elasticsearch;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.PushUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.util.WebMobilePaging;
import com.ssocio.sharing.dao.web.MobileMyBasketDao;
import com.ssocio.sharing.dao.web.WebBoardDao;
import com.ssocio.sharing.dao.web.WebCtryDao;
import com.ssocio.sharing.vo.admin.PageNavigation;
import com.ssocio.sharing.vo.web.OrdInfo;
import com.ssocio.sharing.vo.web.OrdProduct;

@Service
public class WebCtryServiceImpl implements WebCtryService {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebCtryServiceImpl.class);

	// --------------------------------------------------------------------------
	// # DAO 설정
	// --------------------------------------------------------------------------
	@Resource(name="webCtryDao")
	private WebCtryDao webCtryDao;

	@Resource(name="webBoardDao")
	private WebBoardDao webBoardDao;

	@Resource(name="mobileMyBasketDao")
	private MobileMyBasketDao mobileMyBasketDao;

	@Override
	public ModelMap selectListCategories(Map<String, Object> inParam) throws Exception{
		ModelMap mm = new ModelMap();

		int lvlSeq = StringUtil.nvlInt((String)inParam.get("LVL_SEQ"), CmmnCnst.CTRY_TYPE_LARGE);
		String ctryCd = (String)inParam.get("CTRY_CD");

		//	카테고리 목록 > 대분류
		if( lvlSeq == CmmnCnst.CTRY_TYPE_LARGE){
			//	대분류 목록을 가져온다.
			mm.put("large", webCtryDao.selectListCtry("", CmmnCnst.CTRY_TYPE_LARGE));
			//	중분류 목록을 가져온다.
			if ( ctryCd != null && !ctryCd.trim().equalsIgnoreCase("") && ctryCd.trim().length() > 8 ) {
				logger.info(ctryCd);
				mm.put("medium", webCtryDao.selectListCtry(makeParentCtryCd(ctryCd, CmmnCnst.CTRY_TYPE_MEDIUM), CmmnCnst.CTRY_TYPE_MEDIUM));
			}
		}
		//	카테고리 목록 > 중분류
		else{
			//	중분류 목록을 가져온다.
			mm.put("medium", webCtryDao.selectListCtry(makeParentCtryCd(ctryCd, CmmnCnst.CTRY_TYPE_MEDIUM), CmmnCnst.CTRY_TYPE_MEDIUM));

			//	소분류 목록을 가져온다.
			mm.put("small", webCtryDao.selectListCtry(makeParentCtryCd(ctryCd, CmmnCnst.CTRY_TYPE_SMALL), CmmnCnst.CTRY_TYPE_SMALL));
		}

		return mm;
	}

	@Override
	public ModelMap selectListProdByLargeCtry(Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectListProdByLargeCtry START☆★☆★☆★☆★☆★☆★☆");

		ModelMap mm = new ModelMap();
		String ctryCd = (String)inParam.get("CTRY_CD");

		//	대분류 카테고리 목록 조회
		List<Map<String, Object>> largeCtryList = webCtryDao.selectListCtry(makeParentCtryCd(ctryCd, CmmnCnst.CTRY_TYPE_LARGE), CmmnCnst.CTRY_TYPE_LARGE);
		logger.info("largeCtryList.size() =========== " + largeCtryList.size());

		//	중분류 카테고리 목록 조회
		List<Map<String, Object>> mediumCtryList = webCtryDao.selectListCtry(ctryCd, CmmnCnst.CTRY_TYPE_MEDIUM);
		logger.info("mediumCtryList.size() =========== " + mediumCtryList.size());

		//	페이징을 위한 상품 개수 조회
		inParam.put("PARENT_CTRY_CD", ctryCd.substring(0, 4));
		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, false));

		int totCount = webCtryDao.selectCountProd(inParam);
		logger.info("totCount =========== " + totCount);

		//	페이징 클래스 initialize
		WebMobilePaging paging = new WebMobilePaging(totCount, StringUtil.nvlInt((String)inParam.get("CUR_PAGE"), 1), CmmnCnst.MOBILE_LIST_SIZE);

		inParam.put("S_NUM", paging.getStartContent());
		inParam.put("E_NUM", paging.getEndContent());

		//	상품 조회
		List<Map<String, Object>> prodList = webCtryDao.selectListProd(inParam);
		logger.info("prodList.size() =========== " + prodList.size());

		//	상품 타입별 개수 조회
		//	상품 타입별 개수 조회는 전체 타입별 개수를 가져와야 하기 때문에 PROD_TYPE_CD를 재설정한다.
		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, true));
		List<Map<String, Object>> prodTypeList = webCtryDao.selectListProdType(inParam);
		logger.info("prodTypeList.size() =========== " + prodTypeList.size());

		mm.put("largeCtryList", largeCtryList);
		mm.put("mediumCtryList", mediumCtryList);
		mm.put("prodList", prodList);
		mm.put("prodTypeList", prodTypeList);
		mm.put("paging", paging);

		return mm;
	}

	public ModelMap selectListProdByMediumCtry(Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectListProdByMediumCtry START☆★☆★☆★☆★☆★☆★☆");

		ModelMap mm = new ModelMap();
		String ctryCd = (String)inParam.get("CTRY_CD");

		//	중분류 카테고리 목록 조회
		List<Map<String, Object>> mediumCtryList = webCtryDao.selectListCtry(makeParentCtryCd(ctryCd, CmmnCnst.CTRY_TYPE_MEDIUM), CmmnCnst.CTRY_TYPE_MEDIUM);
		logger.info("mediumCtryList.size() =========== " + mediumCtryList.size());

		//	중분류 카테고리 목록 조회
		List<Map<String, Object>> smallCtryList = webCtryDao.selectListCtry(makeParentCtryCd(ctryCd, CmmnCnst.CTRY_TYPE_SMALL), CmmnCnst.CTRY_TYPE_SMALL);
		logger.info("smallCtryList.size() =========== " + smallCtryList.size());

		//	페이징을 위한 상품 개수 조회
		inParam.put("PARENT_CTRY_CD", ctryCd.substring(0, 8));
		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, false));

		int totCount = webCtryDao.selectCountProd(inParam);
		logger.info("medium totCount =========== " + totCount);

		//	페이징 클래스 initialize
		WebMobilePaging paging = new WebMobilePaging(totCount, StringUtil.nvlInt((String)inParam.get("CUR_PAGE"), 1), CmmnCnst.MOBILE_LIST_SIZE);

		inParam.put("S_NUM", paging.getStartContent());
		inParam.put("E_NUM", paging.getEndContent());

		//	상품 조회
		List<Map<String, Object>> prodList = webCtryDao.selectListProd(inParam);
		logger.info("medium prodList.size() =========== " + prodList.size());

		//	상품 타입별 개수 조회
		//	상품 타입별 개수 조회는 전체 타입별 개수를 가져와야 하기 때문에 PROD_TYPE_CD를 재설정한다.
		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, true));
		List<Map<String, Object>> prodTypeList = webCtryDao.selectListProdType(inParam);
		logger.info("medium prodTypeList.size() =========== " + prodTypeList.size());

		mm.put("mediumCtryList", mediumCtryList);
		mm.put("smallCtryList", smallCtryList);
		mm.put("prodList", prodList);
		mm.put("prodTypeList", prodTypeList);
		mm.put("paging", paging);

		return mm;
	}

	public ModelMap selectListProdBySmallCtry(Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectListProdBySmallCtry START☆★☆★☆★☆★☆★☆★☆");

		ModelMap mm = new ModelMap();
		String ctryCd = (String)inParam.get("CTRY_CD");
		String childCtryCd = (String)inParam.get("CHILD_CTRY_CD");

		//	중분류 카테고리 목록 조회
		List<Map<String, Object>> mediumCtryList = webCtryDao.selectListCtry(makeParentCtryCd(ctryCd, CmmnCnst.CTRY_TYPE_MEDIUM), CmmnCnst.CTRY_TYPE_MEDIUM);
		logger.info("mediumCtryList.size() =========== " + mediumCtryList.size());

		//	중분류 카테고리 목록 조회
		List<Map<String, Object>> smallCtryList = webCtryDao.selectListCtry(ctryCd, CmmnCnst.CTRY_TYPE_SMALL);
		logger.info("smallCtryList.size() =========== " + smallCtryList.size());

		//	페이징을 위한 상품 개수 조회
		inParam.put("PARENT_CTRY_CD", childCtryCd.substring(0, 12));
		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, false));

		int totCount = webCtryDao.selectCountProd(inParam);
		logger.info("small totCount =========== " + totCount);

		//	페이징 클래스 initialize
		WebMobilePaging paging = new WebMobilePaging(totCount, StringUtil.nvlInt((String)inParam.get("CUR_PAGE"), 1), CmmnCnst.MOBILE_LIST_SIZE);

		inParam.put("S_NUM", paging.getStartContent());
		inParam.put("E_NUM", paging.getEndContent());
		//	상품 조회
		List<Map<String, Object>> prodList = webCtryDao.selectListProd(inParam);
		logger.info("small prodList.size() =========== " + prodList.size());

		//	상품 타입별 개수 조회
		//	상품 타입별 개수 조회는 전체 타입별 개수를 가져와야 하기 때문에 PROD_TYPE_CD를 재설정한다.
		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, true));
		List<Map<String, Object>> prodTypeList = webCtryDao.selectListProdType(inParam);
		logger.info("small prodTypeList.size() =========== " + prodTypeList.size());

		mm.put("mediumCtryList", mediumCtryList);
		mm.put("smallCtryList", smallCtryList);
		mm.put("prodList", prodList);
		mm.put("prodTypeList", prodTypeList);
		mm.put("paging", paging);

		return mm;
	}

	public ModelMap selectListProd(Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectListProd START☆★☆★☆★☆★☆★☆★☆");

		ModelMap mm = new ModelMap();
		String ctryCd = StringUtil.nvl((String)inParam.get("CTRY_CD"), "");
		int lvlSeq = StringUtil.nvlInt((String)inParam.get("LVL_SEQ"), CmmnCnst.CTRY_TYPE_LARGE);

		logger.info("##################selectListProd session APP####################"+StringUtil.nvl((String)inParam.get("CLIENT_TYPE"), "")+"#################");
		
		// app 일 경우만 SWIPER_INDEX 적용
		if("A".equals(StringUtil.nvl((String)inParam.get("CLIENT_TYPE"), ""))){
			if ( StringUtil.nvlInt((String)inParam.get("SWIPER_INDEX"), 0) == 0 ) {
				lvlSeq = lvlSeq - 1 > 0 ? lvlSeq - 1 : 1;
			}
		}
 
		String parentCtryCd = ctryCd.trim().length() > 4 ? ctryCd.substring(0, 4*lvlSeq) : "";

		//	페이징을 위한 상품 개수 조회
		inParam.put("PARENT_CTRY_CD", parentCtryCd);
		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, false));

		int totCount = webCtryDao.selectCountProd(inParam);
		logger.info("small totCount =========== " + totCount);

		//	페이징 클래스 initialize
		WebMobilePaging paging = new WebMobilePaging(totCount, StringUtil.nvlInt((String)inParam.get("CUR_PAGE"), 1), CmmnCnst.MOBILE_LIST_SIZE);

		inParam.put("S_NUM", paging.getStartContent());
		inParam.put("E_NUM", paging.getEndContent());
		//	상품 조회
		List<Map<String, Object>> prodList = webCtryDao.selectListProd(inParam);
		
		/*
		 * [2015-12-04] view 단에서 처리하는 로직이 추가되어 여긴 삭제 처리함
		for (Map<String, Object> map : prodList) {
			String prodNm = (String) map.get("PROD_NM") ;
			
			String repProdNm = prodNm.replace("'", "\\'");
			map.put("PROD_NM",repProdNm);
			
			logger.debug("네임 확인 : "+map.toString());
		}
		*/
		
		logger.info("small prodList.size() =========== " + prodList.size());

		//	상품 타입별 개수 조회
		//	상품 타입별 개수 조회는 전체 타입별 개수를 가져와야 하기 때문에 PROD_TYPE_CD를 재설정한다.
		inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, true));
		List<Map<String, Object>> prodTypeList = webCtryDao.selectListProdType(inParam);
		logger.info("small prodTypeList.size() =========== " + prodTypeList.size());

		mm.put("prodList", prodList);
		mm.put("prodTypeList", prodTypeList);
		mm.put("paging", paging);

		return mm;
	}

	public ModelMap selectCtryAjax(Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectListProd START☆★☆★☆★☆★☆★☆★☆");

		ModelMap mm = new ModelMap();
//		등록한 상품 리스트 조회
			String ctryCd = StringUtil.nvl((String)inParam.get("CTRY_CD"), "");
			String[] arrayCtryCd = new String[0];

			if(ctryCd.indexOf(",") > 0){
				arrayCtryCd = ctryCd.split(",");
			}else{
				if(!"".equals(ctryCd) && null != ctryCd){
					arrayCtryCd = new String[]{ctryCd};
					logger.info("arrayCtryCd-->" + arrayCtryCd[0]);
				}
			}

			int lvlSeq = StringUtil.nvlInt((String)inParam.get("LVL_SEQ"), CmmnCnst.CTRY_TYPE_LARGE);

			inParam.put("ctryGbn", "1"); // 카테고리 xml을 위한 예외처리 로직

			String[] parentCtryCd = new String[arrayCtryCd.length];
			for(int i=0;i<arrayCtryCd.length;i++){

				if(!"".equals(arrayCtryCd[i]) && null != arrayCtryCd[i]){
					parentCtryCd[i] = arrayCtryCd[i].substring(0, 4*lvlSeq);
				}

				logger.info("parentCtryCd-->4" + parentCtryCd[i]);
			}


		int SWIPER_INDEX = StringUtil.nvlInt((String)inParam.get("SWIPER_INDEX"), 0);
		if ( SWIPER_INDEX == 0 ) {
			lvlSeq = lvlSeq - 1 > 0 ? lvlSeq - 1 : 1;
		}

		//	페이징을 위한 상품 개수 조회
		inParam.put("PARENT_CTRY_CD", parentCtryCd);
		//inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, false));
		inParam.put("prods" , CommonUtil.appMakeProdTypeList(inParam, false));

		int totCount = webCtryDao.selectCountProd(inParam);
		logger.info("small totCount =========== " + totCount);

		//	페이징 클래스 initialize
		WebMobilePaging paging = new WebMobilePaging(totCount, StringUtil.nvlInt((String)inParam.get("CUR_PAGE"), 1), CmmnCnst.MOBILE_LIST_SIZE);

		inParam.put("S_NUM", paging.getStartContent());
		inParam.put("E_NUM", paging.getEndContent());
		//	상품 조회
		List<Map<String, Object>> prodList = webCtryDao.selectListProd(inParam);
		logger.info("small prodList.size() =========== " + prodList.size());

		//	상품 타입별 개수 조회
		//	상품 타입별 개수 조회는 전체 타입별 개수를 가져와야 하기 때문에 PROD_TYPE_CD를 재설정한다.
		//inParam.put("prods" , CommonUtil.makeProdTypeList(inParam, true));
		List<Map<String, Object>> prodTypeList = webCtryDao.selectListProdType(inParam);
		logger.info("small prodTypeList.size() =========== " + prodTypeList.size());

		mm.put("prodList", prodList);
		mm.put("prodTypeList", prodTypeList);
		mm.put("paging", paging);

		return mm;
	}

	@SuppressWarnings("unchecked")
	@Override
	@Transactional
	public ModelMap selectProd(int mberSeq, String prodCode) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectDetailProd START☆★☆★☆★☆★☆★☆★☆");

		if( mberSeq > -1){
			webCtryDao.insertLateProd(mberSeq, prodCode);
		}

		ModelMap mm = null;
		//		상품의 기본정보를 가져온다.
		Map<String, Object> map = webCtryDao.selectProdDetailInfo(prodCode);

		map.put("PROD_MB_DTL", StringUtil.replaceEmptyString((String)map.get("PROD_MB_DTL"), StringUtil.PROD_DTL_EMPTY_TEXT));
		map.put("PROD_PC_DTL", StringUtil.replaceEmptyString((String)map.get("PROD_PC_DTL"), StringUtil.PROD_DTL_EMPTY_TEXT));

		if( map != null ){
			String checkValue = (String) map.get("PROD_NM");
			checkValue = checkValue.replaceAll("\"", "\\\"");
			checkValue = checkValue.replaceAll("\'", "\\\'");
			map.put("PROD_NM",checkValue);//쌍따옴표때문에 다시 치환
			map.put("categories", webCtryDao.selectListCtryByProd((String)map.get("CTRY_CD")));
			map.put("prodUserInfo", webCtryDao.selectProdUserInfo(String.valueOf(map.get("MBER_SEQ"))));
			if("Y".equals((String)map.get("OPT_PROD_YN")) || "Y".equals((String)map.get("OPT_PROD_EXT_YN"))){
				map.put("options", webCtryDao.selectListOption((List<Map<String, Object>>)(Object)map.get("options")));
			}

			mm = new ModelMap();
			mm.put("prodInfo", map);

			Map<String, Object> inParam = new HashMap<String, Object>();
			inParam.put("PROD_CODE", prodCode);
			inParam.put("S_NUM", 1);
			inParam.put("E_NUM", 3);

			if(StringUtil.nvlInt((String)map.get("PROD_TYPE_CD"), CmmnCnst.PROD_TYPE_SELL) == CmmnCnst.PROD_TYPE_FREESHARE){
				//	나눔 신청 목록을 가져온다.
				mm.put("freeshare", webCtryDao.selectListFreeshareReq(prodCode));
				mm.put("refreeshare", webCtryDao.selectListReFreeshareReq(prodCode));
			}
			else{
				//	상품 후기 목록을 가져온다.
				mm.put("reviews", webBoardDao.selectListReview(inParam));
			}

			//	댓글 목록을 가져온다.
			mm.put("comments", webBoardDao.selectListCommentByProd(inParam));

			mm.put("recomments", webBoardDao.selectListReCommentByProd(inParam));

			//	판매중인 상품 목록을 가져온다.
			mm.put("miniShop", webCtryDao.selectListProdInMiniShop(String.valueOf(map.get("MBER_SEQ")), prodCode));
			
			// 상품 정보 제공 고시 리스트
			mm.put("notify", webCtryDao.selectListProdInfoNoti(prodCode));
		}
		return mm;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	@Transactional
	public ModelMap selectProdComment(Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectProdComment START☆★☆★☆★☆★☆★☆★☆");
		ModelMap mm = new ModelMap();
			
		try {
			//	댓글 목록을 가져온다.
			mm.put("addcomments", webBoardDao.selectProdComment(inParam));
			mm.put("inParam", inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}

	@SuppressWarnings("unchecked")
	@Override
	@Transactional
	public ModelMap selectPcProdComment(Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectPcProdComment START☆★☆★☆★☆★☆★☆★☆");
		
		ModelMap mm = null;
		mm = new ModelMap();
//		Map<String, Object> inParam = new HashMap<String, Object>();
//		inParam.put("PROD_CODE", prodCode);
		try {
			//페이지번호
			int nowPage = StringUtil.nvlInt((String)inParam.get("PAGE_NO"), 1);
			int rowCnt	= StringUtil.nvlInt((String)inParam.get("S_ROW_CNT"), 10);
			inParam.put("S_ROW_CNT", rowCnt);
			inParam.put("S_NUM", 1);
			inParam.put("E_NUM", 10);
			int rowTotal = webBoardDao.selectListPcCommentByProdCnt(inParam);
			PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, rowCnt, 10);
			
			mm.put("PAGE_NO", nowPage);
			mm.put("pageNav", pageNav);
			inParam.put("START_ROW", pageNav.getStartRow());
			inParam.put("END_ROW", pageNav.getEndRow());
			
			//	댓글 목록을 가져온다.
			mm.put("comments", webBoardDao.selectListPcCommentByProd(inParam));
			mm.put("params", inParam);
		} catch (Exception e) {
			// TODO: handle exception
		}
		
			
		return mm;
	}	
	
	@SuppressWarnings("unchecked")
	@Override
	@Transactional
	public ModelMap selectPcProdReview(Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆SERVICE selectPcProdReview START☆★☆★☆★☆★☆★☆★☆");
		
		ModelMap mm = null;
		mm = new ModelMap();
		try {
			//페이지번호
			int nowPage = StringUtil.nvlInt((String)inParam.get("PAGE_NO"), 1);
			int rowCnt	= StringUtil.nvlInt((String)inParam.get("S_ROW_CNT"), 10);
			inParam.put("S_ROW_CNT", rowCnt);
			inParam.put("S_NUM", 1);
			inParam.put("E_NUM", 10);
			if(StringUtil.nvlInt((String)inParam.get("PROD_TYPE_CD"), CmmnCnst.PROD_TYPE_SELL) == CmmnCnst.PROD_TYPE_FREESHARE){
//				나눔 신청 목록 갯수을 가져온다.
				int rowTotal = webCtryDao.selectListPcFreeshareReqCnt(inParam);
				PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, rowCnt, 10);
				
				mm.put("PAGE_NO", nowPage);
				mm.put("pageNav", pageNav);
				inParam.put("START_ROW", pageNav.getStartRow());
				inParam.put("END_ROW", pageNav.getEndRow());
				
				//	댓글 목록을 가져온다.
				mm.put("freeshare", webCtryDao.selectListPcFreeshareReq(inParam));
				mm.put("params", inParam);
			} else {
//				상품 후기 목록 개수을 가져온다.
				int rowTotal = webBoardDao.selectListPcReviewCnt(inParam);
				PageNavigation pageNav= new PageNavigation(nowPage, rowTotal, rowCnt, 10);
				
				mm.put("PAGE_NO", nowPage);
				mm.put("pageNav", pageNav);
				inParam.put("START_ROW", pageNav.getStartRow());
				inParam.put("END_ROW", pageNav.getEndRow());
				
				mm.put("reviews", webBoardDao.selectListPcReview(inParam));
				mm.put("params", inParam);
			}
		} catch (Exception e) {
			// TODO: handle exception
		}
		return mm;
	}

	@Override
	public Map<String, Object> selectDetailProd(Map<String, Object> inParam) throws Exception{
		Map<String, Object> map = webCtryDao.selectProdDetailInfo(inParam);

		map.put("PROD_MB_DTL", StringUtil.replaceEmptyString((String)map.get("PROD_MB_DTL"), StringUtil.PROD_DTL_EMPTY_TEXT));
		map.put("PROD_PC_DTL", StringUtil.replaceEmptyString((String)map.get("PROD_PC_DTL"), StringUtil.PROD_DTL_EMPTY_TEXT));
		return map;
	}

	@Override
	public int selectStatCd(int mberSeq, List<OrdProduct> ordList, long pointUseAmt, int step) throws Exception{
		for( OrdProduct op : ordList){

			Map<String, Object> map = new HashMap<String, Object>();
			switch(op.getProdTypeCd()){
			case CmmnCnst.PROD_TYPE_SELL:
				map = webCtryDao.selectStatBySell(op.getProdCode(), (int)op.getOrdQty());
				break;
			case CmmnCnst.PROD_TYPE_SHARE:
				map = webCtryDao.selectStatByShar(op.getProdCode(), (int)op.getOrdQty());
				if( step == CmmnCnst.SELECT_STAT_PROD){
					map.put("CART_ALREADY", webCtryDao.selectStatSharByCart(op.getProdCode(), mberSeq, op.getShar().getShareDay()));
				}
				break;
			case CmmnCnst.PROD_TYPE_FREESHARE:
				map = webCtryDao.selectStatByFree(op.getProdCode(), (int)op.getOrdQty());
				break;
			case CmmnCnst.PROD_TYPE_RENT:
				map = webCtryDao.selectStatByRent(op.getProdCode(), (int)op.getOrdQty());
				break;
			}

			int retVal = ((BigDecimal)map.get("CNT")).intValue();
			if( retVal > 0){
				retVal = StringUtil.nvlInt((String)map.get("PROD_STAT_CD"), 0);
				if(retVal != CmmnCnst.STAT_PROD_ING){
					return retVal;
				}

				if( op.getOptions() != null ){
					logger.debug("WebCtryServiceImpl::selectStatCd() -------------- step 4");
					for( OrdProduct.Option option : op.getOptions()){
						if(option.getOrdQty() > webCtryDao.selectCountOption(option.getOptCd())){
							return CmmnCnst.STAT_OPTION_NOT_ENOUGH;
						}
					}
				}
				else{
					logger.debug("WebCtryServiceImpl::selectStatCd() -------------- step 5");
					if( ((BigDecimal)map.get("INVENTORY_QTY")).intValue() < 0 ){
						return CmmnCnst.STAT_STOCK_NOT_ENOUGH;
					}
				}

				logger.debug("WebCtryServiceImpl::selectStatCd() -------------- step 6");
				if( !StringUtil.isEmpty(op.getCpnNo())){
					if( webCtryDao.selectUsableCoupon(mberSeq, op.getCpnNo()) == 0){
						return CmmnCnst.STAT_CPN_NOT_USABLE;
					}
				}

				if( step == CmmnCnst.SELECT_STAT_PROD && (int)map.get("CART_ALREADY") != 0){
					return CmmnCnst.STAT_CART_ALREADY;
				}
			}
		}

		//	포인트 사용 가능한지 체크
		if( pointUseAmt > 0 ){
			Map<String, Object> map = webCtryDao.selectMberInfo(mberSeq);
			long mberPoint = ((BigDecimal)map.get("POINT")).longValue();
			if( mberPoint < pointUseAmt){
				return CmmnCnst.STAT_POINT_NOT_ENOUGH;
			}
		}

		return CmmnCnst.STAT_PROD_ING;
	}

	@Override
	@Transactional
	public int procInsertCart(int mberSeq, List<OrdProduct> ordList) throws Exception{
		int nRet = -1;

		for( OrdProduct op : ordList){
			Map<String, Object> cartMap = new HashMap<String, Object>();
			cartMap.put("PROD_CODE", op.getProdCode());
			cartMap.put("PROD_QTY", op.getOrdQty());
			cartMap.put("MBER_SEQ", mberSeq);
			cartMap.put("DLV_PAY_F_CD", op.getDlv().getDlvPayFCd());
			if( op.getProdTypeCd() == CmmnCnst.PROD_TYPE_SHARE){
				cartMap.put("SHARE_DAY", op.getShar().getShareDay());
			}

			nRet = mobileMyBasketDao.insertUpdateCart(cartMap);

			if( op.getOptions() != null){
				for( OrdProduct.Option option : op.getOptions()){
					Map<String, Object> cartOptMap = new HashMap<String, Object>();
					cartOptMap.put("PROD_CODE", op.getProdCode());
					cartOptMap.put("OPT_CD", option.getOptCd());
					cartOptMap.put("OPT_QTY", option.getOrdQty());
					cartOptMap.put("MBER_SEQ", mberSeq);
					nRet = mobileMyBasketDao.inserUpdateCartOpt(cartOptMap);
				}
			}
		}

		return nRet;
	}

	@Override
	public ModelMap selectOrderPreInfo(int mberSeq, List<OrdProduct> ordList) throws Exception{
		
		ModelMap mm = new ModelMap();

		List<Map<String, Object>> prods = new ArrayList<Map<String, Object>>();
		long totalProdAmt = 0;
		
		//		상품 기본 정보를 가져온다.
		for( OrdProduct op : ordList){
			logger.info("prodCode[" + op.getProdCode() + "] : optCd[" + op.getDlv().getDlvPayFCd() + "] : qty[" + op.getOrdQty() + "]");
			totalProdAmt += op.getOrdAmt();
			Map<String, Object> map = webCtryDao.selectProdInfo(op.getProdCode(), CmmnCnst.PROD_IMG_TYPE_1);
			map.put("ORD_QTY", op.getOrdQty());
			map.put("ORD_AMT", op.getOrdAmt());
			if( op.getDlv() != null ){
				map.put("DLV_PAY_F_CD", op.getDlv().getDlvPayFCd());
			}

			if( op.getShar() != null ){
				map.put("PS_SHARE_DAY", op.getShar().getShareDay());
			}

			List<Map<String, Object>> options = new ArrayList<Map<String, Object>>();
			if( op.getOptions() != null ){
				for(OrdProduct.Option option : op.getOptions()){
					Map<String, Object> opt = webCtryDao.selectOption(option.getOptCd());
					opt.put("OPT_QTY", option.getOrdQty());
					options.add(opt);
				}
				map.put("options", options);
			}

			prods.add(map);
		}
		
		mm.put("prods", prods);

		//	회원 쿠폰 정보를 가져온다.
		mm.put("cpnGb", webCtryDao.selectListCoupon(mberSeq));
		//	회원 포인트 정보를 가져온다.
		Map<String, Object> pointMap = webCtryDao.selectMberInfo(mberSeq);
		mm.put("mber", pointMap);
		//	배송지 정보를 가져온다.
		mm.put("dlv", webCtryDao.selectDlvAddrs(mberSeq));

		String[] arryKey = new String[1];
		arryKey[0]="AGR_DESC";
		
		//  개인정보 판매자 제공에 대한 동의 약관 내용 가져온다.
		String agrDesc = "";
		Map<String, Object> agrDescMap = webCtryDao.selectAgrDesc("04", "06");
		if(null != agrDescMap){
			agrDesc = CommonUtil.clobToString(agrDescMap, arryKey).get("AGR_DESC").toString();
			if(null != agrDesc){
				agrDesc = agrDesc.replaceAll("</p><p>", "#AGR_DESC#").replaceAll("<p>", "").replaceAll("</p>", "").replaceAll("#AGR_DESC#", "</br>");
			}
		}
		mm.put("asppi", agrDesc);
		
		// 사용 포인트 SELECTBOX SIZE 구하기
		long usePointSize = 0;
		long minusPointSize = 0;
		BigDecimal bdPointUnitAmt = new BigDecimal(CmmnCnst.POINT_UNIT_AMT);
		if(totalProdAmt >= CmmnCnst.POINT_UNIT_AMT){
			
			// 포인트사이즈 = 몫(총 상품금액 / 포인트 결제 단위)
			BigDecimal bdTotalProdAmt = new BigDecimal(totalProdAmt);
			usePointSize = bdTotalProdAmt.divide(bdPointUnitAmt).longValue();
			
			BigDecimal bdMyPoint = new BigDecimal(((BigDecimal)pointMap.get("POINT")).longValue());
			long myPointSize = bdMyPoint.divide(bdPointUnitAmt).longValue();
			
			BigDecimal bdPointLimitAmt = new BigDecimal(CmmnCnst.SELT_UPPER_LIMIT_POINT); 
			long limitPointSize = bdPointLimitAmt.divide(bdPointUnitAmt).longValue();

			if(limitPointSize < myPointSize){
				myPointSize = limitPointSize;
			}
			
			if(myPointSize < usePointSize){
				usePointSize = myPointSize;
			}		
		}
		
	    if(0 < usePointSize){
			if(CmmnCnst.SELT_LIMIT_AMT > (totalProdAmt - (usePointSize * CmmnCnst.POINT_UNIT_AMT))){
				if(CmmnCnst.SELT_LIMIT_AMT >= CmmnCnst.POINT_UNIT_AMT){
					BigDecimal bdSeltLimitAmt = new BigDecimal(CmmnCnst.SELT_LIMIT_AMT); 
					minusPointSize = bdSeltLimitAmt.divide(bdPointUnitAmt).longValue();
				}				
			}
		}

		mm.put("usePointSize", usePointSize);
		mm.put("minusPointSize", minusPointSize);

		//	ORD_CD를 먼저 생성한다.
		//mm.put("ordCd", webCtryDao.selectOrdInfoSeq());		// [2015-11-21] okayjava >> ORD_CD 를 가져오는 컨트롤러 땀
		return mm;
	}

	@Override
	public Map<String, Object> selectDlvInfo(int mberSeq) throws Exception{
		return webCtryDao.selectDlvAddrs(mberSeq);
	}

	@Override
	public Map<String, Object> selectDlvAddr(String regSeq) throws Exception{
		return webCtryDao.selectDlvAddr(regSeq);
	}

	@Override
	public String selectExtLandMap(String zipCd) throws Exception{
		return webCtryDao.selectExtLandMap(zipCd);
	}

	@Override
	public boolean procOrderInfo(OrdInfo ordInfo) throws Exception{
		for( OrdProduct op : ordInfo.getProds()){
			Map<String, Object> procMap = webCtryDao.selectOrdProduct(op);
			logger.info(procMap.toString());
			if(!op.verify(procMap)){
				return false;
			}
		}

		return true;
	}

	@Override
	@Transactional
	public int insertOrder(OrdInfo ordInfo) throws Exception{
		int nRet = 0;
		//	주문정보에 insert 한다.
		nRet = webCtryDao.insertOrdInfo(ordInfo);

		//	주문 배송지 정보에 insert 한다.
		nRet = webCtryDao.insertOrdDlvInfo(ordInfo.getDlvInfo());

		for( OrdProduct op : ordInfo.getProds()){
			Map<String, Object> prodMap = new HashMap<String, Object>();
			prodMap.put("PROD_CODE", op.getProdCode());
			prodMap.put("ORD_CD", ordInfo.getOrdCd());
			prodMap.put("PROD_ORD_AMT", op.getOrdAmt());

			/* 상품별 배송비 테이블 구조상 불가하여 주문테이블의 배송비를 넣는다.
			if( op.getDlv().getExtLandPrce() == 0 ){
				prodMap.put("DLV_PRCE", op.getDlv().getDlvPrce());
			}
			else{
				prodMap.put("DLV_PRCE", op.getDlv().getExtLandPrce());
			}
			*/
			
			prodMap.put("DLV_PRCE", ordInfo.getDlvSeltAmt());

			prodMap.put("PROD_CPN_CD", op.getCpnNo());
			prodMap.put("CPN_USE_AMT", "");
			prodMap.put("DLV_PAY_GB_CD", op.getDlv().getDlvPayGbCd());
			prodMap.put("PROD_PRCE", op.getSellPrce());
			prodMap.put("ORD_QTY", op.getOrdQty());
			prodMap.put("CTRY_CD", op.getCtryCd());
			prodMap.put("PROD_TYPE_CD", String.valueOf(op.getProdTypeCd()));
			prodMap.put("MBER_SEQ", ordInfo.getMberSeq());
			prodMap.put("SELLER_MBER_SEQ", op.getMberSeq());
			prodMap.put("SHARE_TERM", op.getShar().getShareDay());
			prodMap.put("DLV_PAY_F_CD", op.getDlv().getDlvPayFCd());
			prodMap.put("DLV_GRP_CODE", op.getDlv().getDlvGrpCode());

			prodMap.put("PROC_STAT_CD", op.getProcStatCd() );

			// [2015-11-12][KANG] 수량을 검색엔진에 추가
			try{
				Elasticsearch elasticsearch = new Elasticsearch();
				Map<String, Object> indexingMap = new HashMap<String, Object>();
				indexingMap.put("PROD_CODE", String.valueOf(op.getProdCode()) );
				indexingMap.put("ORD_QTY", String.valueOf(op.getOrdQty()));
				elasticsearch.upadteSearchIndexing(indexingMap);
			}catch (Exception e){
				e.printStackTrace();
			}

			//	주문상품정보(ORD_PROD_INFO)에 insert 한다.
			prodMap.put("PROD_SEQ", webCtryDao.insertOrdProdInfo(prodMap));

			//	ordStatCd == 20인 경우만  update 한다.
			if("20".equals(ordInfo.getOrdStatCd())){
				//	상품정보에서 주문 수량만큼 뺀다.
				nRet = webCtryDao.updateUsedOrdQty(op.getProdCode(), (int)op.getOrdQty());

				//	CART를 삭제한다.
				nRet = mobileMyBasketDao.deleteMyBasket(prodMap);
			}

			//	옵션 정리
			if( op.getOptions() != null ){
				for( OrdProduct.Option option : op.getOptions()){

					prodMap.put("OPT_CD", option.getOptCd());
					prodMap.put("OPT_QTY", option.getOrdQty());

					//	ORD_PROD_OPT_INFO에 insert 한다.
					nRet = webCtryDao.insertOrdProdOptInfo(prodMap );

					//		ordStatCd == 20인 경우만  update 한다.
					if("20".equals(ordInfo.getOrdStatCd())){
						//	MBER_CPN_INFO 테이블에 update 한다.
						nRet = webCtryDao.updateProdOptionQty(option.getOptCd(), (int)option.getOrdQty());

						//	CART_OPT를 삭제한다.
						nRet = mobileMyBasketDao.deleteCartOpt(prodMap);
					}
				}
			}

			//	쿠폰 정리
			if( !StringUtil.isEmpty(op.getCpnNo())){
				prodMap.put("CPN_NO", op.getCpnNo());

				//	ORD_PROD_CPN_INFO에 insert 한다.
				nRet = webCtryDao.insertOrdProdCpnInfo(prodMap);

				//		ordStatCd == 20인 경우만  update 한다.
				if("20".equals(ordInfo.getOrdStatCd())){
					//	MBER_CPN_INFO에 update 한다.
					nRet = webCtryDao.updateUsedCoupon(ordInfo.getMberSeq(), op.getCpnNo() , String.valueOf(op.getProdCode()) );
				}
			}

//			ordStatCd == 20인 경우만  update 한다.
			if("20".equals(ordInfo.getOrdStatCd())){
				//판매자에게 PUSH 날리기
				try {
					String ifUrl = webCtryDao.selectPushIFUrl();
					String toMber = webCtryDao.selectProdMberSeq(op.getProdCode());
					PushUtil.sendPush(ifUrl, ordInfo.getMberSeq(), toMber, "37");
					//fromMber 주문자 : toMber 판매자 : 37 상품구매시시 판매자에게 보낼 때
				} catch (Exception e) {
					logger.info(e.toString());
				}
			}
		}

		//	ordStatCd == 20인 경우만  update 한다.
		if("20".equals(ordInfo.getOrdStatCd())){
			if( ordInfo.getPointUseAmt() > 0 ){
				//	포인트 사용 차감
				nRet = webCtryDao.updateUsedPoint(ordInfo.getMberSeq(), ordInfo.getPointUseAmt());
				//	포인트 사용내역
				nRet = webCtryDao.insertPointUseLog(ordInfo.getMberSeq(), ordInfo.getPointUseAmt(), ordInfo.getOrdCd());
			}
		}

		return nRet;
	}

	@Override
	@Transactional
	public int procPayment(OrdInfo ordInfo) throws Exception{
		int nRet = 0;
		for( OrdProduct op : ordInfo.getProds()){
			Map<String, Object> prodMap = new HashMap<String, Object>();
			prodMap.put("PROD_CODE", op.getProdCode());
			prodMap.put("MBER_SEQ", ordInfo.getMberSeq());

			//	상품정보에서 주문 수량만큼 뺀다.
			nRet = webCtryDao.updateUsedOrdQty(op.getProdCode(), (int)op.getOrdQty());
			
			//재고량 체크 확인
			int stockQty = webCtryDao.selectUsedOrdQty(op.getProdCode());
			
			//검색이 안되도록 N으로 넣어줌 
			if(0 >= stockQty ){
				try {
					Map<String, Object> indexingMap = new HashMap<String, Object>();
					indexingMap.put("PROD_CODE",op.getProdCode());//상품코드
					indexingMap.put("VIEW_YN","N");
					Elasticsearch elasticsearch = new Elasticsearch();
					elasticsearch.upadteSearchIndexing(indexingMap);
				} catch (Exception e) {
				           e.printStackTrace();
				}
			}
			
//			 NVL(STOCK_QTY, 1) - NVL(EXP_QTY, 0)
			
			//	CART를 삭제한다.
			nRet = mobileMyBasketDao.deleteMyBasket(prodMap);

			//	옵션 정리
			if( op.getOptions() != null ){
				for( OrdProduct.Option option : op.getOptions()){

					prodMap.put("OPT_CD", option.getOptCd());
					prodMap.put("OPT_QTY", option.getOrdQty());

					//	MBER_CPN_INFO 테이블에 update 한다.
					nRet = webCtryDao.updateProdOptionQty(option.getOptCd(), (int)option.getOrdQty());

					//	CART_OPT를 삭제한다.
					nRet = mobileMyBasketDao.deleteCartOpt(prodMap);
				}
			}

			//	쿠폰 정리
			if( !StringUtil.isEmpty(op.getCpnNo())){
				prodMap.put("CPN_NO", op.getCpnNo());

				//	MBER_CPN_INFO에 update 한다.
				nRet = webCtryDao.updateUsedCoupon(ordInfo.getMberSeq(), op.getCpnNo() , String.valueOf(op.getProdCode()) );
			}

			//판매자에게 PUSH 날리기
			try {
				String ifUrl = webCtryDao.selectPushIFUrl();
				String toMber = webCtryDao.selectProdMberSeq(op.getProdCode());
				PushUtil.sendPush(ifUrl, ordInfo.getMberSeq(), toMber, "37");
				//fromMber 주문자 : toMber 판매자 : 37 상품구매시시 판매자에게 보낼 때
			} catch (Exception e) {
				logger.info(e.toString());
			}
		}

		/*
		[2015-12-08] 포인트 차감은 결제 완료단에서 하기로 바뀜.
		if( ordInfo.getPointUseAmt() > 0 ){
			//	포인트 사용 차감
			nRet = webCtryDao.updateUsedPoint(ordInfo.getMberSeq(), ordInfo.getPointUseAmt());
			//	포인트 사용내역
			nRet = webCtryDao.insertPointUseLog(ordInfo.getMberSeq(), ordInfo.getPointUseAmt(), ordInfo.getOrdCd());
		}
		*/
		return nRet;
	}

	@Override
	public int selectCountPlan(String planCd, String prodCode) throws Exception{
		return webCtryDao.selectCountPlan(planCd, prodCode);
	}

	@Override
	public ModelMap selectFreesharePreInfo(int mberSeq, String prodCode) throws Exception{
		ModelMap mm = new ModelMap();
		mm.put("prod", webCtryDao.selectProdInfo(prodCode, CmmnCnst.PROD_IMG_TYPE_1));
		mm.put("mber", webCtryDao.selectMberInfo(mberSeq));
		mm.put("dlv", webCtryDao.selectDlvAddrs(mberSeq));
		return mm;
	}

	@Override
	public ModelMap selectMberInfo(int mberSeq) throws Exception{
		ModelMap mm = new ModelMap();
		mm.put("mber", webCtryDao.selectMberInfo(mberSeq));
		return mm;
	}

	@Override
	public int selectFreeshareStatCd(Map<String, Object> inParam) throws Exception{
		//		해당 상품이 나눔 가능한지 여부 판다.
		Map<String, Object> map = new HashMap<String, Object>();
		map = webCtryDao.selectStatByFree((String)inParam.get("PROD_CODE"), (int)inParam.get("MBER_SEQ"));

		if(map == null ){
			return CmmnCnst.STAT_UNKNOWN;
		}

		//	상품이 존재하는지 파악
		if( ((BigDecimal)map.get("CNT")).intValue() == 0 ){
			return CmmnCnst.STAT_PROD_DEL;
		}

		//	신청 마감일 체크
		//	okayjava :  ceil(A.FREESHARE_END_DT - SYSDATE) AS DDAY
		//				로 변경 하여 , 마감여부는 0 > DDAY 으로 퍼리함
		//	-	if( ((BigDecimal)map.get("DDAY")).intValue() >= 0 ){
		//	+	if( ((BigDecimal)map.get("DDAY")).intValue() < 0 ){
		if( ((BigDecimal)map.get("DDAY")).intValue() < 0 ){
			return CmmnCnst.STAT_FREESHARE_END;
		}

		//	상품 상태가 관리자에 의해서 판매중이 아닌 걸로 변경 되었음.
		if( StringUtil.nvlInt((String)map.get("PROD_STAT_CD"), CmmnCnst.STAT_PROD_ING) > CmmnCnst.STAT_PROD_ING){
			return CmmnCnst.STAT_PROD_STOP;
		}

		//	기 신청 여부 파악
		if( !StringUtil.isEmpty((String)map.get("FREESHARE_PROD_CODE"))){
			return CmmnCnst.STAT_ALREADY_REQUEST;
		}

		return CmmnCnst.STAT_PROD_ING;
	}

	@Override
	public int selectRentalStatCd(Map<String, Object> inParam) throws Exception{
		// 해당 상품이 렌탈이 가능한지 여부 판다.
		Map<String, Object> map = new HashMap<String, Object>();
		map = webCtryDao.selectStatByRent((String)inParam.get("PROD_CODE"), (int)inParam.get("MBER_SEQ"));

		LoggerUtil.writeMap(map);
		
		if(map == null ){
			return CmmnCnst.STAT_UNKNOWN;
		}

		//	상품이 존재하는지 파악
		if( ((BigDecimal)map.get("CNT")).intValue() == 0 ){
			return CmmnCnst.STAT_PROD_DEL;
		}
		
		//	상품 상태가 관리자에 의해서 판매중이 아닌 걸로 변경 되었음.
		if( StringUtil.nvlInt((String)map.get("PROD_STAT_CD"), CmmnCnst.STAT_PROD_ING) > CmmnCnst.STAT_PROD_ING){
			return CmmnCnst.STAT_PROD_STOP;
		}
		
		//	기 신청 여부 파악
		if( ((BigDecimal)map.get("RENT_CNT")).intValue() > 0 ){
			return CmmnCnst.STAT_RENT_ALREADY_REQUEST;
		}		

		return CmmnCnst.STAT_PROD_ING;
	}

	@Override
	@Transactional
	public int insertProdSubmitInfo(Map<String, Object> inParam) throws Exception{

		int ret = webCtryDao.insertProdSubmitInfo(inParam);
		
		
		return ret;
	}

	@Override
	public ModelMap selectRentalPreInfo(String prodCode, int mberSeq) throws Exception{
		ModelMap mm = new ModelMap();
		mm.put("prod", webCtryDao.selectProdInfo(prodCode, CmmnCnst.PROD_IMG_TYPE_1));
		mm.put("mber", webCtryDao.selectMberInfo(mberSeq));
		mm.put("dlv", webCtryDao.selectDlvAddrs(mberSeq));
		return mm;
	}

	@Override
	public ModelMap selectListProdInfoNoti(String prodCode) throws Exception{
		ModelMap mm = new ModelMap();
		mm.put("notices", webCtryDao.selectListProdInfoNoti(prodCode));
		return mm;
	}

	private String makeParentCtryCd(String ctryCd, int lvlSeq){
		String parent = "";

		if( lvlSeq == 2){
			parent = ctryCd.substring(0, 4) + "000000000000";
		}
		else if( lvlSeq == 3){
			parent = ctryCd.substring(0, 8) + "00000000";
		}

		return parent;
	}

	/**
	 * // [2015-11-21] okayjava >> ORD_CD 를 가져오는 컨트롤러 땀
	 */
	@Override
	public String selectNewOrdCd() throws Exception {
		return webCtryDao.selectOrdInfoSeq();
	}
}
