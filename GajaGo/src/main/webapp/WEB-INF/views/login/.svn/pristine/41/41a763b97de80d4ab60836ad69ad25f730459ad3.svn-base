/**<pre>
 * 1. Project Name : SSOCIO
 * 2. Package Name : com.ssocio.sharing.dao.web
 * 3. File Name	   : WebBuySaleDao.java
 * 4. Date		   : 오후 2:20 2015-08-19
 * 5. Author	   : H.M.Yang
 * 6. Note		   : 
 * </pre>
 */
package com.ssocio.sharing.dao.web;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 구매관리 판매상품 DAO
 * 구매관리 판매상품 DAO
 * @author H.M.Yang
 * @version 
 * @since 2015. 8. 19. 오후 2:20:00
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 8. 19.  |    H.M.Yang  | 신규
 * @Todo
 * </pre>
 */
@Component
public class WebBuySaleDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebBuySaleDao.class);
	
	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//	 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//	 -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * 판매상품 주문 내역 조회
	 * 판매상품 주문 내역 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrderHist(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleOrderHist Start");
		return sqlSession.selectList("webBuySaleMapper.selectListSaleOrderHist", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 주문 검색 건수 조회
	 * 판매상품 주문 검색 건수 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public int selectListSaleOrderHistTotCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleOrderHistTotCnt Start");
		return sqlSession.selectOne("webBuySaleMapper.selectListSaleOrderHistTotCnt", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 주문 내역 상품 조회
	 * 판매상품 주문 내역 상품 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrderProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleOrderProd Start");
		return sqlSession.selectList("webBuySaleMapper.selectListSaleOrderProd", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 교환신청 내역 조회
	 * 판매상품 교환신청 내역 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleExcReqHist(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleExcReqHist Start");
		return sqlSession.selectList("webBuySaleMapper.selectListSaleExcReqHist", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 교환신청 검색 건수 조회
	 * 판매상품 교환신청 검색 건수 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public int selectListSaleExcReqHistTotCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleExcReqHistTotCnt Start");
		return sqlSession.selectOne("webBuySaleMapper.selectListSaleExcReqHistTotCnt", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 교환신청 내역 상품 조회
	 * 판매상품 교환신청 내역 상품 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleExcReqProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleExcReqProd Start");
		return sqlSession.selectList("webBuySaleMapper.selectListSaleExcReqProd", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 반품신청 내역 조회
	 * 판매상품 반품신청 내역 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleTakeBaReqHist(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleTakeBaReqHist Start");
		return sqlSession.selectList("webBuySaleMapper.selectListSaleTakeBaReqHist", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 반품신청 검색 건수 조회
	 * 판매상품 반품신청 검색 건수 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public int selectListSaleTakeBaReqHistTotCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleTakeBaReqHistTotCnt Start");
		return sqlSession.selectOne("webBuySaleMapper.selectListSaleTakeBaReqHistTotCnt", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 반품신청 내역 상품 조회
	 * 판매상품 반품신청 내역 상품 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleTakeBaReqProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleTakeBaReqProd Start");
		return sqlSession.selectList("webBuySaleMapper.selectListSaleTakeBaReqProd", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 주문취소 내역 조회
	 * 판매상품 주문취소 내역 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrderCanHist(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleOrderCanHist Start");
		return sqlSession.selectList("webBuySaleMapper.selectListSaleOrderCanHist", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 주문취소 검색 건수 조회
	 * 판매상품 주문취소 검색 건수 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public int selectListSaleOrderCanHistTotCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleOrderCanHistTotCnt Start");
		return sqlSession.selectOne("webBuySaleMapper.selectListSaleOrderCanHistTotCnt", paramDto);
	}
	
	/**
	 * <pre>
	 * 판매상품 주문취소 내역 상품 조회
	 * 판매상품 주문취소 내역 상품 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSaleOrderCanProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSaleOrderCanProd Start");
		return sqlSession.selectList("webBuySaleMapper.selectListSaleOrderCanProd", paramDto);
	}
	
	/**
	 * <pre>
	 * 공통 판매상품 주문 상품 목록 조회
	 * 공통 판매상품 주문 상품 목록을 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListOrderProd Start");
		return sqlSession.selectList("webBuySaleMapper.selectListOrderProd", paramDto);
	}
	
	/**
	 * <pre>
	 * 주문취소 - 단일,복합 상품 취소 구분 획득
	 * </pre>
	 */
	public Map<String, Object> selectMobileSaleOrderCancelGroupInfo(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("webBuySaleMapper.selectMobileSaleOrderCancelGroupInfo",inParam);
	}
	/**
	 * <pre>
	 * 결제취소 - 상품 결제 기본 정보
	 * 
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 02
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectMobileDefaultProductSaleCancelInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectDefaultProductSaleCancelInfo Start");
		Map<String, Object> productInfo = null;
		try {
			productInfo =  sqlSession.selectOne("webBuySaleMapper.selectMobileDefaultProductSaleCancelInfo", inParam);
		} catch (Exception e) {
			logger.error("selectDefaultProductSaleCancelInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return productInfo;
	}	
	
	public String  selectMobileSaleOrderCancelOrdcd(String ORD_CD) throws Exception {
		return sqlSession.selectOne("webBuySaleMapper.selectMobileSaleOrderCancelOrdcd",ORD_CD);
	}
	
}