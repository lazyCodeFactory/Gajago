/**<pre>
 * 1. Project Name : Gapping1.0
 * 2. Package Name : com.lottecard.mall.cmmn.util
 * 3. File Name	: JsonUtil.java
 * 4. Date		 : 2014. 7. 7. 오후 2:16:39
 * 5. Author	   : adrra
 * 6. Note		 : 1. 기능
 *					  1) vo 객체를 JsonString으로 변환
 *					  2) byte[]를  JSONObject로 변환
 *					  3) String을 JSONObject로 변환
 *				   2. VO를 JsonString으로 자동생성하기 위한 조건
 *					  1) VO에서 사용할 데이터타입
 *						 - String, boolean, short, long, float, double
 *						 - List(ArrayList), Map(HashMap), byte[]
 *						 - byte 사용금지
 *					  2) List(ArrayList) 안에는 반듯이 Map(HashMap)만 사용
 *				   3. 주의
 *					  1) value 값 중 ""와 "null"(소문자)는 다름
 *					  2) "null"(소문자)는 실제 널인 경우
 *					  2) ""는 널이 아닌 ""임
 *				   4. 관련 lib : json-simple-1.1.jar
 *				   5. 단말에도 배포
 * </pre>
 */

package com.ssocio.sharing.cmmn.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.codehaus.jackson.map.ObjectMapper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import net.sf.json.JSONArray;
import net.sf.json.JSONException;
import net.sf.json.JSONObject;
import net.sf.json.JSONSerializer;


/**
 * <pre>
 * JSon Util
 *  - 1. headVo + bodyVo		   -> ApiJsonString : getApiJsonStringFromVo( Object headVo, Object bodyVo )
 *  - 2. headVo + bodyVo		   -> ApiJsonObject : getApiJsonObjectFromVo( Object headVo, Object bodyVo )
 *  - 3. headJsonObj + bodyJsonObj -> ApiJsonString : getApiJsonStringFromJsonObject(headJsonObj, bodyJsonObj)
 *  - 4. headJsonObj + bodyJsonObj -> ApiJsonObject : getApiJsonObjectFromJsonObject(headJsonObj, bodyJsonObj)
 *  - 5. JsonString				-> JsonObject	: getJsonObjectFromJsonString( String jsonString )
 *  - 6. vo						-> JsonString	: getJsonStringFromVo( Object inVo )
 *													getJsonStringFromVoForPublic( Object inVo )
 *  - 7. Map/List				  -> JsonString	: getJsonStringFromMapList(Object( Object obj , String typeName )
 *  - 8. JsonObject				-> JsonString	: getJsonStringFromJsonObject( JSONObject jsonObj )
 * @author adrra
 * @version
 * @since 2014. 7. 7. 오후 2:16:45
 * @see
 * @History
 *  Date		 |	author	| 변경내용
 *	2014. 7. 7.  |	adrra	 | 신규
 * @Todo
 * </pre>
 */
public class JsonUtil {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(JsonUtil.class);

	/**
	 * <pre>
	 * getJsonfromMap: Map을 JSON으로 반환
	 * @author N.J.Kim
	 * @version
	 * @since 2015. 4. 22. 오전 9:44:16
	 * @see
	 * @History
	 *  Date		  |	author	| 변경내용
	 *  2015. 4. 22.  |	N.J.Kim   | 신규
	 * @Todo
	 * </pre>
	 */
	public static JSONObject getJsonfromMap(Map<String, Object> pramMap){
		JSONObject jsonObject=null;
		LoggerUtil.writeMap(pramMap);
		try {
			jsonObject = JSONObject.fromObject(pramMap);
			logger.debug("[jsonObject]" + jsonObject);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return jsonObject;
	}

	/**
	 * <pre>
	 * getJsonStringfromMap: Map을 JSON형태의 String으로 반환
	 * @author N.J.Kim
	 * @version
	 * @since 2015. 4. 22. 오전 9:44:16
	 * @see
	 * @History
	 *  Date		  |	author	| 변경내용
	 *  2015. 4. 22.  |	N.J.Kim   | 신규
	 * @Todo
	 * </pre>
	 */
	public static String getJsonStringfromMap(Map<String, Object> pramMap){

		ObjectMapper objectMapper = new ObjectMapper();
		//objectMapper.configure(SerializationFeature.WRITE_NULL_MAP_VALUES, true);
		String msg = null;
		LoggerUtil.writeMap(pramMap);
		try {
			msg = objectMapper.writeValueAsString(pramMap);
			logger.debug("[msg]" + msg);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return msg;
	}

	/**
	 * <pre>
	 * getJsonfromJsonString: JSON형태의 String을 JSONObject로 반환
	 * @author N.J.Kim
	 * @version
	 * @since 2015. 4. 22. 오전 9:44:16
	 * @see
	 * @History
	 *  Date		  |	author	| 변경내용
	 *  2015. 4. 22.  |	N.J.Kim   | 신규
	 * @Todo
	 * </pre>
	 */
	public static JSONObject getJsonfromJsonString(String jsonTxt){
		if(StringUtil.isEmpty(jsonTxt)) return null;
		else
			return (JSONObject) JSONSerializer.toJSON(jsonTxt);
	}

	/**
	 * <pre>
	 * getJsonfromJsonString: JSON형태의 String을 Map<String, Object>으로 반환
	 * @author N.J.Kim
	 * @version
	 * @since 2015. 4. 22. 오전 9:44:16
	 * @see
	 * @History
	 *  Date		  |	author	| 변경내용
	 *  2015. 4. 22.  |	N.J.Kim   | 신규
	 * @Todo
	 * </pre>
	 */
	public static Map<String, Object> getJsonStringToMap(String jsonTxt){
		if(StringUtil.isEmpty(jsonTxt)) return null;
		else{
			return jsonToMap((JSONObject) JSONSerializer.toJSON(jsonTxt));
		}
	}

	/**
	 * <pre>
	 * getJsonfromJsonString: JSONObject를 Map<String, Object>으로 반환
	 * @author N.J.Kim
	 * @version
	 * @since 2015. 4. 22. 오전 9:44:16
	 * @see
	 * @History
	 *  Date		  |	author	| 변경내용
	 *  2015. 4. 22.  |	N.J.Kim   | 신규
	 * @Todo
	 * </pre>
	 */
	public static Map<String, Object> jsonToMap(JSONObject json) throws JSONException {
		Map<String, Object> retMap = new HashMap<String, Object>();
		if(json != null)
			retMap = toMap(json);
		return retMap;
	}

	@SuppressWarnings("unchecked")
	public static Map<String, Object> toMap(JSONObject object) throws JSONException {
		Map<String, Object> map = new HashMap<String, Object>();

		Iterator<String> keysItr = object.keys();
		while(keysItr.hasNext()) {
			String key = keysItr.next();
			Object value = object.get(key);

			if(value instanceof JSONArray) {
				value = toList((JSONArray) value);
			}

			else if(value instanceof JSONObject) {
				value = toMap((JSONObject) value);
			}
			map.put(key, value);
		}
		return map;
	}

	public static List<Object> toList(JSONArray array) throws JSONException {
		List<Object> list = new ArrayList<Object>();
		for(int i = 0; i < array.size(); i++) {
			Object value = array.get(i);
			if(value instanceof JSONArray) {
				value = toList((JSONArray) value);
			}

			else if(value instanceof JSONObject) {
				value = toMap((JSONObject) value);
			}
			list.add(value);
		}
		return list;
	}
}