package com.ssocio.sharing.dao.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.cmmn.web.RspnsCnst;
import com.ssocio.sharing.vo.web.WebSession;

@Component
public class MobileJoinDao {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(MobileJoinDao.class);

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}


	public int selectEamilChek(Map<String, Object> inParam) throws Exception{
		logger.info("selectEamilChek Start");
		int num;
		try {
			num =  sqlSession.selectOne("mobileJoinMapper.selectEamilChek", inParam);
		} catch (Exception e) {
			logger.error("selectEamilChek DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return num;
	}

	public int selectMberChk(Map<String, Object> inParam) throws Exception{
		logger.info("selectMberChk Start");
		int num;
		try {
			num =  sqlSession.selectOne("mobileJoinMapper.selectMberChk", inParam);
		} catch (Exception e) {
			logger.error("selectMberChk DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return num;
	}

	public Map<String, Object> selectTermsDesc(Map<String, Object> inParam) throws Exception{
		logger.info("selectTermsDesc Start");

		return  sqlSession.selectOne("mobileJoinMapper.selectTermsDesc", inParam);
	}

	public void insertUserMber(Map<String, Object> inParam)throws Exception {
		try {
			sqlSession.insert("mobileJoinMapper.insertUserMber", inParam);
		} catch (Exception e) {
			logger.error("insertUserMber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public int insertSnsUserMber(Map<String, Object> inParam)throws Exception {
		int outParam = 0;
		try {
			outParam = sqlSession.insert("mobileJoinMapper.insertUserMber", inParam);
		} catch (Exception e) {
			logger.error("insertSnsUserMber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outParam;
	}

	/*
	 * 파일 정보 저장
	 */
	public int insertMberSnsImg(Map<String, Object> fileInfo) throws Exception {
		logger.debug("파일 정보 저장  - insertMberSnsImg:"+fileInfo);
		return sqlSession.insert("mobileJoinMapper.insertMberSnsImg", fileInfo);
	}

	/*
	 * 회원가입 포인트 지급
	 */
	public int snsJoinPoint(Map<String, Object> inParam) throws Exception {
		logger.debug("회원 가입 포인트 지급  - snsJoinPoint:"+inParam);
		return sqlSession.insert("mobileJoinMapper.snsJoinPoint", inParam);
	}
	public int snsInsertJoinPoint(Map<String, Object> inParam) throws Exception {
		logger.debug("회원 가입 포인트 지급  - snsJoinPoint:"+inParam);
		return sqlSession.insert("mobileJoinMapper.snsInsertJoinPoint", inParam);
	}
	/*
	 * 파일 정보 저장
	 */
	public int updateMberImg(Map<String, Object> fileInfo) throws Exception {
		logger.debug("파일 정보 저장  - updateMberImg:"+fileInfo);
		return sqlSession.insert("mobileJoinMapper.updateMberImg", fileInfo);
	}

	public String selectMberSeq() throws Exception{
		String MBER_SEQ="";
		try {
			MBER_SEQ = sqlSession.selectOne("mobileJoinMapper.selectMberSeq");
		} catch (Exception e) {
			logger.error("selectMberSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return MBER_SEQ;
	}


	public String selectLevCode(String code) throws Exception{
		String comCdNm;
		try {
			comCdNm = sqlSession.selectOne("mobileJoinMapper.selectLevCode", code);
		} catch (Exception e) {
			logger.error("selectLevCode DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}

		return comCdNm;
	}


	public void insertMberDtl(Map<String, Object> inParam) throws Exception {
		try {
			sqlSession.insert("mobileJoinMapper.insertMberDtl", inParam);
		} catch (Exception e) {
			logger.error("insertMberDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	
	public List<Map<String, Object>> selectTerms(ModelMap mm)throws Exception {
			
			
			
			logger.info("selectTerms Start");
			List<Map<String, Object>> list = null;
			try {
				list =  sqlSession.selectList("mobileJoinMapper.selectTerms", mm);
			} catch (Exception e) {
				logger.error("selectTerms DB Error : " + e.toString());
				throw new Exception(RspnsCnst.RC1000000004);
			}
			return list;
		}
	
	
	/**
	 * 판매자 전환용
	 * @param mm
	 * @return
	 * @throws Exception
	 */
	public List<Map<String, Object>> selectTermsSwitchSeller(ModelMap mm)throws Exception {
		
		
		
		logger.info("selectTermsSwitchSeller Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList("mobileJoinMapper.selectTermsSwitchSeller", mm);
		} catch (Exception e) {
			logger.error("selectTerms DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}


	public void insertAgree(Map<String, Object> inParam)throws Exception  {
		try {
			sqlSession.insert("mobileJoinMapper.insertAgree", inParam);
		} catch (Exception e) {
			logger.error("insertAgree DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public String selectWishSeq() throws Exception {
		String WISH_SEQ="";
		try {
			WISH_SEQ = sqlSession.selectOne("mobileJoinMapper.selectWishSeq");
		} catch (Exception e) {
			logger.error("selectWishSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return WISH_SEQ;
	}

	public void insertWishCate(Map<String, Object> inParam)throws Exception  {
		try {
			sqlSession.insert("mobileJoinMapper.insertWishCate", inParam);
		} catch (Exception e) {
			logger.error("insertWishCate DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void insertUserMberHist(Map<String, Object> inParam)throws Exception  {
		try {
			sqlSession.insert("mobileJoinMapper.insertUserMberHist", inParam);
		} catch (Exception e) {
			logger.error("insertUserMberHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public int selectCmpnyChek(Map<String, Object> inParam) throws Exception {
		logger.info("selectCmpnyChek Start");
		int num;
		try {
			num =  sqlSession.selectOne("mobileJoinMapper.selectCmpnyChek", inParam);
		} catch (Exception e) {
			logger.error("selectCmpnyChek DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return num;
	}


	public void insertCmpnyNo(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.insert("mobileJoinMapper.insertCmpnyNo", inParam);
		} catch (Exception e) {
			logger.error("insertCmpnyNo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public void insertMberMiniShop(Map<String, Object> inParam)throws Exception {
		try {
			sqlSession.insert("mobileJoinMapper.insertMberMiniShop", inParam);
		} catch (Exception e) {
			logger.error("insertMberMiniShop DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public void insertSellerInfo(Map<String, Object> inParam) throws Exception {
		try {
			sqlSession.insert("mobileJoinMapper.insertSellerInfo", inParam);
		} catch (Exception e) {
			logger.error("insertSellerInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void updateSellerInfo(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.update("mobileJoinMapper.updateSellerInfo", inParam);
		} catch (Exception e) {
			logger.error("updateSellerInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}

	public void updateUserMber(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.update("mobileJoinMapper.updateUserMber", inParam);
		} catch (Exception e) {
			logger.error("updateUserMber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public void updateMberDtl(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.update("mobileJoinMapper.updateMberDtl", inParam);
		} catch (Exception e) {
			logger.error("updateMberDtl DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public void deleteAgree(Map<String, Object> inParam)throws Exception {
		try {
			sqlSession.delete("mobileJoinMapper.deleteAgree", inParam);
		} catch (Exception e) {
			logger.error("deleteAgree DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public String selectGrpProdSeq()  throws Exception {
		String GRP_PROD_SEQ="";
		try {
			GRP_PROD_SEQ = sqlSession.selectOne("mobileJoinMapper.selectGrpProdSeq");
		} catch (Exception e) {
			logger.error("selectGrpProdSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return GRP_PROD_SEQ;
	}


	public void insertGrpProd(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.insert("mobileJoinMapper.insertGrpProd", inParam);
		} catch (Exception e) {
			logger.error("insertGrpProd DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public int selectMiniShopChek(Map<String, Object> inParam)throws Exception  {
		logger.info("selectMiniShopChek Start");
		int num;
		try {
			num =  sqlSession.selectOne("mobileJoinMapper.selectMiniShopChek", inParam);
		} catch (Exception e) {
			logger.error("selectCmpnyChek DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return num;
	}

	public int selectCmpnySellerChek(Map<String, Object> inParam)throws Exception  {
		logger.info("selectCmpnySellerChek Start");
		int num;
		try {
			num =  sqlSession.selectOne("mobileJoinMapper.selectCmpnySellerChek", inParam);
		} catch (Exception e) {
			logger.error("selectCmpnySellerChek DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return num;
	}


	public Map<String, Object> confirmYn(Map<String, Object> inParam)throws Exception  {
		logger.info("confirmYn Start");
		Map<String, Object> num;
		try {
			num =  sqlSession.selectOne("mobileJoinMapper.confirmYn", inParam);
		} catch (Exception e) {
			logger.error("confirmYn DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return num;
	}


	public void updateUserMberCfm(Map<String, Object> inParam) throws Exception {
		try {
			sqlSession.update("mobileJoinMapper.updateUserMberCfm", inParam);
		} catch (Exception e) {
			logger.error("updateUserMberCfm DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public void insertUserMberS(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.insert("mobileJoinMapper.insertUserMberS", inParam);
		} catch (Exception e) {
			logger.error("insertUserMberS DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public String selectSerialKey() throws Exception{
		String SERIAL_KEY="";
		try {
			SERIAL_KEY = sqlSession.selectOne("mobileJoinMapper.selectSerialKey");
		} catch (Exception e) {
			logger.error("selectSerialKey DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return SERIAL_KEY;
	}


	public String selectsiteIFUrl() throws Exception {
		return sqlSession.selectOne("mobileJoinMapper.selectsiteIFUrl");
	}


	public void insertAlrm(Map<String, Object> inParam) throws Exception{
		try {
			sqlSession.insert("mobileJoinMapper.insertAlrm", inParam);
		} catch (Exception e) {
			logger.error("insertAlrm DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}


	public Map<String, Object> selectUserInfo(Map<String, Object> inParam) throws Exception{
		logger.info("selectTerms Start");
		Map<String, Object> mm = null;
		try {
			mm =  sqlSession.selectOne("mobileJoinMapper.selectUserInfo", inParam);
		} catch (Exception e) {
			logger.error("selectTerms DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return mm;
	}


	public int selectShopChek(Map<String, Object> inParam)throws Exception {
		logger.info("selectShopChek Start");
		int num;
		try {
			num =  sqlSession.selectOne("mobileJoinMapper.selectShopChek", inParam);
		} catch (Exception e) {
			logger.error("selectShopChek DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return num;
	}


	public String selectSellerSeq()throws Exception  {
		String SELLER_CD="";
		try {
			SELLER_CD = sqlSession.selectOne("mobileJoinMapper.selectSellerSeq");
		} catch (Exception e) {
			logger.error("selectSellerSeq DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return SELLER_CD;
	}


	public WebSession getMberInfo(Map<String, Object> inParam) throws Exception{
		return sqlSession.selectOne("mobileJoinMapper.getMberInfo",inParam);
	}


}
