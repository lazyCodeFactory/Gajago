package com.ssocio.sharing.controller.admin;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.service.admin.AdminSharingOrderService;
import com.ssocio.sharing.vo.admin.AdminSession;


/**
 * <pre>
 * 스마트폰 쉐이링 주문 관리를 위한 컨트롤러
 * 스마트폰 쉐이링 주문 관리를 위한 컨트롤러
 * @author J.S.LEE
 * @version
 * @since 2015. 7. 21. 오후 7:16:50
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 21.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
@Controller
public class AdminSharingOrderController extends AdminReferController {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminSharingOrderController.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private AdminSharingOrderService adminSharingOrderService;
	
	
	
	
		
	@RequestMapping("/admin/sharingorder/selectUserPayPopup.do")
	public ModelAndView selectUserPayList(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN UPDATE ORDMEMO REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {
			mav.addObject("list",adminSharingOrderService.selectUserPayPopup(inParam));
			mav.addObject("params",inParam);
			mav.setViewName("admin/sharingorder/selectUserPayPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}	
		/**
		 * <pre>
		 * 배송조회 
		 * 배송조회 
		 * @param request
		 * @param response
		 * @param inParam
		 * @return
		 * @throws Exception
		 * @date 2015. 11. 8. 오전 10:50:00
		 * @author S.B.LEE
		 * @see com.ssocio.sharing.controller.admin
		 * </pre>
		 */
		@RequestMapping("/admin/sharingorder/searchDlvInfoPopup.do")
		public ModelAndView searchDlvInfo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
			logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.info("ADMIN UPDATE ORDMEMO REG START");
			logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
			ModelAndView mav = new ModelAndView();
			LoggerUtil.writeMap(inParam);
			ModelMap mm = new ModelMap();
			
			try {
				mav.addObject("list",adminSharingOrderService.searchDlvInfo(inParam));
				mav.addObject("params",inParam);
				mav.setViewName("admin/sharingorder/selectDlvMvInfoPopup");
			} catch (Exception e) {
				e.printStackTrace();
			}
			return mav;
		}	

	/**
	 * <pre>
	 * 결제내역 조회 
	 * 결제내역 조회 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 12. 18
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/sharingorder/selectListSharPay.do")
	public ModelAndView selectListSharPay(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SMARTPHONE SHARING BILLING LIST START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);

		try {
			mav.addObject("list", adminSharingOrderService.selectListSharPay(inParam));
			mav.addObject("params", inParam);
			mav.setViewName("admin/sharingorder/selectListSharPay");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 결제내역 조회 
	 * 결제내역 팝업
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 12. 21
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/sharingorder/payDetailListPopup.do")
	public ModelAndView payDetailListPopup(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SMARTPHONE SHARING BILLING LIST POPUP START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);

		try {
			mav.addObject("list", adminSharingOrderService.selectListSharPayHist(inParam));
			mav.addObject("params", inParam);
			mav.setViewName("admin/sharingorder/payDetailListPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 결제내역 조회 
	 * 결제내역 조회 엑셀다운로드
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @date 2015. 12. 21
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/sharingorder/selectListSharPayExcelDownload.do")
	public ModelAndView selectListSharOrderExcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SMARTPHONE SHARING BILLING LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView2");
		try {
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("스마트폰셰어링결제내역조회_"+today+".xls", check_browser(request)));
			String SheetName = "스마트폰셰어링결제내역조회";
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("주문자명");
			excelTitle.add("주문번호");
			excelTitle.add("상품명");
			excelTitle.add("통신사");
			excelTitle.add("가입구분");
			excelTitle.add("약정기간");
			excelTitle.add("요금제");
			excelTitle.add("정기결제일");
			excelTitle.add("결제금액");
			excelTitle.add("회차");
			excelTitle.add("결제일시");
			excelTitle.add("결제결과");
			excelTitle.add("연체일수");
			excelTitle.add("연체금액");
			excelTitle.add("상태");

			List<String> CellName = new ArrayList<String>();
			CellName.add("ORDER_INFO");
			CellName.add("ORD_CD");
			CellName.add("PROD_NM");
			CellName.add("TELCOM_NM");
			CellName.add("OPEN_TYPE");
			CellName.add("STIP_PERIOD");
			CellName.add("PAYPLAN_NM");
			CellName.add("SCHEDULE_DAY");
			CellName.add("AMT_BASE");
			CellName.add("STEP");
			CellName.add("SCHEDULE_DT");
			CellName.add("RSLT_CD");
			CellName.add("OVERDUE_DAY");
			CellName.add("AMT_OVERDUE");
			CellName.add("RSLT_STATE");
			
			List<String> sizeList = new ArrayList<String>();
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
	
			mav.addObject("fileName", "스마트폰셰어링결제내역조회_"+today+".xls");
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("sizeList", sizeList);
			mav.addObject("excelList", adminSharingOrderService.selectListSharPayExcelDownload(inParam));
			mav.addObject("param", inParam);

		} catch (Exception e) {e.printStackTrace();}
	    return mav;
	}
	
	
	/**
	 * <pre>
	 * 관리 메모 저장 
	 * 관리 메모 저장 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 8. 오전 10:49:39
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/sharingorder/updateOrdMemoReg.do")
	public ModelAndView updateOrdMemoReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN UPDATE ORDMEMO REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {
			mav.addObject("Cnt",adminSharingOrderService.updateOrdMemoReg(inParam));
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 주문 리스트 
	 * 주문 리스트 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 22. 오전 10:20:36
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/selectListOrderProd.do")
	public ModelAndView selectListSPProd(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {
			mav.addObject("list",adminSharingOrderService.selectListOrderProd(inParam));
			mav.setViewName("admin/sharingorder/selectListOrderProd");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	
	
	/**
	 * <pre>
	 * 교환/반품 리스트 
	 * 교환/반품 리스트 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 24. 오후 2:41:26
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/selectListChgProd.do")
	public ModelAndView selectListChgProd(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {
			mav.addObject("list",adminSharingOrderService.selectListChgProd(inParam));
			mav.setViewName("admin/sharingorder/selectListChgProd");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 해지 리스트 
	 * 해지 리스트 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 24. 오후 2:41:39
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/selectListTermiProd.do")
	public ModelAndView selectListRevokProd(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SELECTLISTTERMIPROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			mav.addObject("list",adminSharingOrderService.selectListTermiProd(inParam));
			mav.setViewName("admin/sharingorder/selectListTermiProd");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 해지 목록 엑셀 다운로드
	 * 해지 목록 엑셀 다운로드
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @date 2015. 7. 17. 오후 3:20:50
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/sharingorder/TermiOrderexcelDownload.do")
	public ModelAndView TermiOrderexcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT ORDER LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView");
		try {
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("스마트폰셰어링해지_"+today+".xls", check_browser(request)));
		
			String SheetName = "해지목록";
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("신청일시");
			excelTitle.add("주문번호");
			excelTitle.add("ID");
			excelTitle.add("제품명");
			excelTitle.add("쉐이링 이용기간");
			excelTitle.add("위약금");
			excelTitle.add("처리상태");
			excelTitle.add("처리완료일시");
			excelTitle.add("처리담당자");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("TERMI_REQ_DT");       //주문일시
			CellName.add("ORD_CD");             //주문번호
			CellName.add("MBER_EMAIL");         //ID
			CellName.add("PROD_NM");            //상품명
			CellName.add("SHAR_DAY");          //통신사
			CellName.add("TOTAL_PENALTY");         //요금제
			CellName.add("PROC_STAT_CD_NM");        //약정기간
			CellName.add("ADM_REGIST_DT");          //주문상태
			CellName.add("ADM_NM");          //주문상태
	
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			
			mav.addObject("excelList", adminSharingOrderService.getTermiOrderListExcelDownload(inParam));
			mav.addObject("param", inParam);

		} catch (Exception e) {e.printStackTrace();}
	    return mav;
	}
	/**
	 * <pre>
	 *  주문조회 관련 상세 
	 *  주문조회 관련 상세 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 23. 오후 10:41:59
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/selectOrderDtl.do")
	public ModelAndView selectOrderDtl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		String ord_stat_cd = (String) inParam.get("ORD_STAT_CD");
		try {
			mm =adminSharingOrderService.selectDlvAndOpeninfo(inParam);
			mm.put("params",inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("admin/sharingorder/selectOrderDtl",mm);
	}
	
	
	
	/**
	 * <pre>
	 *  일련번호 조회 팝업창 로드하기
	 *  일변번호 조회 팝업창 로드하기
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 23. 오후 10:41:59
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/searchUniqueNoPopup.do")
	public ModelAndView searchUniqueNoPopUp(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SEARCHUNIQUENOPOPUP  START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			Integer Cnt = (Integer) adminSharingOrderService.selectWaitProdCnt(inParam);
			inParam.put("PRODCNT", Cnt) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.addObject("params",inParam);
			mav.setViewName("admin/sharingorder/searchUniqueNoPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 입력한 일련번호 조회하기 
	 * 입력한 일련번호 조회하기 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 27. 오후 1:27:40
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/searchUniqueNo.do")
	public ModelAndView searchUniqueNo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			mav.addObject("list", adminSharingOrderService.searchUniqueNo(inParam).get("searchUniqueNoList")) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.addObject("searchParam",inParam) ; 
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 주문취소 팝업
	 * 주문취소 팝업 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 28. 오전 11:35:24
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/orderCancelPopup.do")
	public ModelAndView orderCancelPopup(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN SPPROD  SELECT LIST PROD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			mav.addObject("params",inParam);
			mav.setViewName("admin/sharingorder/orderCancelPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 상태값 변경 하기
	 * 상태값 변경 하기 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 29. 오후 9:39:50
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/insertOrderTbReg.do")
	public ModelAndView insertOrderTbReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN INSERTORDERTBREG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		inParam.put("ADM_ID", session.getADM_ID());
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			mav.addObject("params",inParam);
			mav.addObject("Cnt", adminSharingOrderService.insertOrderTbReg(inParam)) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping("/admin/sharingorder/selectChgDtlinfo.do")
	public ModelAndView selectChgDtlinfo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN selectChgDtlinfo START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			mav.addObject("params",inParam);
			mav.addObject("list", adminSharingOrderService.selectChgDtlinfo(inParam)) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.setViewName("admin/sharingorder/selectCrtnOrderDtl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * <pre>
	 * 교환/반품 상세 정보 값 변경시 update 
	 * 교환/반품 상세 정보 값 변경시 update 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 7. 30. 오후 2:54:38
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/updateRftnInfoReg.do")
	public ModelAndView updateRftnInfoReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN UPDATE_RFTN_INFO_REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		inParam.put("ADM_ID", session.getADM_ID());
		inParam.put("ADM_NM", session.getADM_NM());
		
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
//			mav.addObject("params",inParam);
			mav.addAllObjects(adminSharingOrderService.updateRftnInfoReg(inParam)); // 대기 삳태인 상품 카운트 값 가져오기 
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 엑셀다운
	 * 엑셀다운 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @exception
	 * @date 2015. 8. 4. 오후 2:30:28
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/OrderexcelDownload.do")
	public ModelAndView excelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam){
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT ORDER LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView");
		try {
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("SharingOrder"+today+".xls", check_browser(request)));
		
			String SheetName = "주문목록";
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("주문일시");
			excelTitle.add("주문번호");
			excelTitle.add("주문자명(ID)");
			excelTitle.add("제품명");
			excelTitle.add("통신사");
			excelTitle.add("가입유형");
			excelTitle.add("요금제");
			excelTitle.add("약정기간");
			excelTitle.add("주문상태");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("ORD_REG_DATE");       //주문일시
			CellName.add("ORD_CD");             //주문번호
			CellName.add("USRNM");         //ID
			CellName.add("PROD_NM");            //상품명
			CellName.add("TELCOM_NM");          //통신사
			CellName.add("OPEN_TYPE_NM");          //가입유형
			CellName.add("PAYPLAN_NM");         //요금제
			CellName.add("STIP_PERIOD");        //약정기간
			CellName.add("COM_CD_NM");          //주문상태
	
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			
			mav.addObject("excelList", adminSharingOrderService.getOrderListExcelDownload(inParam));
			mav.addObject("param", inParam);

		} catch (Exception e) {e.printStackTrace();}
	    return mav;
	}
	
	
	@RequestMapping("/admin/sharingorder/ChgOrderexcelDownload.do")
	public ModelAndView ChgOrderexcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam){
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT ORDER LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView");
		try {
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("SharChgOrder"+today+".xls", check_browser(request)));
		
			String SheetName = "교환목록";
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("신청일시");
			excelTitle.add("주문번호");
			excelTitle.add("주문자명(ID)");
			excelTitle.add("제품명");
			excelTitle.add("처리담당자");
			excelTitle.add("처리완료일시");
			excelTitle.add("처리상태");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("CHG_REG_DT");       //주문일시
			CellName.add("ORD_CD");             //주문번호
			CellName.add("USRNM");         //ID
			CellName.add("PROD_NM");            //상품명
			CellName.add("ADM_NM");          //통신사
			CellName.add("CHG_FIN_DT");         //요금제
			CellName.add("COM_CD_NM");        //약정기간
	
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			
			mav.addObject("excelList", adminSharingOrderService.ChgOrderexcelDownload(inParam));
			mav.addObject("param", inParam);

		} catch (Exception e) {e.printStackTrace();}
	    return mav;
	}
	
	private String check_browser(HttpServletRequest request) {
		String browser = "";
		String header = request.getHeader("User-Agent");
		//신규추가된 indexof : Trident(IE11) 일반 MSIE로는 체크 안됨
		if (header.indexOf("MSIE") > -1 || header.indexOf("Trident") > -1){
		browser = "ie";
		}
		//크롬일 경우
		else if (header.indexOf("Chrome") > -1){
		browser = "chrome";
		}
		//오페라일경우
		else if (header.indexOf("Opera") > -1){
		browser = "opera";
		}
		//사파리일 경우
		else if (header.indexOf("Apple") > -1){
		browser = "sarari";
		} else {
		browser = "firfox"; 
		}
		return browser;
	}

	private String getDisposition(String down_filename, String browser_check) throws UnsupportedEncodingException {
		String prefix = "attachment;filename=";
		String encodedfilename = null;
		System.out.println("browser_check:"+browser_check);
		if (browser_check.equals("ie")) {
		encodedfilename = URLEncoder.encode(down_filename, "UTF-8").replaceAll("\\+", "%20");
		}else if (browser_check.equals("chrome")) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < down_filename.length(); i++){
		    char c = down_filename.charAt(i);
		    if (c > '~') {
		        sb.append(URLEncoder.encode("" + c, "UTF-8"));
		    } else {
		        sb.append(c);
		    }
		}
		encodedfilename = sb.toString();
		}else {
		encodedfilename = "\"" + new String(down_filename.getBytes("UTF-8"), "8859_1") + "\"";
		} 
		return prefix + encodedfilename;
	}
	@RequestMapping("/admin/sharingorder/selectListCancelProd.do")
	public ModelAndView selectListCancelProd(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN UPDATE_RFTN_INFO_REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		inParam.put("ADM_ID", session.getADM_ID());
		
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
//			mav.addObject("params",inParam);
			mav.addObject("list", adminSharingOrderService.selectListCancelProd(inParam)) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.setViewName("admin/sharingorder/selectListCancelProd");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	
	@RequestMapping("/admin/sharingorder/insertCancelreg.do")
	public ModelAndView insertCancelreg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN INSERTCANCELREG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		inParam.put("ADM_ID", session.getADM_ID());
		
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
//			mav.addObject("params",inParam);
			mav.addAllObjects(adminSharingOrderService.insertCancelreg(inParam)) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 해지 상세 
	 * 해지 상세 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 24. 오후 2:46:04
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/sharingorder/selectTermiDtl.do")
	public ModelAndView selectTermiDtl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN INSERTCANCELREG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		inParam.put("ADM_ID", session.getADM_ID());
		
		try {
			mav.addObject("list", adminSharingOrderService.selectTermiDtl(inParam)) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.addObject("params", inParam) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.setViewName("admin/sharingorder/selectTermiDtl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	@RequestMapping("/admin/sharingorder/updateTermiInfo.do")
	public ModelAndView updateTermiInfo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ADMIN INSERTCANCELREG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		inParam.put("ADM_ID", session.getADM_ID());
		inParam.put("ADM_NM", session.getADM_NM());
		
		try {
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			logger.debug("Params : " + inParam);
			logger.info("@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@");
			adminSharingOrderService.updateTermiInfo(inParam);
			mav.addObject("params", inParam) ; // 대기 삳태인 상품 카운트 값 가져오기 
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
}
