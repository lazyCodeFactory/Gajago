<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="adminOrderMapper">

	<!-- 주문 검색 조건절 -->
	<sql id="WhereOrdSearch">
		<if test="SEARCH_ORD_CD != null and SEARCH_ORD_CD != ''">
		   AND A.ORD_CD like '%'||<![CDATA[#{SEARCH_ORD_CD}]]>||'%'
		</if>
		<if test="SEARCH_PROD_NM != null and SEARCH_PROD_NM != ''">
		   AND C.PROD_NM like '%'||<![CDATA[#{SEARCH_PROD_NM}]]>||'%'
		</if>
		<if test="S_MBER_GB != null and S_MBER_GB != ''">
		   AND D.MBER_GB_CD = #{S_MBER_GB}
		</if>
		<if test="SEARCH_USER != '' and SEARCH_USER != null">
			<if test="SearchUserSel  == 'SEARCH_SELLER_ID'">
				AND D.MBER_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_SELLER_NM'">
				AND D.MBER_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_ID'">
			    AND A.ORD_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_NM'">
			    AND A.ORD_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
  		</if>
  		<choose>
    		<when test="SELT_CHK_BOX_RESULT != null">
    			AND A.SELT_GB_CD IN
		    	<foreach item="item_s" index="index1" collection="SELT_CHK_BOX_RESULT" open="(" separator="," close=")">
					#{item_s}
				</foreach>
    		</when>
    		<otherwise>
    			AND A.SELT_GB_CD IN ('0','1', '2', '3', '4')
    		</otherwise>
    	</choose>
    	<choose>
    		<when test="PROC_CHK_BOX_RESULT != null">
    			AND B.PROC_STAT_CD IN
		    	<foreach item="item_p" index="index2" collection="PROC_CHK_BOX_RESULT" open="(" separator="," close=")">
					#{item_p}
				</foreach>
    		</when>
    		<otherwise>
    			AND B.PROC_STAT_CD IN ('10', '21', '22', '23', '99')
    		</otherwise>
    	</choose>
	</sql>
	
	<!-- 판매 교환,반품 검색 조건절 -->
	<sql id="SharChgSearch">
		<if test="SEARCH_ORD_CD != null and SEARCH_ORD_CD != ''">
		   AND C.ORD_CD like '%'||<![CDATA[#{SEARCH_ORD_CD}]]>||'%'
		</if>
		<if test="SEARCH_PROD_NM != null and SEARCH_PROD_NM != ''">
		   AND E.PROD_NM like '%'||<![CDATA[#{SEARCH_PROD_NM}]]>||'%'
		</if>
		<if test="S_MBER_GB != null and S_MBER_GB != ''">
		   AND F.MBER_GB_CD = #{S_MBER_GB}
		</if>
		<if test="CHG_REASON_CD != null and CHG_REASON_CD != ''">
		   AND C.CHG_REASON_CD = #{CHG_REASON_CD}
		</if>
		<if test="SEARCH_USER != '' and SEARCH_USER != null">
			<if test="SearchUserSel  == 'SEARCH_SELLER_ID'">
				AND F.MBER_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_SELLER_NM'">
				AND F.MBER_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_ID'">
			    AND C.ORD_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_NM'">
			    AND C.ORD_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
  		</if>
     	<if test="INS_CHK_BOX_RESULT != null">
	        AND C.PROC_STAT_CD IN
	    	<foreach item="item" index="index" collection="INS_CHK_BOX_RESULT" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</sql>
	
	<!-- 판매 교환,반품 엑셀 다운로드 검색 조건절 -->
	<sql id="SharChgExcelSearch">
		<if test="SEARCH_ORD_CD != null and SEARCH_ORD_CD != ''">
		   AND A.ORD_CD like '%'||<![CDATA[#{SEARCH_ORD_CD}]]>||'%'
		</if>
		<if test="SEARCH_PROD_NM != null and SEARCH_PROD_NM != ''">
		   AND C.PROD_NM like '%'||<![CDATA[#{SEARCH_PROD_NM}]]>||'%'
		</if>
		<if test="S_MBER_GB != null and S_MBER_GB != ''">
		   AND D.MBER_GB_CD = #{S_MBER_GB}
		</if>
		<if test="CHG_REASON_CD != null and CHG_REASON_CD != ''">
		   AND F.CHG_REASON_CD = #{CHG_REASON_CD}
		</if>
		<if test="SEARCH_USER != '' and SEARCH_USER != null">
			<if test="SearchUserSel  == 'SEARCH_SELLER_ID'">
				AND D.MBER_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_SELLER_NM'">
				AND D.MBER_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_ID'">
			    AND A.ORD_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_NM'">
			    AND A.ORD_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
  		</if>
     	<if test="INS_CHK_BOX_RESULT != null">
	        AND B.PROC_STAT_CD IN
	    	<foreach item="item" index="index" collection="INS_CHK_BOX_RESULT" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</sql>	
	
	<!-- 취소 검색 조건절 -->
	<sql id="CancelSearch">
		<if test="SEARCH_ORD_CD != null and SEARCH_ORD_CD != ''">
		   AND A.ORD_CD like '%'||<![CDATA[#{SEARCH_ORD_CD}]]>||'%'
		</if>
		<if test="SEARCH_PROD_NM != null and SEARCH_PROD_NM != ''">
		   AND D.PROD_NM like '%'||<![CDATA[#{SEARCH_PROD_NM}]]>||'%'
		</if>
		<if test="S_MBER_GB != null and S_MBER_GB != ''">
		   AND E.MBER_GB_CD = #{S_MBER_GB}
		</if>
		<if test="CANC_REASON_CD != null and CANC_REASON_CD != ''">
		   AND C.CANC_REASON_CD = #{CANC_REASON_CD}
		</if>
		<if test="SEARCH_USER != '' and SEARCH_USER != null">
			<if test="SearchUserSel  == 'SEARCH_SELLER_ID'">
				AND E.MBER_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_SELLER_NM'">
				AND E.MBER_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_ID'">
			    AND A.ORD_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_NM'">
			    AND A.ORD_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
  		</if>
		<choose>
    		<when test="INS_CHK_BOX_RESULT != null">
    			AND A.SELT_GB_CD IN
		    	<foreach item="item" index="index" collection="INS_CHK_BOX_RESULT" open="(" separator="," close=")">
					#{item}
				</foreach>
    		</when>
    		<otherwise>
    			AND A.SELT_GB_CD IN ('0','1', '2', '3', '4')
    		</otherwise>
    	</choose>
	</sql>
	
	<!-- 취소 검색 엑셀 조건절 -->
	<sql id="CancelSearchExcel">
		<if test="SEARCH_ORD_CD != null and SEARCH_ORD_CD != ''">
		   AND A.ORD_CD like '%'||<![CDATA[#{SEARCH_ORD_CD}]]>||'%'
		</if>
		<if test="SEARCH_PROD_NM != null and SEARCH_PROD_NM != ''">
		   AND C.PROD_NM like '%'||<![CDATA[#{SEARCH_PROD_NM}]]>||'%'
		</if>
		<if test="S_MBER_GB != null and S_MBER_GB != ''">
		   AND D.MBER_GB_CD = #{S_MBER_GB}
		</if>
		<if test="CANC_REASON_CD != null and CANC_REASON_CD != ''">
		   AND A.CANC_REASON_CD = #{CANC_REASON_CD}
		</if>
		<if test="SEARCH_USER != '' and SEARCH_USER != null">
			<if test="SearchUserSel  == 'SEARCH_SELLER_ID'">
				AND D.MBER_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_SELLER_NM'">
				AND D.MBER_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_ID'">
			    AND A.ORD_EMAIL LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
			<if test="SearchUserSel  == 'SEARCH_ORD_NM'">
			    AND A.ORD_NM LIKE '%'||<![CDATA[#{SEARCH_USER}]]>||'%'
			</if>
  		</if>
		<choose>
    		<when test="INS_CHK_BOX_RESULT != null">
    			AND A.SELT_GB_CD IN
		    	<foreach item="item" index="index" collection="INS_CHK_BOX_RESULT" open="(" separator="," close=")">
					#{item}
				</foreach>
    		</when>
    		<otherwise>
    			AND A.SELT_GB_CD IN ('0','1', '2', '3', '4')
    		</otherwise>
    	</choose>
	</sql>

	<!-- 판매 주문 조회 리스트 개수 -->
	<select id="selectListSaleOrdCnt" parameterType="hashmap" resultType="int">
		SELECT
			  COUNT(*) AS CT
		FROM
			(
				SELECT
					  S.ORD_CD
					, S.ORD_REG_DATE
					, S.ORD_NM
					, S.ORD_EMAIL
					, S.POINT_USE_AMT
					, S.REAL_SELT_AMT
					, S.SELT_GB_CD
				FROM
					(
						SELECT
							  A.ORD_CD
							, A.ORD_REG_DATE
							, A.ORD_NM
							, A.ORD_EMAIL
							, A.ORD_AMT
							, A.POINT_USE_AMT
							, A.REAL_SELT_AMT
							, A.SELT_GB_CD
							, A.CREDIT_APPR_NO
							, B.PROD_CODE
							, B.PROC_STAT_CD
							, C.PROD_NM
							, C.MBER_SEQ AS SELLER_SEQ
							, D.MBER_EMAIL AS SELLER_ID
							, D.MBER_NM AS SELLER_NAME
							, D.MBER_GB_CD AS SELLER_TYPE
						FROM
							(
								SELECT
									  ORD_CD
									, TO_CHAR(ORD_REG_DATE , 'YYYY-MM-DD HH24:MI')	AS ORD_REG_DATE
									, ORD_NM
									, ORD_EMAIL
									, ORD_AMT
									, POINT_USE_AMT
									, REAL_SELT_AMT
									, SELT_GB_CD
									, CREDIT_APPR_NO
								FROM
						  			ORD_INFO
						  		WHERE
						  			TO_CHAR(ORD_REG_DATE,'YYYYMMDD') BETWEEN  #{S_START_DATE} AND  #{S_END_DATE}
						  	) A , ORD_PROD_INFO B , PROD C, MBER_INFO D
						WHERE
							    A.ORD_CD = B.ORD_CD
							AND B.PROD_CODE = C.PROD_CODE
							AND C.MBER_SEQ = D.MBER_SEQ
							AND B.PROD_TYPE_CD = '1'
							<include refid="WhereOrdSearch"/>
					) S
				GROUP BY S.ORD_CD, S.ORD_REG_DATE, S.ORD_NM, S.ORD_EMAIL, S.POINT_USE_AMT, S.REAL_SELT_AMT, S.SELT_GB_CD
			) TB
	</select>

	<!-- 판매 주문 조회  - 그룹 리스트 -->
	<select id="selectListSaleOrdGroup" parameterType="hashmap" resultType="hashmap">
		SELECT
			  TB.*
	        , TC.CARD_COMP_NM
			, TC.CARD_NO
			, TC.SETL_NM
			, TC.CARRIER
			, TC.DSTADDR
		FROM
			(
				SELECT
					  S.ORD_CD
					, S.ORD_REG_DATE
					, S.ORD_NM
					, S.ORD_EMAIL
					, S.POINT_USE_AMT
					, S.REAL_SELT_AMT
					, S.SELT_GB_CD
					, ROW_NUMBER() OVER(ORDER BY S.ORD_REG_DATE DESC) AS NO
				FROM
					(
						SELECT
							  A.ORD_CD
							, A.ORD_REG_DATE
							, A.ORD_NM
							, A.ORD_EMAIL
							, A.ORD_AMT
							, A.POINT_USE_AMT
							, A.REAL_SELT_AMT
							, A.SELT_GB_CD
							, A.CREDIT_APPR_NO
							, B.PROD_CODE
							, B.PROC_STAT_CD
							, C.PROD_NM
							, C.MBER_SEQ AS SELLER_SEQ
							, D.MBER_EMAIL AS SELLER_ID
							, D.MBER_NM AS SELLER_NAME
							, D.MBER_GB_CD AS SELLER_TYPE
						FROM
							(
								SELECT
									  ORD_CD
									, TO_CHAR(ORD_REG_DATE , 'YYYY-MM-DD HH24:MI')	AS ORD_REG_DATE
									, ORD_NM
									, ORD_EMAIL
									, ORD_AMT
									, POINT_USE_AMT
									, REAL_SELT_AMT
									, SELT_GB_CD
									, CREDIT_APPR_NO
								FROM
						  			ORD_INFO
						  		WHERE
						  			TO_CHAR(ORD_REG_DATE,'YYYYMMDD') BETWEEN  #{S_START_DATE} AND  #{S_END_DATE}
						  	) A , ORD_PROD_INFO B , PROD C, MBER_INFO D
						WHERE
							    A.ORD_CD = B.ORD_CD
							AND B.PROD_CODE = C.PROD_CODE
							AND C.MBER_SEQ = D.MBER_SEQ
							AND B.PROD_TYPE_CD = '1'
							<include refid="WhereOrdSearch"/>
					) S
				GROUP BY S.ORD_CD, S.ORD_REG_DATE, S.ORD_NM, S.ORD_EMAIL, S.POINT_USE_AMT, S.REAL_SELT_AMT, S.SELT_GB_CD
			) TB LEFT OUTER JOIN (SELECT ORD_CD, CARD_COMP_NM, CARD_NO, SETL_NM, CARRIER, DSTADDR FROM ORD_SETL_INFO WHERE TRD_GB_CD = '10') TC
    	ON TB.ORD_CD = TC.ORD_CD
		WHERE
			TB.NO BETWEEN #{START_ROW} AND #{END_ROW}
        ORDER BY TB.ORD_CD DESC
	</select>
	
	<!-- 판매 주문 조회  - 그룹 상세 리스트 -->
	<select id="selectListSaleOrdProduct" parameterType="hashmap" resultType="hashmap">
		SELECT
			  P.ORD_CD
			, P.ORD_REG_DATE
			, P.ORD_EMAIL
			, S.MBER_GB_CD AS SELLER_TYPE
			, S.MBER_NM AS SELLER_NAME
			, S.MBER_EMAIL AS SELLER_ID
			, Q.PROC_STAT_CD
			, Q.PROD_CODE
			, U.PROD_IMG_URL
			, R.PROD_NM
			, Q.PROD_PRCE
			, Q.ORD_QTY
			, NVL(Q.PROD_PRCE,0) * NVL(Q.ORD_QTY,0) AS PROD_PRCE_SUM
			, NVL(Q.DLV_PRCE,0) AS DLV_PRCE
			, NVL(Q.CPN_USE_AMT,0) AS CPN_USE_AMT
			, NVL(Q.PROD_PRCE,0) * NVL(Q.ORD_QTY,0) + NVL(Q.DLV_PRCE,0) - NVL(Q.CPN_USE_AMT,0) AS TOTAL_ORDER_PRICE
		FROM
			(	
				SELECT
					  TB.*
			        , TC.CARD_COMP_NM
					, TC.CARD_NO
				FROM
					(
						SELECT
							  S.ORD_CD
							, S.ORD_REG_DATE
							, S.ORD_NM
							, S.ORD_EMAIL
							, S.POINT_USE_AMT
							, S.REAL_SELT_AMT
							, S.SELT_GB_CD
							, ROW_NUMBER() OVER(ORDER BY S.ORD_REG_DATE DESC) AS NO
						FROM
							(
								SELECT
									  A.ORD_CD
									, A.ORD_REG_DATE
									, A.ORD_NM
									, A.ORD_EMAIL
									, A.ORD_AMT
									, A.POINT_USE_AMT
									, A.REAL_SELT_AMT
									, A.SELT_GB_CD
									, A.CREDIT_APPR_NO
									, B.PROD_CODE
									, B.PROC_STAT_CD
									, C.PROD_NM
									, C.MBER_SEQ AS SELLER_SEQ
									, D.MBER_EMAIL AS SELLER_ID
									, D.MBER_NM AS SELLER_NAME
									, D.MBER_GB_CD AS SELLER_TYPE
								FROM
									(
										SELECT
											  ORD_CD
											, TO_CHAR(ORD_REG_DATE , 'YYYY-MM-DD HH24:MI')	AS ORD_REG_DATE
											, ORD_NM
											, ORD_EMAIL
											, ORD_AMT
											, POINT_USE_AMT
											, REAL_SELT_AMT
											, SELT_GB_CD
											, CREDIT_APPR_NO
										FROM
								  			ORD_INFO
								  		WHERE
								  			TO_CHAR(ORD_REG_DATE,'YYYYMMDD') BETWEEN  #{S_START_DATE} AND  #{S_END_DATE}
								  	) A , ORD_PROD_INFO B , PROD C, MBER_INFO D
								WHERE
									    A.ORD_CD = B.ORD_CD
									AND B.PROD_CODE = C.PROD_CODE
									AND C.MBER_SEQ = D.MBER_SEQ
									AND B.PROD_TYPE_CD = '1'
									<include refid="WhereOrdSearch"/>
							) S
						GROUP BY S.ORD_CD, S.ORD_REG_DATE, S.ORD_NM, S.ORD_EMAIL, S.POINT_USE_AMT, S.REAL_SELT_AMT, S.SELT_GB_CD
					) TB LEFT OUTER JOIN (SELECT ORD_CD, CARD_COMP_NM, CARD_NO, SETL_NM, CARRIER, DSTADDR FROM ORD_SETL_INFO WHERE TRD_GB_CD = '10') TC
		    	ON TB.ORD_CD = TC.ORD_CD
				WHERE
					TB.NO BETWEEN #{START_ROW} AND #{END_ROW}
		        ORDER BY TB.ORD_REG_DATE DESC
			) p, ORD_PROD_INFO Q , PROD R, MBER_INFO S, PROD_IMG U
		WHERE
			    P.ORD_CD = Q.ORD_CD
			AND Q.PROD_CODE = R.PROD_CODE
			AND R.MBER_SEQ = S.MBER_SEQ
			AND R.PROD_CODE = U.PROD_CODE(+)
			AND U.PROD_IMG_GB_CD(+) = '11'
	</select>
	
	<!-- 판매 주문 상세 - 그룹 리스트 -->
	<select id="selectSaleDetailGroupList" parameterType="hashmap" resultType="hashmap">
		SELECT
			  A.ORD_CD
			, C.MBER_SEQ
			, D.MBER_GB_CD
			, D.MBER_NM
			, D.MBER_EMAIL
		FROM
			ORD_INFO A, ORD_PROD_INFO B, PROD C, MBER_INFO D
		WHERE
			    A.ORD_CD = B.ORD_CD
			AND B.PROD_CODE = C.PROD_CODE
			AND C.MBER_SEQ = D.MBER_SEQ
			AND A.ORD_CD = #{ORD_CD}
		GROUP BY A.ORD_CD, C.MBER_SEQ, D.MBER_GB_CD, D.MBER_NM, D.MBER_EMAIL
	</select>
	
	<!-- 판매 주문 상세 - 그룹 상품 리스트 -->
	<select id="selectSaleDetailGroupProductList" parameterType="hashmap" resultType="hashmap">
		SELECT
			  A.ORD_CD
			, A.TOT_ORD_QTY
      		, CASE WHEN TO_CHAR(SYSDATE,'YYYYMM') = TO_CHAR(A.REGIST_DT,'YYYYMM') THEN 'Y' ELSE 'N' END AS PHONE_CANCEL_YN
			, B.PROD_CODE
			, B.PROD_SEQ
			, C.MBER_SEQ
			, D.MBER_GB_CD
			, D.MBER_NM
			, D.MBER_EMAIL
			, C.PROD_NM
			, C.DLV_STAND_AMT
			, B.PROD_PRCE
			, B.ORD_QTY
			, NVL(B.PROD_PRCE,0) * NVL(B.ORD_QTY,0) AS PROD_SUM
			, B.PROC_STAT_CD
			, B.DLV_PAY_F_CD
			, NVL(B.DLV_PRCE,0) AS DLV_PRCE
			, NVL(B.CPN_USE_AMT,0) AS CPN_USE_AMT
			, B.DLV_GRP_CODE
			, NVL(B.PROD_CPN_CD,'NO') as PROD_CPN_CD
			, CASE WHEN (SELECT COUNT(*) FROM ORD_PROD_INFO WHERE ORD_CD = #{ORD_CD} AND DLV_GRP_CODE = B.DLV_GRP_CODE) = 1 THEN 'N' ELSE 'Y' END AS DLV_GROUP_YN
			, NVL(B.PROD_PRCE,0) * NVL(B.ORD_QTY,0) + NVL(B.DLV_PRCE,0) - NVL(B.CPN_USE_AMT,0) AS ORDER_AMOUNT
			, E.DLV_CMP_CD
			, E.INVC_NO
			, TO_CHAR(E.DLV_END_DT,'YYYY-MM-DD HH24:MI') AS DLV_END_DT
			, C.DLV_WAY_CD
			, C.DLV_CMP_CD AS ORGIN_DLV_CMP_CD
			, (SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD' AND COM_CD = C.DLV_CMP_CD) AS ORGIN_DLV_CMP_CD_NAME
			, (SELECT TO_CHAR(UPDT_DT,'YYYY-MM-DD HH24:MI') FROM PROD_BUY_CONF_INFO WHERE ORD_CD = A.ORD_CD AND PROD_CODE = B.PROD_CODE AND PROD_SEQ = B.PROD_SEQ) AS CONFIRM_DAY
		FROM
			ORD_INFO A, ORD_PROD_INFO B, PROD C, MBER_INFO D, INVC_INFO E
		WHERE
			    A.ORD_CD = B.ORD_CD
			AND B.PROD_CODE = C.PROD_CODE
			AND C.MBER_SEQ = D.MBER_SEQ
			AND B.ORD_CD = E.ORD_CD(+)
			AND B.PROD_CODE = E.PROD_CODE(+)
			AND B.PROD_SEQ = E.PROD_SEQ(+)
			AND A.ORD_CD = #{ORD_CD}
	</select>
	
	<!-- 판매 주문 상세 - 주문상품/옵션 리스트 -->
	<select id="selectSaleDetailProductOptionList" parameterType="hashmap" resultType="hashmap">
		SELECT
			  P.ORD_CD
			, P.PROD_CODE
			, P.PROD_SEQ
			, P.MBER_SEQ
			, P.MBER_GB_CD
			, P.MBER_NM
			, P.MBER_EMAIL
			, P.PROD_NAME
			, Q.OPT_CD
			, Q.OPT_QTY
			, Q.OPT_PRCE
			, Q.PROD_NM
			, Q.OPT_PROD_YN
			, Q.OPT_PROD_EXT_YN
			, Q.OP_GB_CD
			, (SELECT REPLACE(LTRIM(SYS_CONNECT_BY_PATH (PO.OPT_NM, ' // '), ' // '), ' // ', ' / ') AS OPT_NM
			   FROM PROD_OP PO, PROD_OP_INFO POI
			   WHERE PO.OPT_GRP_CD = Q.OPT_GRP_CD
			        AND PO.OPT_GRP_CD = POI.OPT_GRP_CD
			    	AND PO.OPT_USE_YN = 'Y'
			    	AND PO.OPT_STOCK_QTY IS NOT NULL
                	AND PO.OPT_CD = Q.OPT_CD
			   START WITH PO.PAR_OPT_CD = '0'
			   CONNECT BY PRIOR PO.OPT_CD = PO.PAR_OPT_CD
      		  ) AS OPT_NM
		FROM
  			(
				SELECT
					  A.ORD_CD
					, B.PROD_CODE
					, B.PROD_SEQ
					, C.MBER_SEQ
					, D.MBER_GB_CD
					, D.MBER_NM
					, D.MBER_EMAIL
					, C.PROD_NM AS PROD_NAME
				FROM
					ORD_INFO A, ORD_PROD_INFO B, PROD C, MBER_INFO D
				WHERE
					    A.ORD_CD = B.ORD_CD
					AND B.PROD_CODE = C.PROD_CODE
					AND C.MBER_SEQ = D.MBER_SEQ
				    AND A.ORD_CD = #{ORD_CD}
			) P LEFT OUTER JOIN
  			(
				SELECT
					  T1.ORD_CD
					, T1.PROD_CODE
					, T1.PROD_SEQ
					, T2.OPT_CD
					, T2.OPT_QTY
					, T3.OPT_GRP_CD
					, T3.OPT_NM
					, T3.OPT_PRCE
					, T4.PROD_NM
					, T4.OPT_PROD_YN
					, T4.OPT_PROD_EXT_YN
					, T5.OP_GB_CD
				FROM
					ORD_PROD_INFO T1 , ORD_PROD_OPT_INFO T2, PROD_OP T3 , PROD T4, PROD_OP_INFO T5
				WHERE
					    T1.ORD_CD = T2.ORD_CD
					AND T1.PROD_CODE = T2.PROD_CODE
					AND T1.PROD_SEQ = T2.PROD_SEQ
					AND T2.OPT_CD = T3.OPT_CD
					AND T1.PROD_CODE = T4.PROD_CODE
					AND T3.OPT_GRP_CD = T5.OPT_GRP_CD
					AND T1.ORD_CD = #{ORD_CD}
			) Q
		ON
			    P.ORD_CD = Q.ORD_CD
			AND P.PROD_CODE = Q.PROD_CODE
			AND P.PROD_SEQ = Q.PROD_SEQ
		ORDER BY P.PROD_CODE ASC, Q.OPT_PROD_EXT_YN ASC
	</select>
	
	<!-- 판매 주문 상세 - 주문정보  -->
	<select id="selectSaleOrdInfo" resultType="hashmap">
		SELECT 
			  TO_CHAR(A.ORD_REG_DATE , 'YYYY-MM-DD HH24:MI') AS ORD_REG_DATE
			, A.ORD_CD
			, A.ORD_GB_CD
			, A.ORD_NM
			, A.ORD_EMAIL
			, A.ORD_HP
			, A.CON_GB_CD
			, A.ADMIN_MEMO
			, A.POINT_USE_AMT
			, A.REAL_SELT_AMT
			, A.DLV_SELT_AMT
			, A.SELT_GB_CD
			, B.CARD_COMP_NM
			, B.CARD_NO
			, B.SETL_NM
			, B.CARRIER
			, B.DSTADDR
		FROM 
			ORD_INFO A LEFT OUTER JOIN ORD_SETL_INFO B
		ON A.ORD_CD = B.ORD_CD AND B.TRD_GB_CD = '10'
		WHERE
			A.ORD_CD = #{ORD_CD}
	</select>
	
	<!-- 판매 주문 상세 - 배송지 정보  -->
	<select id="selectSaleOrdDlvInfo" resultType="hashmap">
	    SELECT
	    	  ORD_CD
			, RCV_NM 
			, RCV_TEL
	    	, RCV_HP
	    	, SECU_NO
	    	, ZIP_CD 
	    	, JUSO_JIBEN
	    	, JUSO_DORO
	    	, JUSO_DTL 
	    	, DLV_MSG
	    FROM 
	    	ORD_DLV_INFO
	    WHERE
	    	ORD_CD = #{ORD_CD}
	</select>
	
	<!-- 주문메모 저장 -->
	<update id="updateAdminMemo" parameterType="hashmap">
		UPDATE ORD_INFO SET 
			  ADMIN_MEMO = #{adminMemo}
			, UPDT_DT = SYSDATE
		WHERE 
			ORD_CD = #{ordCd}
	</update>
	
	<!-- 주문취소 - 단일,복합 상품 취소 구분 획득 -->
	<select id="selectSaleAdminOrderCancelGroupInfo" resultType="hashmap">
		SELECT
			  A.MBER_SEQ
			, A.POINT_USE_AMT
			, A.REAL_SELT_AMT
			, COUNT(*) AS CT
		FROM
			ORD_INFO A, ORD_PROD_INFO B
		WHERE
			    A.ORD_CD = B.ORD_CD
			AND A.ORD_CD = #{ORD_CD}
		GROUP BY A.MBER_SEQ, A.POINT_USE_AMT, A.REAL_SELT_AMT
	</select>
	
	<!-- 결제취소 - 상품 결제 기본 정보  -->
	<select id="selectDefaultProductSaleCancelInfo" resultType="hashmap">
		SELECT
			  A.MBER_SEQ
			, NVL(A.POINT_USE_AMT,0) AS POINT_USE_AMT
			, NVL(B.PROD_CPN_CD,'NO') AS PROD_CPN_CD
			, NVL(B.DLV_PRCE,0) AS DLV_PRCE
			, B.PROD_PRCE * B.ORD_QTY - NVL(B.CPN_USE_AMT,0) AS TOTAL_CANCEL_PRICE
		FROM
			ORD_INFO A, ORD_PROD_INFO B, PROD C, MBER_INFO D
		WHERE
			    A.ORD_CD = B.ORD_CD
			AND B.PROD_CODE = C.PROD_CODE
			AND C.MBER_SEQ = D.MBER_SEQ
			AND B.PROC_STAT_CD NOT IN ('33','50')
			AND A.ORD_CD = #{ORD_CD}
			AND B.PROD_CODE = #{PROD_CODE}
			AND B.PROD_SEQ = #{PROD_SEQ}
	</select>
	
	<!-- 배송조회 - 택배 기본 정보  -->
	<select id="selectDlvInfomation" resultType="hashmap">
		SELECT
			  INVC_NO
			, DLV_CMP_CD
		FROM
			INVC_INFO
		WHERE
			    ORD_CD = #{ORD_CD}
			AND PROD_CODE = #{PROD_CODE}
			AND PROD_SEQ = #{PROD_SEQ}
	</select>
	
	<!-- 배송조회 - 택배 추적 정보  -->
	<select id="selectListDlvState" resultType="hashmap">
		SELECT
			  TO_CHAR(TREAT_DT, 'YYYY-MM-DD HH24:MI') AS TREAT_DT
			, TREATREGIPONM
			, TREATCDNM
		FROM
			INVC_PROC_HIST
		WHERE
			INVC_NO = #{INVC_NO}
		ORDER BY PROC_SEQ ASC
	</select>
	
	<!-- 배송조회 - 타 택새회사 URL  -->
	<select id="selectDlvCompanyURL" resultType="String">
		SELECT
			LINK_URL
		FROM
			DLV_LINK_INFO
		WHERE
			DLV_CMP_CD = #{DLV_CMP_CD}
	</select>
	
	<!-- 교환,반품 운송장 번호, 배송완료 시간 업데이트  처리 - 어드민 강제  -->
	<update id="updateDlvChgInvcInfo" parameterType="hashmap">
		UPDATE CHG_INVC_INFO SET
			  DLV_END_DT = TO_DATE('${DLV_END_DT}','YYYY-MM-DDHH24MI')
			, INVC_NO = #{INVC_NO}
			, DLV_STAT = '20'
		WHERE
			    ORD_CD = #{ORD_CD}
			AND CHG_CD = #{CHG_CD}
			AND PROD_CODE = #{PROD_CODE}
			AND PROD_SEQ = #{PROD_SEQ}
			AND INVC_NO = #{OLD_INVC_NO}
	</update>
	
	<!-- 운송장 번호, 배송완료 시간 업데이트  처리 - 어드민 강제  -->
	<update id="updateDlvInvcInfo" parameterType="hashmap">
		UPDATE INVC_INFO SET
			  DLV_END_DT = TO_DATE('${DLV_END_DT}','YYYY-MM-DDHH24MI')
			, INVC_NO = #{INVC_NO}
			, DLV_STAT_CD = '20'
		WHERE
			    ORD_CD = #{ORD_CD}
			AND PROD_CODE = #{PROD_CODE}
			AND PROD_SEQ = #{PROD_SEQ}
			AND INVC_NO = #{OLD_INVC_NO}
	</update>
	
	<!--배송완료 시간 정보 입력 - 어드민 강제  -->
	<insert id="insertDlvHistory" parameterType="hashmap">
		INSERT INTO INVC_PROC_HIST (
			  INVC_NO
			, DLV_CMP_CD
			, PROC_SEQ
			, ORDER_CD
			, REQ_YMD
			, TREAT_DT
			, TREATREGIPONM
			, TREATCDNM
			, DELIVYN
		) VALUES (
			  #{INVC_NO}
			, #{DLV_CMP_CD}
			, (SELECT NVL(MAX(PROC_SEQ),0) +1 FROM INVC_PROC_HIST WHERE INVC_NO = #{INVC_NO} AND ORDER_CD = #{ORD_CD})
			, #{ORD_CD}
			, TO_CHAR(SYSDATE,'YYYYMMDD')
			, SYSDATE
			, '관리자'
			, '배달완료'
			, 'Y'
		)
	</insert>
	
	<!-- 배송 업체 운송장 정보 입력 - 주문  -->
	<insert id="insertDlvInvcNumber" parameterType="hashmap">
		INSERT INTO INVC_INFO (
			  ORD_CD
			, PROD_CODE
			, PROD_SEQ
			, INVC_NO
			, DLV_CMP_CD
			, DLV_STAT_CD
			, REGIST_DT
			, DLV_START_DT
		) VALUES (
			  #{ORD_CD}
			, #{PROD_CODE}
			, #{PROD_SEQ}
			, #{INVC_NO}
			, #{DLV_CMP_CD}
			, '10'
			, SYSDATE
			, SYSDATE
		)
	</insert>
	
	<!-- 배송 업체 운송장 정보 입력  - 교환,반품 -->
	<insert id="insertDlvChgInvcNumber" parameterType="hashmap">
		INSERT INTO CHG_INVC_INFO (
			  ORD_CD
			, CHG_CD
			, PROD_CODE
			, PROD_SEQ
			, INVC_NO
			, DLV_CMP_CD
			, DLV_STAT
			, REGIST_DT
			, DLV_START_DT
		) VALUES (
			  #{ORD_CD}
			, #{CHG_CD}
			, #{PROD_CODE}
			, #{PROD_SEQ}
			, #{INVC_NO}
			, #{DLV_CMP_CD}
			, '10'
			, SYSDATE
			, SYSDATE
		)
	</insert>
	
	<!-- 반품 카운트 -->
	<select id="selectListTakeBackOrdCnt" parameterType="hashmap" resultType="int">
		SELECT
			  COUNT(*) AS CT
		FROM
			(
				SELECT
					  C.CHG_CD
          			, C.ORD_CD
          			, ROW_NUMBER() OVER(ORDER BY C.CHG_CD DESC) AS NO
				FROM
					(
					    SELECT
							  A.CHG_CD
							, A.ORD_CD
							, TO_CHAR(A.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
							, A.CHG_REASON_CD
							, A.CHG_REASON
							, B.PROD_CODE
							, B.PROD_SEQ
							, B.PROC_STAT_CD
							, O.ORD_NM
							, O.ORD_EMAIL
					    FROM
							CHG_RTN_PROC_INFO A, CHG_PROD_INFO B, ORD_INFO O
					    WHERE
							    A.CHG_CD = B.CHG_CD
							AND A.ORD_CD = O.ORD_CD
							AND TO_CHAR(A.REGIST_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
							AND B.PROC_STAT_CD IN (31, 32, 33)
					) C, ORD_PROD_INFO D , PROD E, MBER_INFO F, PROD_IMG G
				WHERE
					    C.ORD_CD = D.ORD_CD
					AND C.PROD_CODE = D.PROD_CODE
					AND C.PROD_CODE = E.PROD_CODE
					AND E.MBER_SEQ = F.MBER_SEQ
					AND C.PROD_CODE = G.PROD_CODE(+)
					AND D.PROD_TYPE_CD = '1'
					AND G.PROD_IMG_GB_CD(+) = '11'
					<include refid="SharChgSearch" />
				GROUP BY C.CHG_CD , C.ORD_CD
			) TA
	</select>
	
	<!-- 판매 반품 그룹 리스트 -->
	<select id="selectListTakeBackGroup" resultType="hashmap">
		SELECT
			  TA.*
		FROM
			(
				SELECT
					  C.CHG_CD
          			, C.ORD_CD
          			, ROW_NUMBER() OVER(ORDER BY C.CHG_CD DESC) AS NO
				FROM
					(
					    SELECT
							  A.CHG_CD
							, A.ORD_CD
							, TO_CHAR(A.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
							, A.CHG_REASON_CD
							, A.CHG_REASON
							, B.PROD_CODE
							, B.PROD_SEQ
							, B.PROC_STAT_CD
							, O.ORD_NM
							, O.ORD_EMAIL
					    FROM
							CHG_RTN_PROC_INFO A, CHG_PROD_INFO B, ORD_INFO O
					    WHERE
							    A.CHG_CD = B.CHG_CD
							AND A.ORD_CD = O.ORD_CD
							AND TO_CHAR(A.REGIST_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
							AND B.PROC_STAT_CD IN ('31', '32', '33')
					) C, ORD_PROD_INFO D , PROD E, MBER_INFO F, PROD_IMG G
				WHERE
					    C.ORD_CD = D.ORD_CD
					AND C.PROD_CODE = D.PROD_CODE
					AND C.PROD_CODE = E.PROD_CODE
					AND E.MBER_SEQ = F.MBER_SEQ
					AND C.PROD_CODE = G.PROD_CODE(+)
					AND D.PROD_TYPE_CD = '1'
					AND G.PROD_IMG_GB_CD(+) = '11'
					<include refid="SharChgSearch" />
				GROUP BY C.CHG_CD , C.ORD_CD
			) TA
		WHERE
			TA.NO BETWEEN #{START_ROW} AND #{END_ROW}
        ORDER BY TA.CHG_CD DESC
	</select>
	
	<!-- 판매 반품 그룹 상세 리스트 -->
	<select id="selectListTakeBackGroupList" resultType="hashmap">
		SELECT
			  TD.*
			, TO_CHAR(TE.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REGIST_DT
			, TI.ORD_NM
			, TI.ORD_EMAIL
			, TG.MBER_GB_CD AS SELLER_TYPE
			, TG.MBER_NM AS SELLER_NAME
			, TG.MBER_EMAIL
			, TE.PROC_STAT_CD
			, TF.PROD_NM
			, TH.PROD_IMG_URL
		FROM
  			(
    			SELECT
					  TB.ORD_CD
					, TB.CHG_CD
					, TB.CHG_REASON_CD
					, TB.CHG_REASON
					, TC.PROD_CODE
					, TO_CHAR(TC.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
    			FROM
      				(
						SELECT
							  TA.*
						FROM
							(
								SELECT
									  C.CHG_CD
				          			, C.ORD_CD
				          			, C.CHG_REASON_CD
				          			, C.CHG_REASON
				          			, ROW_NUMBER() OVER(ORDER BY C.CHG_CD DESC) AS NO
								FROM
									(
									    SELECT
											  A.CHG_CD
											, A.ORD_CD
											, TO_CHAR(A.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
											, A.CHG_REASON_CD
											, A.CHG_REASON
											, B.PROD_CODE
											, B.PROD_SEQ
											, B.PROC_STAT_CD
											, O.ORD_NM
											, O.ORD_EMAIL
									    FROM
											CHG_RTN_PROC_INFO A, CHG_PROD_INFO B, ORD_INFO O
									    WHERE
											    A.CHG_CD = B.CHG_CD
											AND A.ORD_CD = O.ORD_CD
											AND TO_CHAR(A.REGIST_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
											AND B.PROC_STAT_CD IN ('31', '32', '33')
									) C, ORD_PROD_INFO D , PROD E, MBER_INFO F, PROD_IMG G
								WHERE
									    C.ORD_CD = D.ORD_CD
									AND C.PROD_CODE = D.PROD_CODE
									AND C.PROD_CODE = E.PROD_CODE
									AND E.MBER_SEQ = F.MBER_SEQ
									AND C.PROD_CODE = G.PROD_CODE(+)
									AND D.PROD_TYPE_CD = '1'
									AND G.PROD_IMG_GB_CD(+) = '11'
									<include refid="SharChgSearch" />
								GROUP BY C.CHG_CD , C.ORD_CD, C.CHG_REASON_CD, C.CHG_REASON
							) TA
						WHERE
							TA.NO BETWEEN #{START_ROW} AND #{END_ROW}
				        ORDER BY TA.CHG_CD DESC
     				) TB , CHG_PROD_INFO TC
     			WHERE
      				    TB.CHG_CD = TC.CHG_CD
      				AND TB.ORD_CD = TC.ORD_CD
			) TD, ORD_PROD_INFO TE, PROD TF, MBER_INFO TG, PROD_IMG TH, ORD_INFO TI
		WHERE
			    TD.ORD_CD = TI.ORD_CD
			AND TD.ORD_CD = TE.ORD_CD
			AND TD.PROD_CODE = TE.PROD_CODE
			AND TD.PROD_CODE = TF.PROD_CODE
			AND TF.MBER_SEQ = TG.MBER_SEQ
			AND TD.PROD_CODE = TH.PROD_CODE(+)
			AND TH.PROD_IMG_GB_CD(+) = '11'
	</select>
	
	<!-- 반품, 교환 상품 정보리스트 -->
	<select id="selectOrderDetailProductList" resultType="hashmap">
    	SELECT
			  A.ORD_CD
			, (SELECT TOT_ORD_QTY FROM ORD_INFO WHERE ORD_CD = A.ORD_CD) AS TOT_ORD_QTY
      		, (SELECT CASE WHEN TO_CHAR(SYSDATE,'YYYYMM') = TO_CHAR(REGIST_DT,'YYYYMM') THEN 'Y' ELSE 'N' END AS PHONE_CANCEL_YN FROM ORD_INFO WHERE ORD_CD = A.ORD_CD) AS PHONE_CANCEL_YN 
			, A.CHG_CD
			, TO_CHAR(A.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
			, A.CHG_REASON_CD
			, A.CHG_REASON
			, B.PROD_CODE
			, B.PROD_SEQ
			, B.PROC_STAT_CD
			, D.MBER_EMAIL
			, D.MBER_NM
			, C.PROD_NM
			, C.DLV_WAY_CD
			, C.DLV_CMP_CD AS ORGIN_DLV_CMP_CD
			, (SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD' AND COM_CD = C.DLV_CMP_CD) AS ORGIN_DLV_CMP_CD_NAME
			, D.MBER_GB_CD
			, F.PROD_ORD_AMT
			, F.PROD_PRCE
		    , F.ORD_QTY
		    , NVL(F.CPN_USE_AMT,0) AS CPN_USE_AMT
			, NVL(F.PROD_CPN_CD,'NO') AS PROD_CPN_CD
      		, NVL(F.DLV_GRP_CODE,'NO') AS DLV_GRP_CODE
      		, (SELECT NVL(POINT_USE_AMT,0) AS POINT_USE_AMT FROM ORD_INFO WHERE ORD_CD = A.ORD_CD) AS POINT_USE_AMT
      		, (SELECT DLV_CMP_CD FROM CHG_INVC_INFO WHERE ORD_CD = A.ORD_CD AND CHG_CD = A.CHG_CD AND PROD_CODE = B.PROD_CODE AND PROD_SEQ = B.PROD_SEQ) AS DLV_CMP_CD
      		, (SELECT INVC_NO FROM CHG_INVC_INFO WHERE ORD_CD = A.ORD_CD AND CHG_CD = A.CHG_CD AND PROD_CODE = B.PROD_CODE AND PROD_SEQ = B.PROD_SEQ) AS INVC_NO
      		, (SELECT TO_CHAR(DLV_END_DT,'YYYY-MM-DD HH24:MI') FROM CHG_INVC_INFO WHERE ORD_CD = A.ORD_CD AND CHG_CD = A.CHG_CD AND PROD_CODE = B.PROD_CODE AND PROD_SEQ = B.PROD_SEQ) AS R_DLV_END_DT
		FROM
      		CHG_RTN_PROC_INFO A, CHG_PROD_INFO B, PROD C, MBER_INFO D, ORD_PROD_INFO F
		WHERE
			    A.CHG_CD = B.CHG_CD
			AND B.PROD_CODE = C.PROD_CODE
			AND C.MBER_SEQ = D.MBER_SEQ
			AND A.ORD_CD = F.ORD_CD
			AND B.PROD_CODE = F.PROD_CODE
			AND B.PROD_SEQ = F.PROD_SEQ
			AND A.CHG_GB_CD = #{CHG_GB_CD}
			AND A.ORD_CD = #{ORD_CD}
			AND A.CHG_CD = #{CHG_CD}
	</select>
	
	<!-- 판매 교환 카운트 -->
	<select id="selectListExcOrdCnt" resultType="Integer">
		SELECT
			  COUNT(*) AS CT
		FROM
			(
				SELECT
					  C.CHG_CD
          			, C.ORD_CD
          			, ROW_NUMBER() OVER(ORDER BY C.CHG_CD DESC) AS NO
				FROM
					(
					    SELECT
							  A.CHG_CD
							, A.ORD_CD
							, TO_CHAR(A.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
							, A.CHG_REASON_CD
							, A.CHG_REASON
							, B.PROD_CODE
							, B.PROD_SEQ
							, B.PROC_STAT_CD
							, O.ORD_NM
							, O.ORD_EMAIL
					    FROM
							CHG_RTN_PROC_INFO A, CHG_PROD_INFO B, ORD_INFO O
					    WHERE
							    A.CHG_CD = B.CHG_CD
							AND A.ORD_CD = O.ORD_CD
							AND TO_CHAR(A.REGIST_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
							AND B.PROC_STAT_CD IN (41, 42, 43)
					) C, ORD_PROD_INFO D , PROD E, MBER_INFO F, PROD_IMG G
				WHERE
					    C.ORD_CD = D.ORD_CD
					AND C.PROD_CODE = D.PROD_CODE
					AND C.PROD_CODE = E.PROD_CODE
					AND E.MBER_SEQ = F.MBER_SEQ
					AND C.PROD_CODE = G.PROD_CODE(+)
					AND D.PROD_TYPE_CD = '1'
					AND G.PROD_IMG_GB_CD(+) = '11'
					<include refid="SharChgSearch" />
				GROUP BY C.CHG_CD , C.ORD_CD
			) TA
	</select>
	
	<!-- 판매 교환신청 그룹 리스트 -->
	<select id="selectListSaleExcGroup" resultType="hashmap">
		SELECT
			  TA.*
		FROM
			(
				SELECT
					  C.CHG_CD
          			, C.ORD_CD
          			, ROW_NUMBER() OVER(ORDER BY C.CHG_CD DESC) AS NO
				FROM
					(
					    SELECT
							  A.CHG_CD
							, A.ORD_CD
							, TO_CHAR(A.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
							, A.CHG_REASON_CD
							, A.CHG_REASON
							, B.PROD_CODE
							, B.PROD_SEQ
							, B.PROC_STAT_CD
							, O.ORD_NM
							, O.ORD_EMAIL
					    FROM
							CHG_RTN_PROC_INFO A, CHG_PROD_INFO B, ORD_INFO O
					    WHERE
							    A.CHG_CD = B.CHG_CD
							AND A.ORD_CD = O.ORD_CD
							AND TO_CHAR(A.REGIST_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
							AND B.PROC_STAT_CD IN (41, 42, 43)
					) C, ORD_PROD_INFO D , PROD E, MBER_INFO F, PROD_IMG G
				WHERE
					    C.ORD_CD = D.ORD_CD
					AND C.PROD_CODE = D.PROD_CODE
					AND C.PROD_CODE = E.PROD_CODE
					AND E.MBER_SEQ = F.MBER_SEQ
					AND C.PROD_CODE = G.PROD_CODE(+)
					AND D.PROD_TYPE_CD = '1'
					AND G.PROD_IMG_GB_CD(+) = '11'
					<include refid="SharChgSearch" />
				GROUP BY C.CHG_CD , C.ORD_CD
			) TA
		WHERE
			TA.NO BETWEEN #{START_ROW} AND #{END_ROW}
        ORDER BY TA.CHG_CD DESC
	</select>
	
	<!-- 판매 교환신청 그룹 상세 리스트 -->
	<select id="selectListSaleExcGroupList" resultType="hashmap">
		SELECT
			  TD.*
			, TO_CHAR(TE.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REGIST_DT
			, TI.ORD_NM
			, TI.ORD_EMAIL
			, TG.MBER_GB_CD AS SELLER_TYPE
			, TG.MBER_NM AS SELLER_NAME
			, TG.MBER_EMAIL
			, TE.PROC_STAT_CD
			, TF.PROD_NM
			, TH.PROD_IMG_URL
		FROM
  			(
    			SELECT
					  TB.ORD_CD
					, TB.CHG_CD
					, TB.CHG_REASON_CD
					, TB.CHG_REASON
					, TC.PROD_CODE
					, TO_CHAR(TC.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
    			FROM
      				(
						SELECT
							  TA.*
						FROM
							(
								SELECT
									  C.CHG_CD
				          			, C.ORD_CD
				          			, C.CHG_REASON_CD
				          			, C.CHG_REASON
				          			, ROW_NUMBER() OVER(ORDER BY C.CHG_CD DESC) AS NO
								FROM
									(
									    SELECT
											  A.CHG_CD
											, A.ORD_CD
											, TO_CHAR(A.REGIST_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
											, A.CHG_REASON_CD
											, A.CHG_REASON
											, B.PROD_CODE
											, B.PROD_SEQ
											, B.PROC_STAT_CD
											, O.ORD_NM
											, O.ORD_EMAIL
									    FROM
											CHG_RTN_PROC_INFO A, CHG_PROD_INFO B, ORD_INFO O
									    WHERE
											    A.CHG_CD = B.CHG_CD
											AND A.ORD_CD = O.ORD_CD
											AND TO_CHAR(A.REGIST_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
											AND B.PROC_STAT_CD IN (41, 42, 43)
									) C, ORD_PROD_INFO D , PROD E, MBER_INFO F, PROD_IMG G
								WHERE
									    C.ORD_CD = D.ORD_CD
									AND C.PROD_CODE = D.PROD_CODE
									AND C.PROD_CODE = E.PROD_CODE
									AND E.MBER_SEQ = F.MBER_SEQ
									AND C.PROD_CODE = G.PROD_CODE(+)
									AND D.PROD_TYPE_CD = '1'
									AND G.PROD_IMG_GB_CD(+) = '11'
									<include refid="SharChgSearch" />
								GROUP BY C.CHG_CD , C.ORD_CD, C.CHG_REASON_CD, C.CHG_REASON
							) TA
						WHERE
							TA.NO BETWEEN #{START_ROW} AND #{END_ROW}
				        ORDER BY TA.CHG_CD DESC
     				) TB , CHG_PROD_INFO TC
     			WHERE
      				    TB.CHG_CD = TC.CHG_CD
      				AND TB.ORD_CD = TC.ORD_CD
			) TD, ORD_PROD_INFO TE, PROD TF, MBER_INFO TG, PROD_IMG TH, ORD_INFO TI
		WHERE
			    TD.ORD_CD = TI.ORD_CD
			AND TD.ORD_CD = TE.ORD_CD
			AND TD.PROD_CODE = TE.PROD_CODE
			AND TD.PROD_CODE = TF.PROD_CODE
			AND TF.MBER_SEQ = TG.MBER_SEQ
			AND TD.PROD_CODE = TH.PROD_CODE(+)
			AND TH.PROD_IMG_GB_CD(+) = '11'
	</select>
	
	<!-- 취소 카운트 -->
	<select id="selectListCancelOrderCnt" parameterType="hashmap" resultType="int">
		SELECT
			  COUNT(*) AS CT
		FROM
			(
				SELECT
					  A.ORD_CD 
					, TO_CHAR(C.CANC_DT, 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
					, A.ORD_REG_DATE
					, A.ORD_NM
					, A.ORD_EMAIL
				FROM
					ORD_INFO A, ORD_PROD_INFO B, ORD_CANC_INFO C, PROD D, MBER_INFO E, PROD_IMG F
				WHERE
					    A.ORD_CD = B.ORD_CD
					AND B.CANC_CD = C.CANC_CD
					AND B.PROD_CODE = D.PROD_CODE
					AND D.MBER_SEQ = E.MBER_SEQ
					AND B.PROD_CODE = F.PROD_CODE(+)
					AND B.PROD_TYPE_CD = '1'
					AND B.PROC_STAT_CD = '50'
					AND F.PROD_IMG_GB_CD(+) = '11'
					AND TO_CHAR(C.CANC_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
					<include refid="CancelSearch" />
				GROUP BY A.ORD_CD , TO_CHAR(C.CANC_DT, 'YYYY-MM-DD HH24:MI'), A.ORD_REG_DATE, A.ORD_NM, A.ORD_EMAIL
			) TA
	</select>
	
	<!-- 취소 그룹 리스트 -->
	<select id="sselectListCancelOrderGroup" resultType="hashmap">
		SELECT
			  TA.ORD_CD
			, TA.REQUEST_DT
			, TO_CHAR(TA.ORD_REG_DATE, 'YYYY-MM-DD HH24:MI') AS ORDER_DT
			, TA.ORD_NM
			, TA.ORD_EMAIL
			, NO
		FROM
			(
				SELECT
					  A.ORD_CD 
					, TO_CHAR(C.CANC_DT, 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
					, A.ORD_REG_DATE
					, A.ORD_NM
					, A.ORD_EMAIL
					, ROW_NUMBER() OVER(ORDER BY TO_CHAR(C.CANC_DT, 'YYYY-MM-DD HH24:MI') DESC) AS NO
				FROM
					ORD_INFO A, ORD_PROD_INFO B, ORD_CANC_INFO C, PROD D, MBER_INFO E, PROD_IMG F
				WHERE
					    A.ORD_CD = B.ORD_CD
					AND B.CANC_CD = C.CANC_CD
					AND B.PROD_CODE = D.PROD_CODE
					AND D.MBER_SEQ = E.MBER_SEQ
					AND B.PROD_CODE = F.PROD_CODE(+)
					AND B.PROD_TYPE_CD = '1'
					AND B.PROC_STAT_CD = '50'
					AND F.PROD_IMG_GB_CD(+) = '11'
					AND TO_CHAR(C.CANC_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
					<include refid="CancelSearch" />
				GROUP BY A.ORD_CD , TO_CHAR(C.CANC_DT, 'YYYY-MM-DD HH24:MI'), A.ORD_REG_DATE, A.ORD_NM, A.ORD_EMAIL
			) TA
		WHERE
			TA.NO BETWEEN #{START_ROW} AND #{END_ROW}
        ORDER BY TA.REQUEST_DT DESC
	</select>
	
	<!-- 취소 그룹 상세 리스트 -->
	<select id="selectListCancelOrderGroupList" resultType="hashmap">
		SELECT
			  TB.ORD_CD
			, TB.REQUEST_DT
			, TO_CHAR(TB.ORD_REG_DATE, 'YYYY-MM-DD HH24:MI') AS ORDER_DT
			, TB.ORD_NM
			, TB.ORD_EMAIL
			, TE.MBER_GB_CD AS SELLER_TYPE
			, TE.MBER_NM AS SELLER_NAME
			, TE.MBER_EMAIL
			, TD.PROD_CODE
			, TD.PROD_NM
			, TF.PROD_IMG_URL
			, TG.CANC_REASON_CD
			, TG.CANC_REASON
		FROM
			(
				SELECT
					  TA.*
				FROM
					(
						SELECT
							  A.ORD_CD 
							, TO_CHAR(C.CANC_DT, 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
							, A.ORD_REG_DATE
							, A.ORD_NM
							, A.ORD_EMAIL
							, ROW_NUMBER() OVER(ORDER BY TO_CHAR(C.CANC_DT, 'YYYY-MM-DD HH24:MI') DESC) AS NO
						FROM
							ORD_INFO A, ORD_PROD_INFO B, ORD_CANC_INFO C, PROD D, MBER_INFO E, PROD_IMG F
						WHERE
							    A.ORD_CD = B.ORD_CD
							AND B.CANC_CD = C.CANC_CD
							AND B.PROD_CODE = D.PROD_CODE
							AND D.MBER_SEQ = E.MBER_SEQ
							AND B.PROD_CODE = F.PROD_CODE(+)
							AND B.PROD_TYPE_CD = '1'
							AND B.PROC_STAT_CD = '50'
							AND F.PROD_IMG_GB_CD(+) = '11'
							AND TO_CHAR(C.CANC_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
							<include refid="CancelSearch" />
						GROUP BY A.ORD_CD , TO_CHAR(C.CANC_DT, 'YYYY-MM-DD HH24:MI'), A.ORD_REG_DATE, A.ORD_NM, A.ORD_EMAIL
					) TA
				WHERE
					TA.NO BETWEEN #{START_ROW} AND #{END_ROW}
		        ORDER BY TA.REQUEST_DT DESC
			) TB, ORD_PROD_INFO TC, PROD TD, MBER_INFO TE, PROD_IMG TF, ORD_CANC_INFO TG         
		WHERE
			    TB.ORD_CD = TC.ORD_CD
			AND TC.PROD_CODE = TD.PROD_CODE
			AND TD.MBER_SEQ = TE.MBER_SEQ
			AND TC.PROD_CODE = TF.PROD_CODE(+)
			AND TC.CANC_CD = TG.CANC_CD
			AND TF.PROD_IMG_GB_CD(+) = '11'
	</select>
	
	<!-- 취소 상품 리스트 -->
	<select id="selectOrderDetailCancelProductList" resultType="hashmap">
		SELECT
			  A.ORD_CD 
			, TO_CHAR(B.REGIST_DT, 'YYYY-MM-DD HH24:MI') AS REGIST_DT
			, E.MBER_GB_CD AS SELLER_TYPE
			, E.MBER_NM AS SELLER_NAME
			, E.MBER_EMAIL AS SELLER_EMAIL
			, D.PROD_NM
			, C.CANC_REASON_CD
			, C.CANC_REASON
			, (B.PROD_PRCE * B.ORD_QTY) + B.DLV_PRCE - NVL(B.CPN_USE_AMT,0) AS ORDER_MONEY
			, A.POINT_USE_AMT
			, B.PROC_STAT_CD
			, TO_CHAR(B.UPDT_DT, 'YYYY-MM-DD HH24:MI') AS UPDT_DT
			, B.PROD_CODE
            , B.PROD_SEQ
		FROM
			ORD_INFO A, ORD_PROD_INFO B, ORD_CANC_INFO C, PROD D, MBER_INFO E
		WHERE
			    A.ORD_CD = B.ORD_CD
			AND B.CANC_CD = C.CANC_CD
			AND B.PROD_CODE = D.PROD_CODE
			AND D.MBER_SEQ = E.MBER_SEQ
			AND B.PROD_TYPE_CD = '1'
			AND B.PROC_STAT_CD = '50'
			AND A.ORD_CD = #{ORD_CD}
	</select>
	
	<!-- 휴대폰 결제취소 : 환불계좌 RFND_CD 생성  -->
	<select id="createRfndCode" resultType="String">
		SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI')||LPAD(SEQ_ORD_RFND_PROC_INFO.NEXTVAL, 4, 0) AS RFND_CD FROM DUAL
	</select>
	
	<!-- 휴대폰 결제취소 : 환불계좌 입력 - ORD_RFND_PROC_INFO -->
	<insert id="insertRefund" parameterType="hashmap">
		INSERT INTO ORD_RFND_PROC_INFO
			(
				  RFND_CD 					
				, ORD_CD
				<if test="CHG_CD != null and CHG_CD != ''">
					, RTN_CD
				</if>
				, REGIST_DT						
				, BANK_ACNT_NO				
				, ACNT_NM						
				, BANK_GB_CD
				, RFND_AMT
			)
		VALUES
			(
				  #{RFND_CD}
				, #{ORD_CD}
				<if test="CHG_CD != null and CHG_CD != ''">
					, #{CHG_CD}
				</if>
				, SYSDATE
				, #{BANK_ACNT_NO}
				, #{ACNT_NM}
				, #{BANK_GB_CD}
				, #{RFND_AMT}
			)		
	</insert>
	
	<!-- 휴대폰 결제취소 : 환불계좌 입력 - ORD_RFND_PROD_INFO -->
	<insert id="insertRefundProduct" parameterType="hashmap">
		INSERT INTO ORD_RFND_PROD_INFO
			(
				  RFND_CD 					
				, PROD_CODE
			)
		VALUES
			(
				  #{RFND_CD}
				, #{PROD_CODE}
			)		
	</insert>
	
	<!-- 판매 주문 조회 excel 다운로드 -->
	<select id="selectListSaleOrdExcel" parameterType="hashmap" resultType="hashmap">
		SELECT
			  R.ORD_CD
			, R.ORD_REG_DATE
			, R.ORD_NM || '( ' || R.ORD_EMAIL || ' )' AS ORDER_INFO
			, R.ORD_HP
			, DECODE(R.SELLER_TYPE,0,'[개인]',1,'[사업자]') || R.SELLER_NAME || '( ' || R.SELLER_ID || ' )' AS SELLER_INFO
			, R.PROD_CODE
			, U.COM_CD_NM AS PROC_STAT_CD_NAME
			, R.PROD_NM
			, R.OPT_NM
			, CASE WHEN R.OP_GB_CD = '20' THEN 0 ELSE NVL(R.PROD_PRCE,0) END AS PROD_PRICE
			, R.OPT_PRCE
			, CASE WHEN R.OP_GB_CD IS NULL THEN R.ORD_QTY ELSE R.OPT_QTY END AS ORD_QTY
			, CASE
			  WHEN R.OP_GB_CD = '10' THEN (NVL(R.PROD_PRCE,0) + NVL(R.OPT_PRCE,0)) * NVL(R.OPT_QTY,0)
			  WHEN R.OP_GB_CD = '20' THEN NVL(R.OPT_PRCE,0) * NVL(R.OPT_QTY,0)
			  ELSE NVL(R.PROD_PRCE,0)
			  END AS PROD_PRCE
			, R.DLV_PRCE
			, R.CPN_USE_AMT
			, NVL(R.PROD_PRCE,0) * NVL(R.OPT_QTY,0) - NVL(R.CPN_USE_AMT,0) AS ORDER_PRICE
			, R.POINT_USE_AMT
			, R.REAL_SELT_AMT
			, CASE WHEN V.COM_CD_NM IS NULL THEN '0원 결제' ELSE V.COM_CD_NM END AS SELT_GB_NAME
			, S.CARD_COMP_NM
			, R.RCV_NM
			, R.RCV_TEL
			, R.ZIP_CD
			, R.SECU_NO
			, R.JUSO_JIBEN
			, R.JUSO_DORO
			, R.DLV_MSG
			, T.COM_CD_NM AS DLV_CMP_CD
			, T.INVC_NO
			, TO_CHAR(T.REGIST_DT , 'YYYY-MM-DD HH24:MI')	AS DLV_REGIST_DT
			, TO_CHAR(T.DLV_END_DT , 'YYYY-MM-DD HH24:MI')	AS DLV_END_DT
        
		FROM
	        (
				SELECT
					  P.*
					, (SELECT REPLACE(LTRIM(SYS_CONNECT_BY_PATH (PO.OPT_NM, ' // '), ' // '), ' // ', ' / ') AS OPT_NM
					     FROM PROD_OP PO, PROD_OP_INFO POI
					     WHERE PO.OPT_GRP_CD = Q.OPT_GRP_CD
					          AND PO.OPT_GRP_CD = POI.OPT_GRP_CD
					          AND PO.OPT_USE_YN = 'Y'
					          AND PO.OPT_STOCK_QTY IS NOT NULL
					          AND PO.OPT_CD = Q.OPT_CD
					     START WITH PO.PAR_OPT_CD = '0'
					     CONNECT BY PRIOR PO.OPT_CD = PO.PAR_OPT_CD
					) AS OPT_NM
					, Q.OPT_QTY
					, Q.OPT_PRCE
					, Q.OP_GB_CD
				FROM
	            	(
						SELECT
							  A.ORD_CD
							, A.ORD_REG_DATE
							, A.ORD_NM
							, A.ORD_HP
							, A.ORD_EMAIL
							, A.ORD_AMT
							, A.POINT_USE_AMT
							, A.REAL_SELT_AMT
							, A.SELT_GB_CD
							, A.CREDIT_APPR_NO
							, B.PROD_CODE
							, B.PROD_SEQ
							, B.PROC_STAT_CD
							, B.PROD_PRCE
							, B.ORD_QTY
							, B.DLV_PRCE
							, B.CPN_USE_AMT
							, C.PROD_NM
							, C.MBER_SEQ AS SELLER_SEQ
							, D.MBER_EMAIL AS SELLER_ID
							, D.MBER_NM AS SELLER_NAME
							, D.MBER_GB_CD AS SELLER_TYPE
							, E.RCV_NM
							, E.RCV_TEL
							, E.SECU_NO
							, E.ZIP_CD
							, E.JUSO_JIBEN || ' ' || E.JUSO_DTL AS JUSO_JIBEN
							, E.JUSO_DORO || ' ' || E.JUSO_DTL AS JUSO_DORO
							, E.DLV_MSG
						FROM
							(
								SELECT
									  ORD_CD
									, TO_CHAR(ORD_REG_DATE , 'YYYY-MM-DD HH24:MI')	AS ORD_REG_DATE
									, ORD_NM
									, ORD_HP
									, ORD_EMAIL
									, ORD_AMT
									, POINT_USE_AMT
									, REAL_SELT_AMT
									, SELT_GB_CD
									, CREDIT_APPR_NO
								FROM
						  			ORD_INFO
						  		WHERE
						  			TO_CHAR(ORD_REG_DATE,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
						  	) A , ORD_PROD_INFO B , PROD C, MBER_INFO D, ORD_DLV_INFO E
						WHERE
							    A.ORD_CD = B.ORD_CD
							AND B.PROD_CODE = C.PROD_CODE
							AND C.MBER_SEQ = D.MBER_SEQ
	                  		AND A.ORD_CD = E.ORD_CD
							AND B.PROD_TYPE_CD = '1'
							<include refid="WhereOrdSearch"/>
	            	) P 
	            	LEFT OUTER JOIN
		            (
						SELECT
							  T1.ORD_CD
							, T1.PROD_CODE
							, T1.PROD_SEQ
							, T2.OPT_CD
							, T2.OPT_QTY
							, T3.OPT_GRP_CD
							, T3.OPT_NM
							, T3.OPT_PRCE
							, T4.PROD_NM
							, T4.OPT_PROD_YN
							, T4.OPT_PROD_EXT_YN
							, T5.OP_GB_CD
		              	FROM
		                	ORD_PROD_INFO T1 , ORD_PROD_OPT_INFO T2, PROD_OP T3 , PROD T4, PROD_OP_INFO T5
		              	WHERE
			                    T1.ORD_CD = T2.ORD_CD
			                AND T1.PROD_CODE = T2.PROD_CODE
			                AND T1.PROD_SEQ = T2.PROD_SEQ
			                AND T2.OPT_CD = T3.OPT_CD
			                AND T1.PROD_CODE = T4.PROD_CODE
			                AND T3.OPT_GRP_CD = T5.OPT_GRP_CD
		            ) Q
	            ON P.ORD_CD = Q.ORD_CD AND P.PROD_CODE = Q.PROD_CODE AND P.PROD_SEQ = Q.PROD_SEQ
	        ) R
        LEFT OUTER JOIN  (SELECT ORD_CD, CARD_COMP_NM, CARD_NO, SETL_NM, CARRIER, DSTADDR FROM ORD_SETL_INFO WHERE TRD_GB_CD = '10') S ON R.ORD_CD = S.ORD_CD
        LEFT OUTER JOIN (SELECT TA.ORD_CD, TB.COM_CD_NM, TA.INVC_NO, TA.REGIST_DT, TA.DLV_END_DT FROM INVC_INFO TA , (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD') TB WHERE TA.DLV_CMP_CD = TB.COM_CD) T ON R.ORD_CD = T.ORD_CD
        LEFT JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'PROC_STAT_CD') U ON R.PROC_STAT_CD = U.COM_CD
        LEFT OUTER JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'SELT_GB_CD') V ON R.SELT_GB_CD = V.COM_CD
        ORDER BY R.ORD_REG_DATE DESC
	</select>
	
	<!-- 판매 교환 excel 다운로드 -->
	<select id="selectListSaleOrdExcExcel" parameterType="hashmap" resultType="hashmap">		
		SELECT
			  R.REQUEST_DT
        	, CASE WHEN R.CHG_REASON_CD IS NULL THEN R.CHG_REASON ELSE '[' || W.COM_CD_NM || '] ' || R.CHG_REASON END AS CHG_REASON
			, R.ORD_CD
			, R.ORD_REG_DATE
			, R.ORD_NM || '( ' || R.ORD_EMAIL || ' )' AS ORDER_INFO
			, R.ORD_HP
			, DECODE(R.SELLER_TYPE,0,'[개인]',1,'[사업자]') || R.SELLER_NAME || '( ' || R.SELLER_ID || ' )' AS SELLER_INFO
			, R.PROD_CODE
			, U.COM_CD_NM AS PROC_STAT_CD_NAME
			, R.PROD_NM
			, R.OPT_NM
			, CASE WHEN R.OP_GB_CD = '20' THEN 0 ELSE NVL(R.PROD_PRCE,0) END AS PROD_PRICE
			, R.OPT_PRCE
			, CASE WHEN R.OP_GB_CD IS NULL THEN R.ORD_QTY ELSE R.OPT_QTY END AS ORD_QTY
			, CASE
			  WHEN R.OP_GB_CD = '10' THEN (NVL(R.PROD_PRCE,0) + NVL(R.OPT_PRCE,0)) * NVL(R.OPT_QTY,0)
			  WHEN R.OP_GB_CD = '20' THEN NVL(R.OPT_PRCE,0) * NVL(R.OPT_QTY,0)
			  ELSE NVL(R.PROD_PRCE,0)
			  END AS PROD_PRCE
			, R.DLV_PRCE
			, R.CPN_USE_AMT
			, NVL(R.PROD_PRCE,0) * NVL(R.OPT_QTY,0) - NVL(R.CPN_USE_AMT,0) AS ORDER_PRICE
			, R.POINT_USE_AMT
			, R.REAL_SELT_AMT
			, CASE WHEN V.COM_CD_NM IS NULL THEN '0원 결제' ELSE V.COM_CD_NM END AS SELT_GB_NAME
			, S.CARD_COMP_NM
			, R.RCV_NM
			, R.RCV_TEL
			, R.ZIP_CD
			, R.JUSO_JIBEN
			, R.JUSO_DORO
			, R.DLV_MSG
			, T.COM_CD_NM AS DLV_CMP_CD
			, T.INVC_NO
			, TO_CHAR(T.REGIST_DT , 'YYYY-MM-DD HH24:MI')	AS DLV_REGIST_DT
			, TO_CHAR(T.DLV_END_DT , 'YYYY-MM-DD HH24:MI')	AS DLV_END_DT
        
		FROM
	        (
				SELECT
					  P.*
					, (SELECT REPLACE(LTRIM(SYS_CONNECT_BY_PATH (PO.OPT_NM, ' // '), ' // '), ' // ', ' / ') AS OPT_NM
					     FROM PROD_OP PO, PROD_OP_INFO POI
					     WHERE PO.OPT_GRP_CD = Q.OPT_GRP_CD
					          AND PO.OPT_GRP_CD = POI.OPT_GRP_CD
					          AND PO.OPT_USE_YN = 'Y'
					          AND PO.OPT_STOCK_QTY IS NOT NULL
					          AND PO.OPT_CD = Q.OPT_CD
					     START WITH PO.PAR_OPT_CD = '0'
					     CONNECT BY PRIOR PO.OPT_CD = PO.PAR_OPT_CD
					) AS OPT_NM
					, Q.OPT_QTY
					, Q.OPT_PRCE
					, Q.OP_GB_CD
				FROM
	            	(
						SELECT
							  A.ORD_CD
							, A.ORD_REG_DATE
							, A.ORD_NM
							, A.ORD_HP
							, A.ORD_EMAIL
							, A.ORD_AMT
							, A.POINT_USE_AMT
							, A.REAL_SELT_AMT
							, A.SELT_GB_CD
							, A.CREDIT_APPR_NO
							, B.PROD_CODE
							, B.PROD_SEQ
							, B.PROC_STAT_CD
							, B.PROD_PRCE
							, B.ORD_QTY
							, B.DLV_PRCE
							, B.CPN_USE_AMT
							, C.PROD_NM
							, C.MBER_SEQ AS SELLER_SEQ
							, D.MBER_EMAIL AS SELLER_ID
							, D.MBER_NM AS SELLER_NAME
							, D.MBER_GB_CD AS SELLER_TYPE
							, F.RCV_NM
							, F.HP AS RCV_TEL
							, F.ZIP_CD
							, F.JUSO_JIBEN || ' ' || F.JUSO_DTL AS JUSO_JIBEN
							, F.JUSO_DORO || ' ' || F.JUSO_DTL AS JUSO_DORO
							, F.MEMO AS DLV_MSG
							, F.REQUEST_DT
                  			, F.CHG_REASON_CD
                  			, F.CHG_REASON
						FROM
							(
								SELECT
									  CRPI.ORD_CD
									, TO_CHAR(CRPI.CHG_REG_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
									, CRPI.CHG_REASON_CD
									, CRPI.CHG_REASON
									, CRPI.RCV_NM
									, CRPI.HP
									, CRPI.ZIP_CD
									, CRPI.JUSO_JIBEN
									, CRPI.JUSO_DORO
									, CRPI.JUSO_DTL
									, CRPI.MEMO
								FROM
						  			CHG_RTN_PROC_INFO CRPI , CHG_PROD_INFO CPI
						  		WHERE
                        			    CRPI.CHG_CD = CPI.CHG_CD
									AND TO_CHAR(CRPI.CHG_REG_DT,'YYYYMMDD') BETWEEN  #{S_START_DATE} AND  #{S_END_DATE}
                        			AND CPI.PROC_STAT_CD IN (41, 42, 43)
						  	) F, ORD_INFO A , ORD_PROD_INFO B , PROD C, MBER_INFO D
						WHERE
							    F.ORD_CD = A.ORD_CD
							AND A.ORD_CD = B.ORD_CD
							AND B.PROD_CODE = C.PROD_CODE
							AND C.MBER_SEQ = D.MBER_SEQ
							AND B.PROD_TYPE_CD = '1'
							<include refid="SharChgExcelSearch" />
	            	) P 
	            	LEFT OUTER JOIN
		            (
						SELECT
							  T1.ORD_CD
							, T1.PROD_CODE
							, T1.PROD_SEQ
							, T2.OPT_CD
							, T2.OPT_QTY
							, T3.OPT_GRP_CD
							, T3.OPT_NM
							, T3.OPT_PRCE
							, T4.PROD_NM
							, T4.OPT_PROD_YN
							, T4.OPT_PROD_EXT_YN
							, T5.OP_GB_CD
		              	FROM
		                	ORD_PROD_INFO T1 , ORD_PROD_OPT_INFO T2, PROD_OP T3 , PROD T4, PROD_OP_INFO T5
		              	WHERE
			                    T1.ORD_CD = T2.ORD_CD
			                AND T1.PROD_CODE = T2.PROD_CODE
			                AND T1.PROD_SEQ = T2.PROD_SEQ
			                AND T2.OPT_CD = T3.OPT_CD
			                AND T1.PROD_CODE = T4.PROD_CODE
			                AND T3.OPT_GRP_CD = T5.OPT_GRP_CD
		            ) Q
	            ON P.ORD_CD = Q.ORD_CD AND P.PROD_CODE = Q.PROD_CODE AND P.PROD_SEQ = Q.PROD_SEQ
	        ) R
        LEFT OUTER JOIN  (SELECT ORD_CD, CARD_COMP_NM, CARD_NO, SETL_NM, CARRIER, DSTADDR FROM ORD_SETL_INFO WHERE TRD_GB_CD = '10') S ON R.ORD_CD = S.ORD_CD
        LEFT OUTER JOIN (SELECT TA.ORD_CD, TB.COM_CD_NM, TA.INVC_NO, TA.REGIST_DT, TA.DLV_END_DT FROM CHG_INVC_INFO TA , (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD') TB WHERE TA.DLV_CMP_CD = TB.COM_CD) T ON R.ORD_CD = T.ORD_CD
        LEFT JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'PROC_STAT_CD') U ON R.PROC_STAT_CD = U.COM_CD
        LEFT OUTER JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'SELT_GB_CD') V ON R.SELT_GB_CD = V.COM_CD
        LEFT OUTER JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'CHG_REASON_CD') W ON R.CHG_REASON_CD = W.COM_CD
        ORDER BY R.REQUEST_DT DESC
	</select>
	
	<!-- 판매 반품 excel 다운로드 -->
	<select id="selectListSaleOrdTakeBackExcel" parameterType="hashmap" resultType="hashmap">
		SELECT
			  R.REQUEST_DT
        	, CASE WHEN R.CHG_REASON_CD IS NULL THEN R.CHG_REASON ELSE '[' || W.COM_CD_NM || '] ' || R.CHG_REASON END AS CHG_REASON
			, R.ORD_CD
			, R.ORD_REG_DATE
			, R.ORD_NM || '( ' || R.ORD_EMAIL || ' )' AS ORDER_INFO
			, R.ORD_HP
			, DECODE(R.SELLER_TYPE,0,'[개인]',1,'[사업자]') || R.SELLER_NAME || '( ' || R.SELLER_ID || ' )' AS SELLER_INFO
			, R.PROD_CODE
			, U.COM_CD_NM AS PROC_STAT_CD_NAME
			, R.PROD_NM
			, R.OPT_NM
			, CASE WHEN R.OP_GB_CD = '20' THEN 0 ELSE NVL(R.PROD_PRCE,0) END AS PROD_PRICE
			, R.OPT_PRCE
			, CASE WHEN R.OP_GB_CD IS NULL THEN R.ORD_QTY ELSE R.OPT_QTY END AS ORD_QTY
			, CASE
			  WHEN R.OP_GB_CD = '10' THEN (NVL(R.PROD_PRCE,0) + NVL(R.OPT_PRCE,0)) * NVL(R.OPT_QTY,0)
			  WHEN R.OP_GB_CD = '20' THEN NVL(R.OPT_PRCE,0) * NVL(R.OPT_QTY,0)
			  ELSE NVL(R.PROD_PRCE,0)
			  END AS PROD_PRCE
			, R.DLV_PRCE
			, R.CPN_USE_AMT
			, NVL(R.PROD_PRCE,0) * NVL(R.OPT_QTY,0) - NVL(R.CPN_USE_AMT,0) AS ORDER_PRICE
			, R.POINT_USE_AMT
			, R.REAL_SELT_AMT
			, CASE WHEN V.COM_CD_NM IS NULL THEN '0원 결제' ELSE V.COM_CD_NM END AS SELT_GB_NAME
			, S.CARD_COMP_NM
			, R.RCV_NM
			, R.RCV_TEL
			, R.ZIP_CD
			, R.JUSO_JIBEN
			, R.JUSO_DORO
			, R.DLV_MSG
			, T.COM_CD_NM AS DLV_CMP_CD
			, T.INVC_NO
			, TO_CHAR(T.REGIST_DT , 'YYYY-MM-DD HH24:MI')	AS DLV_REGIST_DT
			, TO_CHAR(T.DLV_END_DT , 'YYYY-MM-DD HH24:MI')	AS DLV_END_DT
        
		FROM
	        (
				SELECT
					  P.*
					, (SELECT REPLACE(LTRIM(SYS_CONNECT_BY_PATH (PO.OPT_NM, ' // '), ' // '), ' // ', ' / ') AS OPT_NM
					     FROM PROD_OP PO, PROD_OP_INFO POI
					     WHERE PO.OPT_GRP_CD = Q.OPT_GRP_CD
					          AND PO.OPT_GRP_CD = POI.OPT_GRP_CD
					          AND PO.OPT_USE_YN = 'Y'
					          AND PO.OPT_STOCK_QTY IS NOT NULL
					          AND PO.OPT_CD = Q.OPT_CD
					     START WITH PO.PAR_OPT_CD = '0'
					     CONNECT BY PRIOR PO.OPT_CD = PO.PAR_OPT_CD
					) AS OPT_NM
					, Q.OPT_QTY
					, Q.OPT_PRCE
					, Q.OP_GB_CD
				FROM
	            	(
						SELECT
							  A.ORD_CD
							, A.ORD_REG_DATE
							, A.ORD_NM
							, A.ORD_HP
							, A.ORD_EMAIL
							, A.ORD_AMT
							, A.POINT_USE_AMT
							, A.REAL_SELT_AMT
							, A.SELT_GB_CD
							, A.CREDIT_APPR_NO
							, B.PROD_CODE
							, B.PROD_SEQ
							, B.PROC_STAT_CD
							, B.PROD_PRCE
							, B.ORD_QTY
							, B.DLV_PRCE
							, B.CPN_USE_AMT
							, C.PROD_NM
							, C.MBER_SEQ AS SELLER_SEQ
							, D.MBER_EMAIL AS SELLER_ID
							, D.MBER_NM AS SELLER_NAME
							, D.MBER_GB_CD AS SELLER_TYPE
							, F.RCV_NM
							, F.HP AS RCV_TEL
							, F.ZIP_CD
							, F.JUSO_JIBEN || ' ' || F.JUSO_DTL AS JUSO_JIBEN
							, F.JUSO_DORO || ' ' || F.JUSO_DTL AS JUSO_DORO
							, F.MEMO AS DLV_MSG
							, F.REQUEST_DT
                  			, F.CHG_REASON_CD
                  			, F.CHG_REASON
						FROM
							(
								SELECT
									  CRPI.ORD_CD
									, TO_CHAR(CRPI.CHG_REG_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
									, CRPI.CHG_REASON_CD
									, CRPI.CHG_REASON
									, CRPI.RCV_NM
									, CRPI.HP
									, CRPI.ZIP_CD
									, CRPI.JUSO_JIBEN
									, CRPI.JUSO_DORO
									, CRPI.JUSO_DTL
									, CRPI.MEMO
								FROM
						  			CHG_RTN_PROC_INFO CRPI , CHG_PROD_INFO CPI
						  		WHERE
                        			    CRPI.CHG_CD = CPI.CHG_CD
									AND TO_CHAR(CRPI.CHG_REG_DT,'YYYYMMDD') BETWEEN  #{S_START_DATE} AND  #{S_END_DATE}
                        			AND CPI.PROC_STAT_CD IN (31, 32, 33)
						  	) F, ORD_INFO A , ORD_PROD_INFO B , PROD C, MBER_INFO D
						WHERE
							    F.ORD_CD = A.ORD_CD
							AND A.ORD_CD = B.ORD_CD
							AND B.PROD_CODE = C.PROD_CODE
							AND C.MBER_SEQ = D.MBER_SEQ
							AND B.PROD_TYPE_CD = '1'
							<include refid="SharChgExcelSearch" />
	            	) P 
	            	LEFT OUTER JOIN
		            (
						SELECT
							  T1.ORD_CD
							, T1.PROD_CODE
							, T1.PROD_SEQ
							, T2.OPT_CD
							, T2.OPT_QTY
							, T3.OPT_GRP_CD
							, T3.OPT_NM
							, T3.OPT_PRCE
							, T4.PROD_NM
							, T4.OPT_PROD_YN
							, T4.OPT_PROD_EXT_YN
							, T5.OP_GB_CD
		              	FROM
		                	ORD_PROD_INFO T1 , ORD_PROD_OPT_INFO T2, PROD_OP T3 , PROD T4, PROD_OP_INFO T5
		              	WHERE
			                    T1.ORD_CD = T2.ORD_CD
			                AND T1.PROD_CODE = T2.PROD_CODE
			                AND T1.PROD_SEQ = T2.PROD_SEQ
			                AND T2.OPT_CD = T3.OPT_CD
			                AND T1.PROD_CODE = T4.PROD_CODE
			                AND T3.OPT_GRP_CD = T5.OPT_GRP_CD
		            ) Q
	            ON P.ORD_CD = Q.ORD_CD AND P.PROD_CODE = Q.PROD_CODE AND P.PROD_SEQ = Q.PROD_SEQ
	        ) R
        LEFT OUTER JOIN  (SELECT ORD_CD, CARD_COMP_NM, CARD_NO, SETL_NM, CARRIER, DSTADDR FROM ORD_SETL_INFO WHERE TRD_GB_CD = '10') S ON R.ORD_CD = S.ORD_CD
        LEFT OUTER JOIN (SELECT TA.ORD_CD, TB.COM_CD_NM, TA.INVC_NO, TA.REGIST_DT, TA.DLV_END_DT FROM CHG_INVC_INFO TA , (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD') TB WHERE TA.DLV_CMP_CD = TB.COM_CD) T ON R.ORD_CD = T.ORD_CD
        LEFT JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'PROC_STAT_CD') U ON R.PROC_STAT_CD = U.COM_CD
        LEFT OUTER JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'SELT_GB_CD') V ON R.SELT_GB_CD = V.COM_CD
        LEFT OUTER JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'CHG_REASON_CD') W ON R.CHG_REASON_CD = W.COM_CD
        ORDER BY R.REQUEST_DT DESC
	</select>
	
	<!-- 판매 취소 excel 다운로드 -->
	<select id="selectListSaleOrdCancelExcel" parameterType="hashmap" resultType="hashmap">
		SELECT
			  R.REQUEST_DT
        	, CASE WHEN R.CHG_REASON_CD IS NULL THEN R.CHG_REASON ELSE '[' || W.COM_CD_NM || '] ' || R.CHG_REASON END AS CHG_REASON
			, R.ORD_CD
			, R.ORD_REG_DATE
			, R.ORD_NM || '( ' || R.ORD_EMAIL || ' )' AS ORDER_INFO
			, R.ORD_HP
			, DECODE(R.SELLER_TYPE,0,'[개인]',1,'[사업자]') || R.SELLER_NAME || '( ' || R.SELLER_ID || ' )' AS SELLER_INFO
			, R.PROD_CODE
			, U.COM_CD_NM AS PROC_STAT_CD_NAME
			, R.PROD_NM
			, R.OPT_NM
			, CASE WHEN R.OP_GB_CD = '20' THEN 0 ELSE NVL(R.PROD_PRCE,0) END AS PROD_PRICE
			, R.OPT_PRCE
			, CASE WHEN R.OP_GB_CD IS NULL THEN R.ORD_QTY ELSE R.OPT_QTY END AS ORD_QTY
			, CASE
			  WHEN R.OP_GB_CD = '10' THEN (NVL(R.PROD_PRCE,0) + NVL(R.OPT_PRCE,0)) * NVL(R.OPT_QTY,0)
			  WHEN R.OP_GB_CD = '20' THEN NVL(R.OPT_PRCE,0) * NVL(R.OPT_QTY,0)
			  ELSE NVL(R.PROD_PRCE,0)
			  END AS PROD_PRCE
			, R.DLV_PRCE
			, R.CPN_USE_AMT
			, NVL(R.PROD_PRCE,0) * NVL(R.OPT_QTY,0) - NVL(R.CPN_USE_AMT,0) AS ORDER_PRICE
			, R.POINT_USE_AMT
			, R.REAL_SELT_AMT
			, CASE WHEN V.COM_CD_NM IS NULL THEN '0원 결제' ELSE V.COM_CD_NM END AS SELT_GB_NAME
			, S.CARD_COMP_NM
			, R.RCV_NM
			, R.RCV_TEL
			, R.ZIP_CD
			, R.JUSO_JIBEN
			, R.JUSO_DORO
			, R.DLV_MSG
			, T.COM_CD_NM AS DLV_CMP_CD
			, T.INVC_NO
			, TO_CHAR(T.REGIST_DT , 'YYYY-MM-DD HH24:MI')	AS DLV_REGIST_DT
			, TO_CHAR(T.DLV_END_DT , 'YYYY-MM-DD HH24:MI')	AS DLV_END_DT
		FROM
	        (
				SELECT
					  P.*
					, (SELECT REPLACE(LTRIM(SYS_CONNECT_BY_PATH (PO.OPT_NM, ' // '), ' // '), ' // ', ' / ') AS OPT_NM
					     FROM PROD_OP PO, PROD_OP_INFO POI
					     WHERE PO.OPT_GRP_CD = Q.OPT_GRP_CD
					          AND PO.OPT_GRP_CD = POI.OPT_GRP_CD
					          AND PO.OPT_USE_YN = 'Y'
					          AND PO.OPT_STOCK_QTY IS NOT NULL
					          AND PO.OPT_CD = Q.OPT_CD
					     START WITH PO.PAR_OPT_CD = '0'
					     CONNECT BY PRIOR PO.OPT_CD = PO.PAR_OPT_CD
					) AS OPT_NM
					, Q.OPT_QTY
					, Q.OPT_PRCE
					, Q.OP_GB_CD
				FROM
	            	(
						SELECT
							  A.ORD_CD
							, A.ORD_REG_DATE
							, A.ORD_NM
							, A.ORD_HP
							, A.ORD_EMAIL
							, A.ORD_AMT
							, A.POINT_USE_AMT
							, A.REAL_SELT_AMT
							, A.SELT_GB_CD
							, A.CREDIT_APPR_NO
							, A.REQUEST_DT
							, A.CHG_REASON_CD
							, A.CHG_REASON
							, B.PROD_CODE
							, B.PROD_SEQ
							, B.PROC_STAT_CD
							, B.PROD_PRCE
							, B.ORD_QTY
							, B.DLV_PRCE
							, B.CPN_USE_AMT
							, C.PROD_NM
							, C.MBER_SEQ AS SELLER_SEQ
							, D.MBER_EMAIL AS SELLER_ID
							, D.MBER_NM AS SELLER_NAME
							, D.MBER_GB_CD AS SELLER_TYPE
							, E.RCV_NM
							, E.RCV_TEL
							, E.ZIP_CD
							, E.JUSO_JIBEN || ' ' || E.JUSO_DTL AS JUSO_JIBEN
							, E.JUSO_DORO || ' ' || E.JUSO_DTL AS JUSO_DORO
							, E.DLV_MSG
						FROM
							(
								SELECT
									  OI.ORD_CD
									, TO_CHAR(OI.ORD_REG_DATE , 'YYYY-MM-DD HH24:MI') AS ORD_REG_DATE
									, OI.ORD_NM
									, OI.ORD_HP
									, OI.ORD_EMAIL
									, OI.ORD_AMT
									, OI.POINT_USE_AMT
									, OI.REAL_SELT_AMT
									, OI.SELT_GB_CD
									, OI.CREDIT_APPR_NO
									, TO_CHAR(OCI.CANC_DT , 'YYYY-MM-DD HH24:MI') AS REQUEST_DT
									, OCI.CANC_REASON_CD AS CHG_REASON_CD
									, OCI.CANC_REASON AS CHG_REASON
								FROM
						  			ORD_INFO OI, ORD_PROD_INFO OPI, ORD_CANC_INFO OCI
						  		WHERE
						  			    OI.ORD_CD = OPI.ORD_CD
									AND OPI.CANC_CD = OCI.CANC_CD
									AND OPI.PROD_TYPE_CD = '1'
									AND OPI.PROC_STAT_CD = '50'
						  			AND TO_CHAR(OCI.CANC_DT,'YYYYMMDD') BETWEEN #{S_START_DATE} AND  #{S_END_DATE}
						  	) A , ORD_PROD_INFO B , PROD C, MBER_INFO D, ORD_DLV_INFO E
						WHERE
							    A.ORD_CD = B.ORD_CD
							AND B.PROD_CODE = C.PROD_CODE
							AND C.MBER_SEQ = D.MBER_SEQ
	                  		AND A.ORD_CD = E.ORD_CD
							<include refid="CancelSearchExcel"/>
	            	) P 
	            	LEFT OUTER JOIN
		            (
						SELECT
							  T1.ORD_CD
							, T1.PROD_CODE
							, T1.PROD_SEQ
							, T2.OPT_CD
							, T2.OPT_QTY
							, T3.OPT_GRP_CD
							, T3.OPT_NM
							, T3.OPT_PRCE
							, T4.PROD_NM
							, T4.OPT_PROD_YN
							, T4.OPT_PROD_EXT_YN
							, T5.OP_GB_CD
		              	FROM
		                	ORD_PROD_INFO T1 , ORD_PROD_OPT_INFO T2, PROD_OP T3 , PROD T4, PROD_OP_INFO T5
		              	WHERE
			                    T1.ORD_CD = T2.ORD_CD
			                AND T1.PROD_CODE = T2.PROD_CODE
			                AND T1.PROD_SEQ = T2.PROD_SEQ
			                AND T2.OPT_CD = T3.OPT_CD
			                AND T1.PROD_CODE = T4.PROD_CODE
			                AND T3.OPT_GRP_CD = T5.OPT_GRP_CD
		            ) Q
	            ON P.ORD_CD = Q.ORD_CD AND P.PROD_CODE = Q.PROD_CODE AND P.PROD_SEQ = Q.PROD_SEQ
	        ) R
        LEFT OUTER JOIN  (SELECT ORD_CD, CARD_COMP_NM, CARD_NO, SETL_NM, CARRIER, DSTADDR FROM ORD_SETL_INFO WHERE TRD_GB_CD = '10') S ON R.ORD_CD = S.ORD_CD
        LEFT OUTER JOIN (SELECT TA.ORD_CD, TB.COM_CD_NM, TA.INVC_NO, TA.REGIST_DT, TA.DLV_END_DT FROM INVC_INFO TA , (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD') TB WHERE TA.DLV_CMP_CD = TB.COM_CD) T ON R.ORD_CD = T.ORD_CD
        LEFT JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'PROC_STAT_CD') U ON R.PROC_STAT_CD = U.COM_CD
        LEFT OUTER JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'SELT_GB_CD') V ON R.SELT_GB_CD = V.COM_CD
        LEFT OUTER JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'CANC_REASON_CD') W ON R.CHG_REASON_CD = W.COM_CD
        ORDER BY R.REQUEST_DT DESC
	</select>
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	



	<!-- 주문 취소 조회 카운트 -->
	<select id="selectListCnclOrdCount" parameterType="hashmap" resultType="int">
		SELECT COUNT(1)
		  FROM(
		  SELECT COUNT(1)
		  FROM ORD_INFO A
		 INNER JOIN ORD_PROD_INFO B ON (B.ORD_CD = A.ORD_CD)
     	 INNER JOIN ORD_CANC_INFO C ON (C.CANC_CD = B.CANC_CD)
		 INNER JOIN PROD D ON (D.PROD_CODE = B.PROD_CODE)
		 INNER JOIN PROD_IMG E ON (E.PROD_CODE = B.PROD_CODE)
		 INNER JOIN MBER_INFO F ON (F.MBER_SEQ = D.MBER_SEQ)
		 WHERE D.PROD_TYPE_CD = '1'
		   AND E.PROD_IMG_GB_CD IN ('11')
		   AND B.PROC_STAT_CD = '50' 
		   <if test="S_START_DATE != null and S_START_DATE != ''">
		  AND C.CANC_DT BETWEEN #{S_START_DATE} AND #{S_END_DATE}
			</if>
		<if test="IN_ORD_NO != null and IN_ORD_NO != ''">
		   AND A.ORD_CD = #{IN_ORD_NO}
		</if>
		<if test="S_SEARCH_WORD != null and S_SEARCH_WORD != ''">
			<choose>
				<when test="S_SEARCH_ID == 'SELLER_ID'">
					AND F.MBER_EMAIL = #{S_SEARCH_WORD}
				</when>
				<when test="S_SEARCH_ID == 'SELLER_NM'">
					AND F.MBER_NM = #{S_SEARCH_WORD}
				</when>
				<when test="S_SEARCH_ID == 'ORD_ID'">
					AND A.ORD_EMAIL = #{S_SEARCH_WORD}
				</when>
				<when test="S_SEARCH_ID == 'ORD_NM'">
					AND A.ORD_NM = #{S_SEARCH_WORD}
				</when>
			</choose>
		</if>
		<if test="S_PROD_NM != null and S_PROD_NM != ''">
		   AND D.PROD_NM = #{S_PROD_NM}
		</if>
		<if test="P_CANC_REASON_CD  != null and P_CANC_REASON_CD != ''">
		  AND C.CHG_REASON_CD = #{P_CANC_REASON_CD}
		</if>
		<if test="SELT_GB_ARR != null and SELT_GB_ARR != ''">
		   AND A.SELT_GB_CD IN
			<foreach item="item" index="index" collection="SELT_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="S_MBER_GB != null and S_MBER_GB != ''">
		   AND F.MBER_GB_CD = #{S_MBER_GB}
		</if>
       GROUP BY A.ORD_CD
       )
	</select>
	<!-- 주문 상품 취소 -->
	<insert id="insertOrdCanl" parameterType="hashmap" useGeneratedKeys="true" keyProperty="CANC_CD" keyColumn="CANC_CD" >
		INSERT INTO ORD_CANC_INFO (
			 CANC_CD
			 , CANC_REASON_CD
			 , CANC_REASON
			 , CANC_DT
		) VALUES (
			 TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI')||LPAD(SEQ_ORD_CANC_INFO.NEXTVAL,4,0)
			 , #{P_CANC_REASON_CD}
			 , #{P_CANC_REASON}
			 , SYSDATE
		)
	</insert>

	<!-- 상품 취소 -->
	<update id="updateOrdCncl" parameterType="hashmap" >
		UPDATE ORD_PROD_INFO
		   SET PROC_STAT_CD = '50'
			 , CANC_CD = #{CANC_CD}
		 WHERE ORD_CD = #{P_ORD_CD}
		   AND PROD_CODE = #{P_PROD_CODE}
		   AND PROD_SEQ = #{P_PROD_SEQ}
	</update>

	<!-- 주문상태변경 -->
	<update id="updateOrderProdStat" parameterType="hashmap">
		UPDATE ORD_INFO
		   SET ORD_STAT_CD = #{P_ORD_STAT_CD}
		 WHERE ORD_CD = #{P_ORD_CD}
	</update>
	
	<!-- 주문처리상태변경 -->
	<update id="updateOrderProcStat" parameterType="hashmap">
		UPDATE ORD_PROD_INFO
		   SET PROC_STAT_CD = #{P_PROC_STAT_CD}
		 WHERE ORD_CD = #{P_ORD_CD}
		   AND PROD_CODE = #{P_PROD_CODE}
		   AND PROD_SEQ = #{P_PROD_SEQ}
	</update>

	<!-- 교환 상품 교환 상태 변경 -->
	<update id="updateExcStat" parameterType="hashmap">
		UPDATE CHG_RTN_PROC_INFO
		   SET CHG_PROC_TYPE_CD = #{CHG_PROC_TYPE_CD}
		 WHERE CHG_CD = #{P_CHG_CD}
	</update>
	
	<update id="updateExcDlv" parameterType="hashmap">
		UPDATE CHG_RTN_PROC_INFO
		   SET RCV_NM = #{RCV_NM}
			 , HP = #{HP}
			 , ZIP_CD = #{ZIP_CD}
			 , JUSO_DORO = #{JUSO_DORO}
			 , JUSO_JIBEN = #{JUSO_JIBEN}
			 , JUSO_DTL = #{JUSO_DTL}
		 WHERE CHG_CD = #{P_CHG_CD}
	</update>
	
	<!-- 주문 취소 조회 -->
	<select id="selectListOrdCncl" resultType="hashmap">
		<include refid="adminCommonMapper.pagingHeader" />
		SELECT
		 C.CANC_DT
		  ,C.CANC_REASON_CD
		  ,C.CANC_REASON
   		 ,A.ORD_CD
		,A.SELT_GB_CD AS SELT_GB_CD
        ,DECODE(A.SELT_GB_CD,'1','신용카드'
                          ,'2','휴대폰결제'
                          ,'3','계좌이체'
                          ,'4','PayNow','-') AS SELT_GB_CD_NM
			 , B.PROD_CODE
			 , NVL(A.ORD_REG_DATE, SYSDATE) AS ORD_REG_DATE
			 , A.ORD_STAT_CD
			 , NVL(A.ORD_EMAIL, '-') AS ORD_EMAIL
			 , NVL(A.ORD_NM, '-') AS ORD_NM
			 , F.MBER_NM
			 , F.MBER_EMAIL
			 , F.MBER_GB_CD
			 , B.PROC_STAT_CD
			 , B.PROD_SEQ
			 , (SELECT COUNT(PROD_SEQ)
						  FROM ORD_PROD_INFO
						 WHERE A.ORD_CD = ORD_CD
						   AND PROC_STAT_CD = '50' ) MAX_PROD_SEQ
			 , E.PROD_IMG_URL
			 , D.PROD_NM
			 , B.ORD_QTY
			 , B.PROD_ORD_AMT
			 , SUM(B.PROD_ORD_AMT) OVER( PARTITION BY A.ORD_CD) AS S_ORD_AMT
			 , B.PROD_CPN_CD
			 , NVL(B.CPN_USE_AMT, 0) AS CPN_USE_AMT
			 , NVL(SUM(B.CPN_USE_AMT) OVER( PARTITION BY A.ORD_CD), 0) AS S_CPN_USE_AMT
			 , NVL(A.POINT_USE_AMT, 0) AS POINT_USE_AMT
			 , NVL(A.DLV_SELT_AMT, 0) AS DLV_SELT_AMT
			 , D.BNDL_DLV_YN
       		 ,  NVL(G.CARD_NO,'-') AS CARD_NO
       		 ,  NVL(G.CARD_COMP_NM,'-') AS CARD_COMP_NM
			 , DENSE_RANK() OVER( ORDER BY A.ORD_CD DESC ) AS NO
		  FROM ORD_INFO A
		 INNER JOIN ORD_PROD_INFO B ON (B.ORD_CD = A.ORD_CD)
     INNER JOIN ORD_CANC_INFO C ON (C.CANC_CD = B.CANC_CD)
		 INNER JOIN PROD D ON (D.PROD_CODE = B.PROD_CODE)
		 INNER JOIN PROD_IMG E ON (E.PROD_CODE = B.PROD_CODE)
		 INNER JOIN MBER_INFO F ON (F.MBER_SEQ = D.MBER_SEQ)
     LEFT OUTER JOIN ORD_SETL_INFO G ON (A.ORD_CD = G.ORD_CD )
		 WHERE D.PROD_TYPE_CD = '1'
		   AND E.PROD_IMG_GB_CD IN ('11')
		   AND B.PROC_STAT_CD = '50' 
	   <if test="S_START_DATE != null and S_START_DATE != ''">
		  AND C.CANC_DT BETWEEN #{S_START_DATE} AND #{S_END_DATE}
			</if>
		<if test="IN_ORD_NO != null and IN_ORD_NO != ''">
		   AND A.ORD_CD = #{IN_ORD_NO}
		</if>
		<if test="S_SEARCH_WORD != null and S_SEARCH_WORD != ''">
			<choose>
				<when test="S_SEARCH_ID == 'SELLER_ID'">
					AND F.MBER_EMAIL = #{S_SEARCH_WORD}
				</when>
				<when test="S_SEARCH_ID == 'SELLER_NM'">
					AND F.MBER_NM = #{S_SEARCH_WORD}
				</when>
				<when test="S_SEARCH_ID == 'ORD_ID'">
					AND A.ORD_EMAIL = #{S_SEARCH_WORD}
				</when>
				<when test="S_SEARCH_ID == 'ORD_NM'">
					AND A.ORD_NM = #{S_SEARCH_WORD}
				</when>
			</choose>
		</if>
		<if test="S_PROD_NM != null and S_PROD_NM != ''">
		   AND D.PROD_NM = #{S_PROD_NM}
		</if>
		<if test="P_CANC_REASON_CD  != null and P_CANC_REASON_CD != ''">
		  AND C.CHG_REASON_CD = #{P_CANC_REASON_CD}
		</if>
		<if test="SELT_GB_ARR != null and SELT_GB_ARR != ''">
		   AND A.SELT_GB_CD IN
			<foreach item="item" index="index" collection="SELT_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="S_MBER_GB != null and S_MBER_GB != ''">
		   AND F.MBER_GB_CD = #{S_MBER_GB}
		</if>
		ORDER BY C.CANC_DT DESC
		<include refid="adminCommonMapper.pagingFooter" />
	</select>
	
	
	
<!-- =============================================================================================================================================================== -->
	<!-- 주문리스트 엑셀 ResultMap -->
	<resultMap id="orderMap" type="hashmap">
		<result property="ORD_REG_DATE" column="ORD_REG_DATE" javaType="java.lang.String"/>
		<result property="ORD_STAT_CD" column="ORD_STAT_CD" javaType="java.lang.String"/>
		<result property="ORD_CD" column="ORD_CD" javaType="java.lang.String"/>
		<result property="ORD_EMAIL" column="ORD_EMAIL" javaType="java.lang.String"/>
		<result property="PROD_TYPE_CD" column="PROD_TYPE_CD" javaType="java.lang.String"/>
		<result property="PROD_NM" column="PROD_NM" javaType="java.lang.String"/>
		<result property="SELT_GB_CD" column="SELT_GB_CD" javaType="java.lang.String"/>
		<result property="ORD_QTY" column="ORD_QTY" javaType="java.lang.String"/>
		<result property="PROD_ORD_AMT" column="PROD_ORD_AMT" javaType="java.lang.String"/>
		<result property="DLV_PRCE" column="DLV_PRCE" javaType="java.lang.String"/>
		<result property="DSCNT_AMT" column="DSCNT_AMT" javaType="java.lang.String"/>
		<result property="ORD_AMT" column="ORD_AMT" javaType="java.lang.String"/>
	</resultMap>
	
	<!-- 판매 주문 관리 리스트 -->
	<select id="selectListOrdExcel" parameterType="hashmap" resultMap="orderMap">
		SELECT A.ORD_CD											<!-- 주문번호 -->
			 , A.ORD_REG_DATE									<!-- 주문접수일 -->
			 , A.ORD_STAT_CD									<!-- 주문상태코드 -->
			 , C.PROD_TYPE_CD									<!-- 상품유형코드 -->
			 , C.PROD_NM										<!-- 상품명 -->
			 , A.SELT_GB_CD										<!-- 결제방법코드 -->
			 , B.ORD_QTY										<!-- 주문수량 -->
			 , B.PROD_ORD_AMT									<!-- 상품주문금액 -->
			 , B.DLV_PRCE										<!-- 배송비 -->
			 , A.DSCNT_AMT										<!-- 할인금액 -->
			 , A.ORD_AMT										<!-- 주문금액 -->
			 , A.ORD_EMAIL										<!-- 주문자ID -->
		  FROM ORD_INFO A
		 INNER JOIN ORD_PROD_INFO B ON (B.ORD_CD = A.ORD_CD)
		 INNER JOIN PROD C ON (C.PROD_CODE = B.PROD_CODE)
		 INNER JOIN PROD_IMG D ON (D.PROD_CODE = B.PROD_CODE)
		 INNER JOIN MBER_INFO E ON (E.MBER_SEQ = A.MBER_ID)
		 INNER JOIN MBER_INFO F ON (F.MBER_SEQ = C.MBER_SEQ)
		 WHERE C.PROD_TYPE_CD NOT IN (4)
		   AND A.ORD_STAT_CD IN ( '10', '20', '30', '40', '50' )
		   AND B.PROC_STAT_CD IN ( '10', '21', '22', '23' )
		   AND D.PROD_IMG_GB_CD IN ('11')
		<if test="S_DATE_OPTION == '01' and S_START_DATE != null and S_START_DATE != ''">
		   AND A.ORD_REG_DATE BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="S_SEARCH_WORD != null and S_SEARCH_WORD != ''">
		   AND ( A.ORD_CD = #{S_SEARCH_WORD} OR E.MBER_EMAIL = #{S_SEARCH_WORD} OR F.MBER_EMAIL = #{S_SEARCH_WORD} OR C.PROD_NM = #{S_SEARCH_WORD} OR B.PROD_CODE = #{S_SEARCH_WORD} )
		</if>
		<if test="PURC_GB_ARR != null and PURC_GB_ARR != ''">
		   AND C.PROD_TYPE_CD IN
			<foreach item="item" index="index" collection="PURC_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="SELT_GB_ARR != null and SELT_GB_ARR != ''">
		   AND A.SELT_GB_CD IN
			<foreach item="item" index="index" collection="SELT_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="ORD_GB_ARR != null and ORD_GB_ARR != ''">
		   AND A.ORD_STAT_CD IN
			<foreach item="item" index="index" collection="ORD_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		 ORDER BY A.UPDT_DT DESC, B.PROD_SEQ ASC
	</select>
	
	<!-- 판매 주문 관리 리스트 총 카운트 -->
	<select id="selectListOrderCount" parameterType="hashmap" resultType="int">
		SELECT COUNT(1)
		  FROM ORD_INFO A
		 INNER JOIN ORD_PROD_INFO B ON (B.ORD_CD = A.ORD_CD)
		 INNER JOIN PROD C ON (C.PROD_CODE = B.PROD_CODE)
		 INNER JOIN PROD_IMG D ON (D.PROD_CODE = B.PROD_CODE)
		 INNER JOIN MBER_INFO E ON (E.MBER_SEQ = A.MBER_SEQ)
		 INNER JOIN MBER_INFO F ON (F.MBER_SEQ = C.MBER_SEQ)
		 WHERE C.PROD_TYPE_CD NOT IN (4)
		   AND A.ORD_STAT_CD IN ( '10', '20', '30', '40', '50' )
		   AND B.PROC_STAT_CD IN ( '10', '21', '22', '23' )
		   AND D.PROD_IMG_GB_CD IN ('11')
		<if test="S_DATE_OPTION == '01' and S_START_DATE != null and S_START_DATE != ''">
		   AND A.ORD_REG_DATE BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="S_SEARCH_WORD != null and S_SEARCH_WORD != ''">
		    AND ( A.ORD_CD = #{S_SEARCH_WORD} OR E.MBER_EMAIL = #{S_SEARCH_WORD} OR F.MBER_EMAIL = #{S_SEARCH_WORD} OR C.PROD_NM = #{S_SEARCH_WORD} OR B.PROD_CODE = #{S_SEARCH_WORD} )
		</if>
		<if test="PURC_GB_ARR != null and PURC_GB_ARR != ''">
		   AND C.PROD_TYPE_CD IN
			<foreach item="item" index="index" collection="PURC_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="SELT_GB_ARR != null and SELT_GB_ARR != ''">
		   AND A.SELT_GB_CD IN
			<foreach item="item" index="index" collection="SELT_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="ORD_GB_ARR != null and ORD_GB_ARR != ''">
		   AND A.ORD_STAT_CD IN
			<foreach item="item" index="index" collection="ORD_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</select>
	
	<!-- 판매 주문 관리 리스트 -->
	<select id="selectListOrder" resultType="hashmap">
		<include refid="adminCommonMapper.pagingHeader" />
		SELECT A.ORD_REG_DATE																	<!-- 주문일시 -->
			 , A.ORD_STAT_CD																	<!-- 주문상태 -->
			 , A.ORD_CD																			<!-- 주문번호 -->
			 , B.PROD_SEQ																		<!-- 상품SEQ번호 -->
			 , (SELECT COUNT(PROD_SEQ)
				  FROM ORD_PROD_INFO
				 WHERE A.ORD_CD = ORD_CD
				   AND PROC_STAT_CD IN ( '10', '21', '22', '23' ) ) MAX_PROD_SEQ				<!-- 상품COUNT -->
			 , E.MBER_GB_CD																		<!-- 주문자 법인/개인구분코드 -->
			 , E.MBER_EMAIL																		<!-- 주문자 EMAIL -->
			 , C.PROD_TYPE_CD																	<!-- 상품타입코드 -->
			 , D.PROD_IMG_URL																	<!-- 상품이미지URL -->
			 , C.PROD_NM																		<!-- 상품명 -->
			 , '모바일웹' AS SELLER_CH															<!-- 판매채널 -->
			 , A.SELT_GB_CD																		<!-- 결제 구분 코드 -->
			 , B.ORD_QTY																		<!-- 주문 수량 -->
			 , B.PROD_ORD_AMT																	<!-- 상품금액 -->
			 , B.DLV_PRCE																		<!-- 배송비 -->
			 , A.DSCNT_AMT																		<!-- 할인금액 -->
			 , A.ORD_AMT																		<!-- 최종결제금액 -->
			 , F.MBER_EMAIL AS SELLER_EMAIL														<!-- 판매자EMAIL -->
			 , ROW_NUMBER() OVER(PARTITION BY A.ORD_CD ORDER BY A.ORD_REG_DATE DESC ) AS NO
		  FROM ORD_INFO A
		 INNER JOIN ORD_PROD_INFO B ON (B.ORD_CD = A.ORD_CD)
		 INNER JOIN PROD C ON (C.PROD_CODE = B.PROD_CODE)
		 INNER JOIN PROD_IMG D ON (D.PROD_CODE = B.PROD_CODE)
		 INNER JOIN MBER_INFO E ON (E.MBER_SEQ = A.MBER_SEQ)
		 INNER JOIN MBER_INFO F ON (F.MBER_SEQ = C.MBER_SEQ)
		 WHERE C.PROD_TYPE_CD NOT IN (4)
		   AND A.ORD_STAT_CD IN ( '10', '20', '30', '40', '50' )
		   AND B.PROC_STAT_CD IN ( '10', '21', '22', '23' )
		   AND D.PROD_IMG_GB_CD IN ('11')
		<if test="S_DATE_OPTION == '01' and S_START_DATE != null and S_START_DATE != ''">
		   AND A.ORD_REG_DATE BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="S_SEARCH_WORD != null and S_SEARCH_WORD != ''">
		   AND ( A.ORD_CD = #{S_SEARCH_WORD} OR E.MBER_EMAIL = #{S_SEARCH_WORD} OR F.MBER_EMAIL = #{S_SEARCH_WORD} OR C.PROD_NM = #{S_SEARCH_WORD} OR B.PROD_CODE = #{S_SEARCH_WORD} )
		</if>
		<if test="PURC_GB_ARR != null and PURC_GB_ARR != ''">
		   AND C.PROD_TYPE_CD IN
			<foreach item="item" index="index" collection="PURC_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="SELT_GB_ARR != null and SELT_GB_ARR != ''">
		   AND A.SELT_GB_CD IN
			<foreach item="item" index="index" collection="SELT_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="ORD_GB_ARR != null and ORD_GB_ARR != ''">
		   AND A.ORD_STAT_CD IN
			<foreach item="item" index="index" collection="ORD_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		 ORDER BY A.UPDT_DT DESC, B.PROD_SEQ ASC
		<include refid="adminCommonMapper.pagingFooter" />
	</select>
	
	<!-- 주문리스트 메인 주문현황 건수 조회 -->
	<select id="selectOrdStatCnt" parameterType="hashmap" resultType="hashmap">
		SELECT TO_CHAR(SUM(ORD_DESP_COM_CNT),'FM99,999,999,999,999,990')	AS ORD_DESP_COM_CNT
		 , TO_CHAR(SUM(ORD_COM_CNT),'FM99,999,999,999,999,990')				AS ORD_COM_CNT
		 , TO_CHAR(SUM(ORD_READY_CNT),'FM99,999,999,999,999,990')			AS ORD_READY_CNT
		 , TO_CHAR(SUM(ORD_SHIP_CNT),'FM99,999,999,999,999,990')			AS ORD_SHIP_CNT
		 , TO_CHAR(SUM(ORD_SHIP_COM_CNT),'FM99,999,999,999,999,990')		AS ORD_SHIP_COM_CNT
		  FROM (
				SELECT COUNT(1) AS ORD_DESP_COM_CNT
					 , 0		AS ORD_COM_CNT
					 , 0		AS ORD_READY_CNT
					 , 0		AS ORD_SHIP_CNT
					 , 0		AS ORD_SHIP_COM_CNT
				  FROM ORD_INFO 
				 WHERE ORD_STAT_CD = '10'
				 UNION ALL
				SELECT 0		AS ORD_DESP_COM_CNT
					 , COUNT(1)	AS ORD_COM_CNT
					 , 0		AS ORD_READY_CNT
					 , 0		AS ORD_SHIP_CNT
					 , 0		AS ORD_SHIP_COM_CNT
				  FROM ORD_INFO 
				 WHERE ORD_STAT_CD = '20'
				 UNION ALL
				SELECT 0		AS ORD_DESP_COM_CNT
					 , 0		AS ORD_COM_CNT
					 , COUNT(1)	AS ORD_READY_CNT
					 , 0		AS ORD_SHIP_CNT
					 , 0		AS ORD_SHIP_COM_CNT
				  FROM ORD_INFO 
				 WHERE ORD_STAT_CD = '30'
				 UNION ALL
				SELECT 0		AS ORD_DESP_COM_CNT
					 , 0		AS ORD_COM_CNT
					 , 0		AS ORD_READY_CNT
					 , COUNT(1)	AS ORD_SHIP_CNT
					 , 0		AS ORD_SHIP_COM_CNT
				  FROM ORD_INFO 
				 WHERE ORD_STAT_CD = '40'
				 UNION ALL
				SELECT 0		AS ORD_DESP_COM_CNT
					 , 0		AS ORD_COM_CNT
					 , 0		AS ORD_READY_CNT
					 , 0		AS ORD_SHIP_CNT
					 , COUNT(1)	AS ORD_SHIP_COM_CNT
				  FROM ORD_INFO 
				 WHERE ORD_STAT_CD = '50'
			)
	</select>
	
	<!-- 상품 SEQ 조회 -->
	<select id="selectProdSeq" parameterType="hashmap" resultType="String">
		SELECT PROD_SEQ
		  FROM ORD_PROD_INFO
		 WHERE ORD_CD = #{CELL0}
		   AND PROD_CODE = #{CELL1}
	</select>
	
	<!-- 배송지 등록 여부 -->
	<select id="selectProdCnt" parameterType="hashmap" resultType="int">
		SELECT COUNT(1)
		  FROM ORD_PROD_INFO
		 WHERE ORD_CD = #{CELL0}
		   AND PROD_CODE = #{CELL1}
		   AND PROD_SEQ = #{PROD_SEQ}
	</select>
	
	<!-- 배송지 일괄 등록 -->
	<insert id="insertListDlv" parameterType="hashmap">
		INSERT INTO INVC_INFO (
			 ORD_CD
			 , PROD_CODE
			 , PROD_SEQ
			 , INVC_NO
			 , DLV_CMP_CD
			 , REGIST_DT
			 , UPDT_DT
			 , EXP_DT
			) VALUES (
			 #{CELL0}
			 , #{CELL1}
			 , #{PROD_SEQ}
			 , #{CELL5}
			 , #{CELL4}
			 , SYSDATE
			 , SYSDATE
			 , #{CELL3}
			)
	</insert>
	
	<!-- 판매 주문 관리 상세 내역 -->
	<select id="selectOrderDtl" parameterType="hashmap" resultType="hashmap">
		SELECT A.ORD_CD							AS ORD_CD												<!-- 주문번호 -->
			 , B.PROD_SEQ						AS PROD_SEQ												<!-- 상품일련번호 -->
			 , B.PROD_CODE						AS PROD_CODE											<!-- 상품 코드 -->
			 , D.MBER_EMAIL						AS SELLER_EMAIL											<!-- 판매자ID -->
			 , C.PROD_NM						AS PROD_NM												<!-- 상품명 -->
			 , NVL(B.ORD_QTY, 0)				AS ORD_QTY												<!-- 상품주문수량 -->
			 , NVL(B.PROD_ORD_AMT, 0)			AS PROD_ORD_AMT											<!-- 상품금액 -->
			 , NVL(F.OPT_NM, '-')				AS OPT_NM												<!-- 옵션명 -->
			 , NVL(E.OPT_QTY, 0)				AS OPT_QTY												<!-- 옵션수량 -->
			 , NVL(F.OPT_PRCE, 0)				AS OPT_PRCE												<!-- 옵션금액 -->
			 , A.ORD_STAT_CD					AS ORD_STAT_CD											<!-- 주문상태코드 -->
			 , B.PROC_STAT_CD					AS PROC_STAT_CD											<!-- 처리상태코드 -->
			 , B.DLV_PRCE						AS DLV_PRCE												<!-- 배송비 -->
			 , (SELECT COUNT(1)
				  FROM ORD_PROD_OPT_INFO
				 WHERE ORD_CD = A.ORD_CD
				   AND PROD_CODE = B.PROD_CODE ) AS MAX_OPT_SEQ											<!-- 옵션 총 개수 -->
			 , (B.ORD_QTY * B.PROD_ORD_AMT) AS SUM_ORD_PRCE												<!-- 상품합계금액 -->
			 , NVL(SUM(E.OPT_QTY * F.OPT_PRCE) OVER (PARTITION BY B.PROD_CODE), 0) AS SUM_OPT_PRCE		<!-- 옵션합계금액 -->
			 , ROW_NUMBER() OVER(PARTITION BY B.PROD_CODE ORDER BY A.ORD_REG_DATE DESC ) AS NO
		  FROM ORD_INFO A
		 INNER JOIN ORD_PROD_INFO B ON(B.ORD_CD = A.ORD_CD)
		 INNER JOIN PROD C ON ( C.PROD_CODE = B.PROD_CODE)
		 INNER JOIN MBER_INFO D ON(D.MBER_SEQ = C.MBER_SEQ)
		  LEFT JOIN ORD_PROD_OPT_INFO E ON(E.ORD_CD = A.ORD_CD AND E.PROD_CODE = B.PROD_CODE)
		  LEFT JOIN PROD_OPT F ON(F.PROD_CODE = B.PROD_CODE AND F.OPT_CD = E.OPT_CD)
		 WHERE A.ORD_CD = #{P_ORD_CD}
		   AND B.PROC_STAT_CD IN ('10', '21', '22', '23')
	</select>
	
	<!-- 주문상세 결제정보 -->
	<select id="selectOrdSetlDtl" parameterType="hashmap" resultType="hashmap">
		SELECT A.ORD_AMT
			 , 10000 AS OPT_AMT
			 , A.DLV_SELT_AMT
			 , A.POINT_USE_AMT
			 , A.CPN_USE_AMT
			 , B.TRD_GB_CD
			 , C.MBER_GB_CD
			 , A.ORD_NM
			 , A.ORD_EMAIL
			 , A.ORD_HP
			 , D.RCV_NM
			 , D.RCV_HP
			 , D.ZIP_CD
			 , D.JUSO_JIBEN
			 , D.JUSO_DORO
			 , D.JUSO_DTL
			 ,TO_CHAR(A.ORD_REG_DATE,'YYYY-MM-DD HH:MM') AS ORD_REG_DATE
		FROM ORD_INFO A
		LEFT OUTER JOIN ORD_SETL_INFO B ON (B.ORD_CD = A.ORD_CD)
		LEFT OUTER JOIN MBER_INFO C ON (C.MBER_SEQ = A.MBER_SEQ)
		LEFT OUTER JOIN ORD_DLV_INFO D ON (D.ORD_CD = A.ORD_CD)
		WHERE A.ORD_CD = #{P_ORD_CD}
	</select>
	
	<!-- 주문자 정보 -->
	<select id="selectOrdMberInfo" parameterType="hashmap" resultType="hashmap">
		SELECT B.MBER_GB_CD
			 , B.MBER_EMAIL
			 , B.MBER_NM
			 , B.MBER_PHONE
		  FROM ORD_INFO A
		 LEFT OUTER JOIN MBER_INFO B ON (B.MBER_SEQ = A.MBER_SEQ)
		 WHERE A.ORD_CD = #{P_ORD_CD}
	</select>
	
	
	
	
	
	
	
	
	<!-- 운송장 등록 -->
	<insert id="insertOrderShipping" parameterType="hashmap">
		MERGE INTO INVC_INFO
		USING DUAL ON (ORD_CD = #{P_ORD_CD} AND PROD_CODE = #{P_PROD_CODE} AND PROD_SEQ = #{P_PROD_SEQ})
		 WHEN MATCHED THEN
			UPDATE SET
				 INVC_NO = #{P_INVC_NO}
				 , DLV_CMP_CD = #{P_DLV_CMP_CD}
				 , UPDT_DT = SYSDATE
		 WHEN NOT MATCHED THEN
			INSERT (
				 ORD_CD
				 , PROD_CODE
				 , PROD_SEQ
				 , INVC_NO
				 , DLV_CMP_CD
				 , REGIST_DT
				 , UPDT_DT
			) VALUES (
				 #{P_ORD_CD}
				 , #{P_PROD_CODE}
				 , #{P_PROD_SEQ}
				 , #{P_INVC_NO}
				 , #{P_DLV_CMP_CD}
				 , SYSDATE
				 , SYSDATE
			)
	</insert>
	
	<!-- 상품 배송지 등록 -->
	<insert id="insertOrdDlv" parameterType="hashmap">
		MERGE INTO ORD_DLV_INFO
		USING DUAL ON (ORD_CD = #{P_ORD_CD, jdbcType=VARCHAR})
		 WHEN MATCHED THEN
			UPDATE SET
				   RCV_NM = #{RCV_NM, jdbcType=VARCHAR}
				 , RCV_TEL = #{RCV_TEL, jdbcType=VARCHAR}
				 , ZIP_CD = #{ZIP_CD, jdbcType=VARCHAR}
				 , JUSO_JIBEN = #{JUSO_JIBEN, jdbcType=VARCHAR}
				 , JUSO_DORO = #{JUSO_DORO, jdbcType=VARCHAR}
				 , JUSO_DTL = #{JUSO_DTL, jdbcType=VARCHAR}
				 , UPDT_DT = SYSDATE
		WHEN NOT MATCHED THEN
			INSERT (
				 ORD_CD
				 , RCV_NM
				 , RCV_TEL
				 , ZIP_CD
				 , JUSO_JIBEN
				 , JUSO_DORO
				 , JUSO_DTL
				 , REGIST_DT
				 , UPDT_DT
			) VALUES (
				   #{P_ORD_CD, jdbcType=VARCHAR}
				 , #{RCV_NM, jdbcType=VARCHAR}
				 , #{RCV_TEL, jdbcType=VARCHAR}
				 , #{ZIP_CD, jdbcType=VARCHAR}
				 , #{JUSO_JIBEN, jdbcType=VARCHAR}
				 , #{JUSO_DORO, jdbcType=VARCHAR}
				 , #{JUSO_DTL, jdbcType=VARCHAR}
				 , SYSDATE
				 , SYSDATE
			)
	</insert>
	
	<!-- 교환/반품 신청 조회 ROW 카운트 수 -->
	<select id="selectListRfndCount" parameterType="hashmap" resultType="int">
		SELECT COUNT(1)
		  FROM CHG_PROD_INFO A
		 INNER JOIN CHG_RTN_PROC_INFO B ON (B.CHG_CD = A.CHG_CD AND B.ORD_CD = A.ORD_CD)
		 INNER JOIN PROD C ON (C.PROD_CODE = A.PROD_CODE)
		 INNER JOIN PROD_IMG D ON (D.PROD_CODE = A.PROD_CODE)
		 INNER JOIN MBER_INFO E ON (E.MBER_SEQ = B.MBER_SEQ)
		 INNER JOIN MBER_INFO F ON (F.MBER_SEQ = C.MBER_SEQ)
		 WHERE 1=1
		<if test="S_DATE_OPTION == '01' and S_START_DATE != null and S_START_DATE != ''">
		  AND B.CHG_REG_DT BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="S_DATE_OPTION == '02' and S_START_DATE != null and S_START_DATE != ''">
		   AND B.CHG_FIN_DT BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="S_SEARCH_WORD != null and S_SEARCH_WORD != ''">
		   AND ( A.ORD_CD = #{S_SEARCH_WORD} OR E.MBER_EMAIL = #{S_SEARCH_WORD} OR F.MBER_EMAIL = #{S_SEARCH_WORD} OR C.PROD_NM = #{S_SEARCH_WORD} OR A.PROD_CODE = #{S_SEARCH_WORD} )
		</if>
		<if test="PROD_GB_ARR != null and PROD_GB_ARR != ''">
		   AND A.PROD_GB_CD IN
			<foreach item="item" index="index" collection="PROD_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="PROC_GB_ARR != null and PROC_GB_ARR != ''">
		   AND A.PROC_STAT_CD IN
			<foreach item="item" index="index" collection="PROC_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</select>
	
	<!-- 교환/반품 신청 조회 -->
	<select id="selectListRfnd" resultType="hashmap">
		<include refid="adminCommonMapper.pagingHeader" />
		SELECT A.CHG_CD						<!-- 교환/반품 코드 -->
			 , A.ORD_CD						<!-- 주문코드 -->
			 , A.PROD_CODE					<!-- 상품코드 -->
			 , A.PROD_SEQ					<!-- 상품일련번호 -->
			 , A.PROD_GB_CD					<!-- 상품구분코드 -->
			 , A.PROC_STAT_CD				<!-- 상품상태(처리)코드 -->
			 , B.MBER_SEQ					<!-- 회원일련번호 -->
			 , B.CHG_REG_DT					<!-- 접수일 -->
			 , C.PROD_NM					<!-- 상품명 -->
			 , D.PROD_IMG_URL				<!-- 상품이미지URL -->
			 , E.MBER_GB_CD					<!-- 회원구분코드 -->
			 , E.MBER_EMAIL AS ORD_MBER_ID	<!-- 구매자EMAIL -->
			 , F.MBER_EMAIL AS SELLER_ID	<!-- 판매자EMAIL -->
			 , ROW_NUMBER() OVER(ORDER BY B.CHG_REG_DT DESC ) AS NO
		  FROM CHG_PROD_INFO A
		 INNER JOIN CHG_RTN_PROC_INFO B ON (B.CHG_CD = A.CHG_CD AND B.ORD_CD = A.ORD_CD)
		 INNER JOIN PROD C ON (C.PROD_CODE = A.PROD_CODE)
		 INNER JOIN PROD_IMG D ON (D.PROD_CODE = A.PROD_CODE)
		 INNER JOIN MBER_INFO E ON (E.MBER_SEQ = B.MBER_SEQ)
		 INNER JOIN MBER_INFO F ON (F.MBER_SEQ = C.MBER_SEQ)
		 WHERE 1=1
		<if test="S_DATE_OPTION == '01' and S_START_DATE != null and S_START_DATE != ''">
		  AND B.CHG_REG_DT BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="S_DATE_OPTION == '02' and S_START_DATE != null and S_START_DATE != ''">
		   AND B.CHG_FIN_DT BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="S_SEARCH_WORD != null and S_SEARCH_WORD != ''">
		   AND ( A.ORD_CD = #{S_SEARCH_WORD} OR E.MBER_EMAIL = #{S_SEARCH_WORD} OR F.MBER_EMAIL = #{S_SEARCH_WORD} OR C.PROD_NM = #{S_SEARCH_WORD} OR A.PROD_CODE = #{S_SEARCH_WORD} )
		</if>
		<if test="PROD_GB_ARR != null and PROD_GB_ARR != ''">
		   AND A.PROD_GB_CD IN
			<foreach item="item" index="index" collection="PROD_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		<if test="PROC_GB_ARR != null and PROC_GB_ARR != ''">
		   AND A.PROC_STAT_CD IN
			<foreach item="item" index="index" collection="PROC_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		ORDER BY B.CHG_REG_DT DESC
		<include refid="adminCommonMapper.pagingFooter" />
	</select>
	
	<!-- 교환/반품 현황 건수 조회 -->
	<select id="selectRfndStatCnt" parameterType="hashmap" resultType="hashmap">
		SELECT TO_CHAR(SUM(CHG_RTN_CNT),'FM99,999,999,999,999,990')			AS CHG_RTN_CNT			<!-- 교환신청건수 -->
		 , TO_CHAR(SUM(CHG_RTN_PROC_CNT),'FM99,999,999,999,999,990')		AS CHG_RTN_PROC_CNT		<!-- 교환처리중건수 -->
		 , TO_CHAR(SUM(CHG_RTN_COM_CNT),'FM99,999,999,999,999,990')			AS CHG_RTN_COM_CNT		<!-- 교환완료건수 -->
		 , TO_CHAR(SUM(ORD_RTN_CNT),'FM99,999,999,999,999,990')				AS ORD_RTN_CNT			<!-- 반품신청건수 -->
		 , TO_CHAR(SUM(ORD_RTN_COM_CNT),'FM99,999,999,999,999,990')			AS ORD_RTN_COM_CNT		<!-- 반품완료건수 -->
		  FROM (
				SELECT COUNT(1) AS CHG_RTN_CNT
					 , 0		AS CHG_RTN_PROC_CNT
					 , 0		AS CHG_RTN_COM_CNT
					 , 0		AS ORD_RTN_CNT
					 , 0		AS ORD_RTN_COM_CNT
				  FROM CHG_PROD_INFO
				 WHERE PROC_STAT_CD = '10'
				 UNION ALL
				SELECT 0		AS CHG_RTN_CNT
					 , COUNT(1)	AS CHG_RTN_PROC_CNT
					 , 0		AS CHG_RTN_COM
					 , 0		AS ORD_RTN_CNT
					 , 0		AS ORD_RTN_COM
				  FROM CHG_PROD_INFO
				 WHERE PROC_STAT_CD = '20'
				 UNION ALL
				SELECT 0		AS CHG_RTN_CNT
					 , 0		AS CHG_RTN_PROC_CNT
					 , COUNT(1)	AS CHG_RTN_COM
					 , 0		AS ORD_RTN_CNT
					 , 0		AS ORD_RTN_COM
				  FROM CHG_PROD_INFO
				 WHERE PROC_STAT_CD = '30'
				 UNION ALL
				SELECT 0		AS CHG_RTN_CNT
					 , 0		AS CHG_RTN_PROC_CNT
					 , 0		AS CHG_RTN_COM
					 , COUNT(1)	AS ORD_RTN_CNT
					 , 0		AS ORD_RTN_COM
				  FROM CHG_PROD_INFO
				 WHERE PROC_STAT_CD = '50'
				 UNION ALL
				SELECT 0		AS CHG_RTN_CNT
					 , 0		AS CHG_RTN_PROC_CNT
					 , 0		AS CHG_RTN_COM
					 , 0		AS ORD_RTN_CNT
					 , COUNT(1)	AS ORD_RTN_COM
				  FROM CHG_PROD_INFO
				 WHERE PROC_STAT_CD = '60'
			)
	</select>
	
	<!-- 교환/반품 주문 정보 -->
	<select id="selectRfndOrdInfo" parameterType="hashmap" resultType="hashmap">
		SELECT A.ORD_REG_DATE
			 , A.ORD_CD
			 , '판매채널' AS SELLER_CH
			 , C.PROD_TYPE_CD
			 , A.ORD_EMAIL
			 , B.PROD_ORD_AMT
			 , A.ORD_STAT_CD
		  FROM ORD_INFO A
		 INNER JOIN ORD_PROD_INFO B ON (B.ORD_CD = A.ORD_CD)
		 INNER JOIN PROD C ON (C.PROD_CODE = B.PROD_CODE)
		 WHERE A.ORD_CD = #{P_ORD_CD}
	</select>
	
	<!-- 출고 내역 -->
	<select id="selectRfndInvcInfo" parameterType="hashmap" resultType="hashmap">
		SELECT C.DLV_START_DT
			 , A.RCV_NM
			 , A.HP
			 , A.ZIP_CODE
			 , A.JUSO_JIBEN
			 , A.JUSO_ROAD
			 , A.JUSO_DTL
			 , C.DLV_CMP_CD
			 , C.INVC_NO
			 , C.DLV_END_DT
			 , C.DLV_STAT_CD AS DLV_STAT_CD
		  FROM CHG_RTN_PROC_INFO A
		 INNER JOIN CHG_PROD_INFO B ON (B.ORD_CD = A.ORD_CD)
		 INNER JOIN CHG_INVC_INFO C ON (C.ORD_CD = B.ORD_CD AND C.CHG_CD = B.CHG_CD AND C.PROD_CODE = B.PROD_CODE)
		 WHERE A.ORD_CD = #{P_ORD_CD}
	</select>
	
	<!-- 교환/반품 신청 정보 -->
	<select id="selectRfndInfo" parameterType="hashmap" resultType="hashmap">
		SELECT B.CHG_REG_DT
			 , D.PROD_IMG_URL
			 , C.PROD_NM
			 , B.CHG_REASON
			 , B.CHG_FIN_DT
			 , A.PROC_STAT_CD
			 , B.ADM_MEMO
		FROM CHG_PROD_INFO A
		INNER JOIN CHG_RTN_PROC_INFO B ON (B.CHG_CD = A.CHG_CD AND B.ORD_CD = A.ORD_CD)
		INNER JOIN PROD C ON (C.PROD_CODE = A.PROD_CODE)
		INNER JOIN PROD_IMG D ON (D.PROD_CODE = A.PROD_CODE)
		 WHERE A.ORD_CD = #{P_ORD_CD}
		   AND A.CHG_CD = #{P_CHG_CD}
	</select>
	
	<!-- 교환/반품 신청 이력 -->
	<select id="selectListHist" parameterType="hashmap" resultType="hashmap">
		SELECT ORD_CD
			 , PROD_CODE
			 , PROC_SEQ
			 , PROC_STAT_CD
			 , REGIST_DT
			 , ORG_CD
			 , ADM_ID
		  FROM ORD_PROD_INFO_HIST
		 WHERE ORD_CD = #{P_ORD_CD}
		   AND PROD_CODE = #{P_PROD_CODE}
		 ORDER BY PROC_SEQ DESC
		
	</select>
	
	<!-- 교환/반품 상품 배송지 정보 변경 (주소정보) -->
	<update id="updateRfndDtl" parameterType="hashmap">
		UPDATE CHG_RTN_PROC_INFO
			<set>
				<if test="RCV_NM != null and RCV_NM != ''">
					RCV_NM = #{RCV_NM} ,
				</if>
				<if test="HP != null and HP != ''">
					HP = #{HP},
				</if>
				<if test="ZIP_CODE != null and ZIP_CODE != ''">
					ZIP_CODE = #{ZIP_CODE},
				</if>
				<if test="JUSO_JIBEN != null and JUSO_JIBEN != ''">
					JUSO_JIBEN = #{JUSO_JIBEN},
				</if>
				<if test="JUSO_ROAD != null and JUSO_ROAD != ''">
					JUSO_ROAD = #{JUSO_ROAD},
				</if>
				<if test="JUSO_DTL != null and JUSO_DTL != ''">
					JUSO_DTL = #{JUSO_DTL},
				</if>
				<if test="ADM_MEMO != null and ADM_MEMO != ''">
					ADM_MEMO = #{ADM_MEMO},
				</if>
				<if test="U_CHG_PROC_TYPE_CD != null and U_CHG_PROC_TYPE_CD != ''">
					CHG_PROC_TYPE_CD = #{U_CHG_PROC_TYPE_CD}
				</if>
			</set> 
		 WHERE CHG_CD = #{U_CHG_CD}
		   AND ORD_CD = #{U_ORD_CD}
	</update>
	
	<!-- 교환/반품 상품 운송장 정보 등록 -->
	<insert id="insertInvc" parameterType="hashmap">
		INSERT INTO CHG_INVC_INFO (
			 ORD_CD
			 , CHG_CD
			 , PROD_CODE
			 , PROD_SEQ
			 , INVC_NO
			 , DLV_CMP_CD
			 , DLV_STAT_CD
			 , DLV_START_DT
			 , REGIST_DT
			 , UPDT_DT
		) VALUES (
			 #{U_ORD_CD}
			 , #{U_CHG_CD}
			 , #{U_PROD_CODE}
			 , #{U_PROD_SEQ}
			 , #{INVC_NO}
			 , #{DLV_CMP_CD}
			 , '10'
			 , #{DLV_START_DT}
			 , SYSDATE
			 , SYSDATE
		)
	</insert>
	
	<!-- 교환/반품 상품 처리상태 변경 -->
	<update id="updateProcStat" parameterType="hashmap">
		UPDATE CHG_PROD_INFO
		   SET PROC_STAT_CD = #{U_CHG_PROC_TYPE_CD}
		 WHERE CHG_CD = #{U_CHG_CD}
		   AND ORD_CD = #{U_ORD_CD}
		   AND PROD_CODE = #{U_PROD_CODE}
		   AND PROD_SEQ = #{U_PROD_SEQ}
	</update>
	
	<!-- 교환/반품 상품 배송지 처리상태 변경 -->
	<update id="updateInvcProcStat" parameterType="hashmap">
		UPDATE CHG_INVC_INFO
		   SET DLV_STAT_CD = '20'
			 , DLV_END_DT = SYSDATE
		 WHERE CHG_CD = #{U_CHG_CD}
		   AND ORD_CD = #{U_ORD_CD}
		   AND PROD_CODE = #{U_PROD_CODE}
		   AND PROD_SEQ = #{U_PROD_SEQ}
	</update>
	
	<!-- 교환/반품 상품 배송지 정보 변경 (택배사정보) -->
	<update id="updateInvc" parameterType="hashmap">
		UPDATE CHG_INVC_INFO
		   SET INVC_NO = #{INVC_NO}
			 , DLV_CMP_CD = #{DLV_CMP_CD}
			 , DLV_START_DT = #{DLV_START_DT}
		 WHERE CHG_CD = #{U_CHG_CD}
		   AND ORD_CD = #{U_ORD_CD}
		   AND PROD_CODE = #{U_PROD_CODE}
		   AND PROD_SEQ = #{U_PROD_SEQ}
	</update>
	
	<!-- 교환/반품 신청 이력 저장 -->
	<insert id="insertRfndHist" parameterType="hashmap">
		INSERT INTO ORD_PROD_INFO_HIST (
			 ORD_CD
			 , PROD_CODE
			 , PROD_SEQ
			 , PROC_SEQ
			 , PROC_STAT_CD
			 , ADM_ID
			 , REGIST_DT
		) VALUES (
			 #{U_ORD_CD}
			 , #{U_PROD_CODE}
			 , #{U_PROD_SEQ}
			 , (SELECT MAX(PROC_SEQ +1) FROM ORD_PROD_INFO_HIST WHERE ORD_CD = #{U_ORD_CD} AND PROD_CODE = #{U_PROD_CODE})
			 , #{U_CHG_PROC_TYPE_CD}
			 , #{ADM_ID}
			 , SYSDATE
		)
	</insert>
	
	<!-- 주문 취소 조회 ROW 카운트 수 -->
	<select id="selectListCnclCount" parameterType="hashmap" resultType="int">
		SELECT COUNT(1)
		FROM ORD_PROD_INFO A
		INNER JOIN ORD_INFO B ON (B.ORD_CD = A.ORD_CD)
		INNER JOIN ORD_CANC_INFO C ON (C.CANC_CD = A.CANC_CD)
		INNER JOIN PROD D ON (D.PROD_CODE = A.PROD_CODE)
		INNER JOIN PROD_IMG E ON (E.PROD_CODE = A.PROD_CODE)
		INNER JOIN MBER_INFO F ON (F.MBER_SEQ = B.MBER_ID)
		WHERE A.PROC_STAT_CD = '50'
		<if test="S_DATE_OPTION == '01' and S_START_DATE != null and S_START_DATE != ''">
		  AND C.CANC_DT BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="PROD_GB_ARR != null and PROD_GB_ARR != ''">
		   AND D.PROD_TYPE_CD IN
			<foreach item="item" index="index" collection="PROD_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
	</select>
	
	<!-- 주문 취소 조회 -->
	<select id="selectListCncl" resultType="hashmap">
		<include refid="adminCommonMapper.pagingHeader" />
		SELECT C.CANC_DT
			 , A.ORD_CD
			 , F.MBER_GB_CD
			 , F.MBER_EMAIL
			 , D.PROD_CODE
			 , D.PROD_TYPE_CD
			 , D.PROD_NM
			 , E.PROD_IMG_URL
			 , B.REAL_SETL_AMT
			 , ROW_NUMBER() OVER(ORDER BY C.CANC_DT DESC ) AS NO
		FROM ORD_PROD_INFO A
		INNER JOIN ORD_INFO B ON (B.ORD_CD = A.ORD_CD)
		INNER JOIN ORD_CANC_INFO C ON (C.CANC_CD = A.CANC_CD)
		INNER JOIN PROD D ON (D.PROD_CODE = A.PROD_CODE)
		INNER JOIN PROD_IMG E ON (E.PROD_CODE = A.PROD_CODE)
		INNER JOIN MBER_INFO F ON (F.MBER_SEQ = B.MBER_ID)
		WHERE A.PROC_STAT_CD = '50'
		<if test="S_DATE_OPTION == '01' and S_START_DATE != null and S_START_DATE != ''">
		  AND C.CANC_DT BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		</if>
		<if test="S_SEARCH_WORD != null and S_SEARCH_WORD != ''">
		   AND ( A.ORD_CD = #{S_SEARCH_WORD} OR F.MBER_EMAIL = #{S_SEARCH_WORD} OR F.MBER_EMAIL = #{S_SEARCH_WORD} OR D.PROD_NM = #{S_SEARCH_WORD} OR A.PROD_CODE = #{S_SEARCH_WORD} )
		</if>
		<if test="PROD_GB_ARR != null and PROD_GB_ARR != ''">
		   AND D.PROD_TYPE_CD IN
			<foreach item="item" index="index" collection="PROD_GB_ARR" open="(" separator="," close=")">
				#{item}
			</foreach>
		</if>
		ORDER BY C.CANC_DT DESC
		<include refid="adminCommonMapper.pagingFooter" />
	</select>
	
	<!-- 주문 취소 상세 -->
	<select id="selectCnclDtl" parameterType="hashmap" resultType="hashmap">
		SELECT C.ORD_REG_DATE				<!-- 주문일시 -->
			 , A.ORD_CD						<!-- 주문번호 -->
			 , D.PROD_TYPE_CD				<!-- 상품판매코드 -->
			 , C.ORD_EMAIL					<!-- 주문자EMAIL -->
			 , C.ORD_AMT					<!-- 주문금액 -->
			 , A.PROC_STAT_CD				<!-- 주문처리상태 -->
			 , A.PROD_ORD_AMT				<!-- 상품금액 -->
			 , 10000 AS OTP_AMT				<!-- 옵션금액 -->
			 , A.DLV_PRCE					<!-- 배송비 -->
			 , 1000 AS POINT_AMT			<!-- 포인트 -->
			 , A.CPN_USE_AMT				<!-- 쿠폰 -->
			 , C.SELT_GB_CD					<!-- 결제수단코드 -->
			 , C.ORD_NM						<!-- 입금자명 -->
			 , B.CANC_DT					<!-- 취소신청일시 -->
			 , D.PROD_NM					<!-- 상품명 -->
			 , E.PROD_IMG_URL				<!-- 상품이미지 -->
			 , B.CANC_REASON				<!-- 취소사유 -->
		  FROM ORD_PROD_INFO A
		 INNER JOIN ORD_CANC_INFO B ON (B.CANC_CD = A.CANC_CD)
		 INNER JOIN ORD_INFO C ON (C.ORD_CD = A.ORD_CD)
		 INNER JOIN PROD D ON (D.PROD_CODE = A.PROD_CODE)
		 INNER JOIN PROD_IMG E ON (E.PROD_CODE = A.PROD_CODE)
		 WHERE A.ORD_CD = #{P_ORD_CD}
	</select>
	
	
	
	
	<!-- 주문관리 - 나눔상품 ======================================================================== -->
	
	<!-- 판매 주문 내역 총 건수 -->
	<select id="selectListOrderSellTotCnt" parameterType="hashmap" resultType="int">
	
		SELECT COUNT(*)
		  FROM (
		  		SELECT ROW_NUMBER() OVER(ORDER BY INFO.ORD_REGIST_DT DESC, INFO.SELLER_MBER_SEQ) AS NO
				      ,INFO.ORD_CD
				      ,INFO.ORD_REGIST_DT
				      ,INFO.ORD_MBER_SEQ
				      ,INFO.ORD_MBER_NM
				      ,INFO.ORD_MBER_EMAIL
				      ,INFO.SELLER_MBER_SEQ
				      ,INFO.SELLER_MBER_NM
				      ,INFO.SELLER_MBER_EMAIL
				      ,INFO.PROC_STAT_CD
				      ,INFO.PROC_STAT_CD_NM
				      ,INFO.PROD_IMG_URL
				      ,INFO.PROD_NM
				      ,INFO.SELL_PRCE
				      ,INFO.ORD_QTY
				      ,INFO.SELL_PRCE_SUM
				      ,INFO.DLV_PRCE
				      ,INFO.CPN_USE_AMT
				      ,INFO.ORD_AMT
				      ,INFO.POINT_USE_AMT
				      ,INFO.REAL_SELT_AMT
				      ,INFO.SELT_GB_CD
				      ,INFO.SELT_GB_CD_NM
				      ,INFO.PROD_SEQ
				      ,(SELECT COUNT(1) FROM ORD_PROD_INFO WHERE ORD_CD = INFO.ORD_CD) AS ORD_SPAN_CNT 
				      ,(
				        SELECT COUNT(1)
				          FROM ORD_PROD_INFO A
				              ,PROD B
				              ,MBER_INFO C
				         WHERE A.PROD_CODE = B.PROD_CODE
				           AND B.MBER_SEQ = C.MBER_SEQ
				           AND A.ORD_CD = INFO.ORD_CD
				           AND C.MBER_SEQ = INFO.SELLER_MBER_SEQ
				        ) AS ORD_MBER_CNT
				  FROM (
				        SELECT OI.ORD_CD       
				              ,OI.REGIST_DT AS ORD_REGIST_DT
				              ,OI.MBER_SEQ AS ORD_MBER_SEQ
				              ,(SELECT MBER_NM FROM MBER_INFO WHERE MBER_SEQ = OI.MBER_SEQ) AS ORD_MBER_NM
				              ,(SELECT MBER_EMAIL FROM MBER_INFO WHERE MBER_SEQ = OI.MBER_SEQ) AS ORD_MBER_EMAIL
				              ,MI.MBER_SEQ AS SELLER_MBER_SEQ
				              ,MI.MBER_NM AS SELLER_MBER_NM
				              ,MI.MBER_EMAIL AS SELLER_MBER_EMAIL
				              ,OPI.PROC_STAT_CD
				              ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'PROC_STAT_CD' AND COM_CD = OPI.PROC_STAT_CD) AS PROC_STAT_CD_NM
				              ,(SELECT PROD_IMG_URL FROM PROD_IMG WHERE PROD_CODE = PI.PROD_CODE AND PROD_IMG_GB_CD = '11') AS PROD_IMG_URL
				              ,PI.PROD_NM
				              ,PI.SELL_PRCE
				              ,OPI.ORD_QTY
				              ,(PI.SELL_PRCE * OPI.ORD_QTY) AS SELL_PRCE_SUM
				              ,OPI.DLV_PRCE
				              ,OPI.CPN_USE_AMT
				              ,(((SELL_PRCE * ORD_QTY)+OPI.DLV_PRCE)-NVL(OPI.CPN_USE_AMT,0)) AS ORD_AMT
				              ,NVL(OI.POINT_USE_AMT, 0) AS POINT_USE_AMT
				              ,OI.REAL_SELT_AMT
				              ,OI.SELT_GB_CD
				              ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'SELT_GB_CD' AND COM_CD = OI.SELT_GB_CD) AS SELT_GB_CD_NM
				              ,OPI.PROD_SEQ
				          FROM ORD_INFO OI
				              ,ORD_PROD_INFO OPI
				              ,PROD PI
				              ,MBER_INFO MI
				         WHERE OI.ORD_CD = OPI.ORD_CD
				           AND OPI.PROD_CODE = PI.PROD_CODE
				           AND PI.MBER_SEQ = MI.MBER_SEQ
				           AND PI.PROD_TYPE_CD = '1'
				        ORDER BY OI.ORD_REG_DATE DESC, MI.MBER_SEQ
				       ) INFO
				 WHERE TO_CHAR(INFO.ORD_REGIST_DT , 'YYYYMMDD') BETWEEN #{S_START_DATE} AND #{S_END_DATE}
				<if test="PROD_NM != null and PROD_NM != ''">
		  		   AND INFO.PROD_NM LIKE '%'||#{PROD_NM}||'%'
				</if>
				<if test="ORD_CD != null and ORD_CD != ''">
				   AND INFO.ORD_CD = #{ORD_CD}
				</if>
				<if test="SEARCH_NM != null and SEARCH_NM != ''">
					<if test='SEARCH_GB == "1"'>
						AND INFO.SELLER_MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "2"'>
						AND INFO.SELLER_MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "3"'>
						AND INFO.ORD_MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "4"'>
						AND INFO.ORD_MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
					</if>
				</if>
				<if test="SELT_GB_CD != null and SELT_GB_CD != ''">
				   AND INFO.SELT_GB_CD IN
					<foreach collection="SELT_GB_CD" item="cd" open="(" close=")" separator=",">
				  		#{cd}
				  	</foreach>
			  	</if>
				<if test="PROC_STAT_CD != null and PROC_STAT_CD != ''">
				   AND INFO.PROC_STAT_CD IN
					<foreach collection="PROC_STAT_CD" item="cd" open="(" close=")" separator=",">
				  		#{cd}
				  	</foreach>
			  	</if>
			  	<if test="MBER_GB_CD != null and MBER_GB_CD != ''">
				   AND INFO.SELLER_MBER_GB_CD = #{MBER_GB_CD}
				</if>
		  	   )
		
	</select>
	
	<!-- 판매 주문 내역 리스트 조회 -->
	<select id="selectListOrderSell" parameterType="hashmap" resultType="hashmap">
	
		<include refid="adminCommonMapper.pagingHeader" />
		SELECT ROW_NUMBER() OVER(ORDER BY INFO.ORD_REGIST_DT DESC, INFO.SELLER_MBER_SEQ) AS NO
		      ,INFO.ORD_CD
		      ,INFO.ORD_REGIST_DT
		      ,INFO.ORD_MBER_SEQ
		      ,INFO.ORD_MBER_NM
		      ,INFO.ORD_MBER_EMAIL
		      ,INFO.SELLER_MBER_SEQ
		      ,INFO.SELLER_MBER_GB_CD
		      ,INFO.SELLER_MBER_NM
		      ,INFO.SELLER_MBER_EMAIL
		      ,INFO.PROD_CODE
		      ,INFO.PROC_STAT_CD
		      ,INFO.PROD_IMG_URL
		      ,INFO.PROD_NM
		      ,INFO.SELL_PRCE
		      ,INFO.ORD_QTY
		      ,INFO.SELL_PRCE_SUM
		      ,INFO.DLV_PRCE
		      ,INFO.CPN_USE_AMT
		      ,INFO.ORD_AMT
		      ,INFO.POINT_USE_AMT
		      ,INFO.REAL_SELT_AMT
		      ,INFO.SELT_GB_CD
		      ,INFO.SELT_GB_CD_NM
		      ,INFO.PROD_SEQ
		      ,(SELECT COUNT(1) FROM ORD_PROD_INFO WHERE ORD_CD = INFO.ORD_CD) AS ORD_SPAN_CNT 
		      ,(
		        SELECT COUNT(1)
		          FROM ORD_PROD_INFO A
		              ,PROD B
		              ,MBER_INFO C
		         WHERE A.PROD_CODE = B.PROD_CODE
		           AND B.MBER_SEQ = C.MBER_SEQ
		           AND A.ORD_CD = INFO.ORD_CD
		           AND C.MBER_SEQ = INFO.SELLER_MBER_SEQ
		        ) AS ORD_MBER_CNT
		  FROM (
		        SELECT OI.ORD_CD       
		              ,OI.REGIST_DT AS ORD_REGIST_DT
		              ,OI.MBER_SEQ AS ORD_MBER_SEQ
		              ,(SELECT MBER_NM FROM MBER_INFO WHERE MBER_SEQ = OI.MBER_SEQ) AS ORD_MBER_NM
		              ,(SELECT MBER_EMAIL FROM MBER_INFO WHERE MBER_SEQ = OI.MBER_SEQ) AS ORD_MBER_EMAIL
		              ,MI.MBER_SEQ AS SELLER_MBER_SEQ
		              ,MI.MBER_GB_CD AS SELLER_MBER_GB_CD
		              ,MI.MBER_NM AS SELLER_MBER_NM
		              ,MI.MBER_EMAIL AS SELLER_MBER_EMAIL
		              ,OPI.PROC_STAT_CD
		              ,PI.PROD_CODE
		              ,(SELECT PROD_IMG_URL FROM PROD_IMG WHERE PROD_CODE = PI.PROD_CODE AND PROD_IMG_GB_CD = '11') AS PROD_IMG_URL
		              ,PI.PROD_NM
		              ,PI.SELL_PRCE
		              ,OPI.ORD_QTY
		              ,(PI.SELL_PRCE * OPI.ORD_QTY) AS SELL_PRCE_SUM
		              ,OPI.DLV_PRCE
		              ,OPI.CPN_USE_AMT
		              ,(((SELL_PRCE * ORD_QTY)+OPI.DLV_PRCE)-NVL(OPI.CPN_USE_AMT,0)) AS ORD_AMT
		              ,NVL(OI.POINT_USE_AMT, 0) AS POINT_USE_AMT
		              ,OI.REAL_SELT_AMT
		              ,OI.SELT_GB_CD
		              ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'SELT_GB_CD' AND COM_CD = OI.SELT_GB_CD) AS SELT_GB_CD_NM
		              ,OPI.PROD_SEQ
		          FROM ORD_INFO OI
		              ,ORD_PROD_INFO OPI
		              ,PROD PI
		              ,MBER_INFO MI
		         WHERE OI.ORD_CD = OPI.ORD_CD
		           AND OPI.PROD_CODE = PI.PROD_CODE
		           AND PI.MBER_SEQ = MI.MBER_SEQ
		           AND PI.PROD_TYPE_CD = '1'
		        ORDER BY OI.ORD_REG_DATE DESC, MI.MBER_SEQ
		       ) INFO
		 WHERE TO_CHAR(INFO.ORD_REGIST_DT , 'YYYYMMDD') BETWEEN #{S_START_DATE} AND #{S_END_DATE}
		<if test="PROD_NM != null and PROD_NM != ''">
  		   AND INFO.PROD_NM LIKE '%'||#{PROD_NM}||'%'
		</if>
		<if test="ORD_CD != null and ORD_CD != ''">
		   AND INFO.ORD_CD = #{ORD_CD}
		</if>
		<if test="SEARCH_NM != null and SEARCH_NM != ''">
			<if test='SEARCH_GB == "1"'>
				AND INFO.SELLER_MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
			</if>
			<if test='SEARCH_GB == "2"'>
				AND INFO.SELLER_MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
			</if>
			<if test='SEARCH_GB == "3"'>
				AND INFO.ORD_MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
			</if>
			<if test='SEARCH_GB == "4"'>
				AND INFO.ORD_MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
			</if>
		</if>
		<if test="SELT_GB_CD != null and SELT_GB_CD != ''">
		   AND INFO.SELT_GB_CD IN
			<foreach collection="SELT_GB_CD" item="cd" open="(" close=")" separator=",">
		  		#{cd}
		  	</foreach>
	  	</if>
		<if test="PROC_STAT_CD != null and PROC_STAT_CD != ''">
		   AND INFO.PROC_STAT_CD IN
			<foreach collection="PROC_STAT_CD" item="cd" open="(" close=")" separator=",">
		  		#{cd}
		  	</foreach>
	  	</if>
	  	<if test="MBER_GB_CD != null and MBER_GB_CD != ''">
		   AND INFO.SELLER_MBER_GB_CD = #{MBER_GB_CD}
		</if>
		<include refid="adminCommonMapper.pagingFooter" />
	
	</select>
	
	<!-- // 주문관리 - 나눔상품 ======================================================================== -->
	
	
	<!-- 주문관리 - 나눔상품 ======================================================================== -->
	
	<!-- 나눔 내역 총 건수 -->
	<select id="selectFreeShareTotCnt" parameterType="hashmap" resultType="int">
	
		SELECT COUNT(1)
		  FROM (
				SELECT INFO.PROD_CODE
					  ,INFO.PROD_NM
					  ,INFO.PROD_TYPE_CD
					  ,INFO.DLV_WAY_CD
					  ,TO_CHAR(INFO.FREESHARE_START_DT, 'YYYY-MM-DD HH24:MI') AS REGIST_DT
					  ,TO_CHAR(INFO.FREESHARE_START_DT, 'YYYY-MM-DD') AS FREESHARE_START_DT
					  ,TO_CHAR(INFO.FREESHARE_END_DT, 'YYYY-MM-DD') AS FREESHARE_END_DT
					  ,INFO.SELLER_MBER_EMAIL AS SELLER_MBER_EMAIL
					  ,INFO.SELLER_MBER_NM AS SELLER_MBER_NM
					  ,INFO.MBER_GB_CD_NM AS MBER_GB_CD_NM
					  ,INFO.REQ_CNT
					  ,INFO.PROD_IMG_URL
					  ,INFO.ORD_CD
					  ,TO_CHAR(INFO.ORD_REGIST_DT, 'YYYY-MM-DD HH24:MI') AS ORD_REGIST_DT
					  ,INFO.PROC_STAT_CD
					  ,INFO.PROD_SEQ
					  ,INFO.ORD_MBER_SEQ AS ORD_MBER_SEQ
					  ,OMI.MBER_EMAIL AS ORD_MBER_EMAIL
					  ,OMI.MBER_NM AS ORD_MBER_NM
				  FROM (
						SELECT X.CNT AS REQ_CNT
							  ,X.PROD_CODE AS PROD_CODE
							  ,X.PROD_NM AS PROD_NM
							  ,X.PROD_TYPE_CD AS PROD_TYPE_CD
							  ,X.DLV_WAY_CD AS DLV_WAY_CD
							  ,X.FREESHARE_START_DT AS FREESHARE_START_DT
							  ,X.FREESHARE_END_DT AS FREESHARE_END_DT    
							  ,X.SELLER_MBER_EMAIL AS SELLER_MBER_EMAIL
							  ,X.SELLER_MBER_NM AS SELLER_MBER_NM
							  ,X.MBER_GB_CD_NM AS MBER_GB_CD_NM
							  ,OPI.ORD_CD AS ORD_CD
							  ,OPI.REGIST_DT AS ORD_REGIST_DT
							  ,NVL(OPI.PROC_STAT_CD, '97') AS PROC_STAT_CD
							  ,OPI.PROD_SEQ AS PROD_SEQ
							  ,OPI.MBER_SEQ AS ORD_MBER_SEQ
							  ,IMG.PROD_IMG_URL
						  FROM (
								SELECT COUNT(PI.PROD_CODE) AS CNT 
									  ,PI.PROD_CODE
									  ,PI.PROD_NM
									  ,PI.PROD_TYPE_CD
									  ,PI.DLV_WAY_CD
									  ,PI.REGIST_DT AS FREESHARE_START_DT
									  ,PI.FREESHARE_END_DT
									  ,MI.MBER_EMAIL AS SELLER_MBER_EMAIL
									  ,MI.MBER_NM AS SELLER_MBER_NM
									  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'MBER_GB_CD' AND COM_CD = MI.MBER_GB_CD) AS MBER_GB_CD_NM
								  FROM PROD PI ,PROD_SUBMIT_INFO PSI, MBER_INFO MI
								 WHERE PI.PROD_CODE = PSI.PROD_CODE
								   AND PI.MBER_SEQ = MI.MBER_SEQ
								   AND PI.PROD_TYPE_CD = '3'
								   AND TO_CHAR(PI.REGIST_DT , 'YYYYMMDD') BETWEEN #{S_START_DATE} AND #{S_END_DATE}
								GROUP BY PI.PROD_CODE, PI.PROD_NM, PI.PROD_TYPE_CD, PI.DLV_WAY_CD, PI.REGIST_DT, PI.FREESHARE_END_DT, MI.MBER_EMAIL, MI.MBER_NM, MI.MBER_GB_CD
							   )X LEFT OUTER JOIN ORD_PROD_INFO OPI ON X.PROD_CODE = OPI.PROD_CODE
								  LEFT OUTER JOIN PROD_IMG IMG ON X.PROD_CODE = IMG.PROD_CODE AND IMG.PROD_IMG_GB_CD = '11'
					   ) INFO LEFT OUTER JOIN MBER_INFO OMI ON INFO.ORD_MBER_SEQ = OMI.MBER_SEQ
				 WHERE 1=1
				<if test="PROD_NM != null and PROD_NM != ''">
				   AND INFO.PROD_NM LIKE '%'||#{PROD_NM}||'%'
				</if>
				<if test="ORD_CD != null and ORD_CD != ''">
				   AND INFO.ORD_CD = #{ORD_CD}
				</if>
				<if test="SEARCH_NM != null and SEARCH_NM != ''">
					<if test='SEARCH_GB == "1"'>
						AND INFO.SELLER_MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "2"'>
						AND INFO.SELLER_MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "3"'>
						AND OMI.MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "4"'>
						AND OMI.MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
					</if>
				</if>
				<if test="PROC_STAT_CD != null and PROC_STAT_CD != ''">
				   AND INFO.PROC_STAT_CD IN
					<foreach collection="PROC_STAT_CD" item="cd" open="(" close=")" separator=",">
				  		#{cd}
				  	</foreach>
			  	</if>
			   )
		
	</select>
	
	<!-- 나눔 내역 리스트 조회 -->
	<select id="selectListFreeShare" parameterType="hashmap" resultType="hashmap">
	
		<include refid="adminCommonMapper.pagingHeader" />
			SELECT ROW_NUMBER() OVER(ORDER BY FREE.REGIST_DT DESC ) AS NO
				  ,FREE.PROD_CODE
				  ,FREE.PROD_NM
				  ,FREE.PROD_TYPE_CD
				  ,FREE.DLV_WAY_CD
				  ,FREE.REGIST_DT
				  ,FREE.FREESHARE_START_DT
				  ,FREE.FREESHARE_END_DT
				  ,FREE.SELLER_MBER_EMAIL
				  ,FREE.SELLER_MBER_NM
				  ,FREE.MBER_GB_CD_NM
				  ,FREE.REQ_CNT
				  ,FREE.PROD_IMG_URL
				  ,FREE.ORD_CD
				  ,FREE.ORD_REGIST_DT
				  ,FREE.PROC_STAT_CD
				  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'PROC_STAT_CD' AND COM_CD = FREE.PROC_STAT_CD) AS PROC_STAT_CD_NM
				  ,FREE.PROD_SEQ
				  ,FREE.ORD_MBER_SEQ
				  ,FREE.ORD_MBER_EMAIL
				  ,FREE.ORD_MBER_NM
			  FROM (
					SELECT INFO.PROD_CODE
						  ,INFO.PROD_NM
						  ,INFO.PROD_TYPE_CD
						  ,INFO.DLV_WAY_CD
						  ,TO_CHAR(INFO.FREESHARE_START_DT, 'YYYY-MM-DD HH24:MI') AS REGIST_DT
						  ,TO_CHAR(INFO.FREESHARE_START_DT, 'YYYY-MM-DD') AS FREESHARE_START_DT
						  ,TO_CHAR(INFO.FREESHARE_END_DT, 'YYYY-MM-DD') AS FREESHARE_END_DT
						  ,INFO.SELLER_MBER_EMAIL AS SELLER_MBER_EMAIL
						  ,INFO.SELLER_MBER_NM AS SELLER_MBER_NM
						  ,INFO.MBER_GB_CD_NM AS MBER_GB_CD_NM
						  ,INFO.REQ_CNT
						  ,INFO.PROD_IMG_URL
						  ,INFO.ORD_CD
						  ,TO_CHAR(INFO.ORD_REGIST_DT, 'YYYY-MM-DD HH24:MI') AS ORD_REGIST_DT
						  ,INFO.PROC_STAT_CD
						  ,INFO.PROD_SEQ
						  ,INFO.ORD_MBER_SEQ AS ORD_MBER_SEQ
						  ,OMI.MBER_EMAIL AS ORD_MBER_EMAIL
						  ,OMI.MBER_NM AS ORD_MBER_NM
					  FROM (
							SELECT X.CNT AS REQ_CNT
								  ,X.PROD_CODE AS PROD_CODE
								  ,X.PROD_NM AS PROD_NM
								  ,X.PROD_TYPE_CD AS PROD_TYPE_CD
								  ,X.DLV_WAY_CD AS DLV_WAY_CD
								  ,X.FREESHARE_START_DT AS FREESHARE_START_DT
								  ,X.FREESHARE_END_DT AS FREESHARE_END_DT    
								  ,X.SELLER_MBER_EMAIL AS SELLER_MBER_EMAIL
								  ,X.SELLER_MBER_NM AS SELLER_MBER_NM
								  ,X.MBER_GB_CD_NM AS MBER_GB_CD_NM
								  ,OPI.ORD_CD AS ORD_CD
								  ,OPI.REGIST_DT AS ORD_REGIST_DT
								  ,NVL(OPI.PROC_STAT_CD, '97') AS PROC_STAT_CD
								  ,OPI.PROD_SEQ AS PROD_SEQ
								  ,OPI.MBER_SEQ AS ORD_MBER_SEQ
								  ,IMG.PROD_IMG_URL
							  FROM (
									SELECT COUNT(PI.PROD_CODE) AS CNT 
										  ,PI.PROD_CODE
										  ,PI.PROD_NM
										  ,PI.PROD_TYPE_CD
										  ,PI.DLV_WAY_CD
										  ,PI.REGIST_DT AS FREESHARE_START_DT
										  ,PI.FREESHARE_END_DT
										  ,MI.MBER_EMAIL AS SELLER_MBER_EMAIL
										  ,MI.MBER_NM AS SELLER_MBER_NM
										  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'MBER_GB_CD' AND COM_CD = MI.MBER_GB_CD) AS MBER_GB_CD_NM
									  FROM PROD PI ,PROD_SUBMIT_INFO PSI, MBER_INFO MI
									 WHERE PI.PROD_CODE = PSI.PROD_CODE
									   AND PI.MBER_SEQ = MI.MBER_SEQ
									   AND PI.PROD_TYPE_CD = '3'
									   AND TO_CHAR(PI.REGIST_DT , 'YYYYMMDD') BETWEEN #{S_START_DATE} AND #{S_END_DATE}
									GROUP BY PI.PROD_CODE, PI.PROD_NM, PI.PROD_TYPE_CD, PI.DLV_WAY_CD, PI.REGIST_DT, PI.FREESHARE_END_DT, MI.MBER_EMAIL, MI.MBER_NM, MI.MBER_GB_CD
								   )X LEFT OUTER JOIN ORD_PROD_INFO OPI ON X.PROD_CODE = OPI.PROD_CODE
									  LEFT OUTER JOIN PROD_IMG IMG ON X.PROD_CODE = IMG.PROD_CODE AND IMG.PROD_IMG_GB_CD = '11'
						   ) INFO LEFT OUTER JOIN MBER_INFO OMI ON INFO.ORD_MBER_SEQ = OMI.MBER_SEQ
					 WHERE 1=1
					<if test="PROD_NM != null and PROD_NM != ''">
					   AND INFO.PROD_NM LIKE '%'||#{PROD_NM}||'%'
					</if>
					<if test="ORD_CD != null and ORD_CD != ''">
					   AND INFO.ORD_CD = #{ORD_CD}
					</if>
					<if test="SEARCH_NM != null and SEARCH_NM != ''">
						<if test='SEARCH_GB == "1"'>
							AND INFO.SELLER_MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
						</if>
						<if test='SEARCH_GB == "2"'>
							AND INFO.SELLER_MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
						</if>
						<if test='SEARCH_GB == "3"'>
							AND OMI.MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
						</if>
						<if test='SEARCH_GB == "4"'>
							AND OMI.MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
						</if>
					</if>
					<if test="PROC_STAT_CD != null and PROC_STAT_CD != ''">
					   AND INFO.PROC_STAT_CD IN
						<foreach collection="PROC_STAT_CD" item="cd" open="(" close=")" separator=",">
					  		#{cd}
					  	</foreach>
				  	</if>
				  	ORDER BY INFO.ORD_REGIST_DT DESC
				  ) FREE
		<include refid="adminCommonMapper.pagingFooter" />	  
		
	</select>
	
	<!-- 나눔내역 엑셀다운로드 조회 -->
	<select id="selectListFreeShareExcel" parameterType="hashmap" resultType="hashmap">
	
		SELECT FREE.PROD_CODE
			  ,FREE.PROD_NM
			  ,FREE.PROD_TYPE_CD
			  ,FREE.DLV_WAY_CD
			  ,FREE.REGIST_DT
			  ,FREE.FREESHARE_START_DT
			  ,FREE.FREESHARE_END_DT
			  ,FREE.SELLER_MBER_EMAIL
			  ,FREE.SELLER_MBER_NM
			  ,FREE.MBER_GB_CD_NM
			  ,FREE.REQ_CNT
			  ,FREE.ORD_CD
			  ,FREE.ORD_REGIST_DT
			  ,FREE.PROC_STAT_CD
			  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'PROC_STAT_CD' AND COM_CD = FREE.PROC_STAT_CD) AS PROC_STAT_CD_NM
			  ,FREE.PROD_SEQ
			  ,FREE.ORD_MBER_SEQ
			  ,FREE.ORD_MBER_EMAIL
			  ,FREE.ORD_MBER_NM
			  ,FREE.RCV_NM
			  ,FREE.RCV_TEL
			  ,FREE.ZIP_CD
			  ,FREE.JUSO_JIBEN || ' ' || FREE.JUSO_DTL AS JUSO_JIBEN
			  ,FREE.JUSO_DORO || ' ' || FREE.JUSO_DTL AS JUSO_DORO
			  ,FREE.DLV_MSG
			  ,COMM.COM_CD_NM
			  ,FREE.INVC_NO
			  ,FREE.DLV_START_DT
			  ,FREE.DLV_END_DT
		  FROM (
				SELECT INFO.PROD_CODE
					  ,INFO.PROD_NM
					  ,INFO.PROD_TYPE_CD
					  ,INFO.DLV_WAY_CD
					  ,TO_CHAR(INFO.FREESHARE_START_DT, 'YYYY-MM-DD HH24:MI') AS REGIST_DT
					  ,TO_CHAR(INFO.FREESHARE_START_DT, 'YYYY-MM-DD') AS FREESHARE_START_DT
					  ,TO_CHAR(INFO.FREESHARE_END_DT, 'YYYY-MM-DD') AS FREESHARE_END_DT
					  ,INFO.SELLER_MBER_EMAIL AS SELLER_MBER_EMAIL
					  ,INFO.SELLER_MBER_NM AS SELLER_MBER_NM
					  ,INFO.MBER_GB_CD_NM AS MBER_GB_CD_NM
					  ,INFO.REQ_CNT
					  ,INFO.ORD_CD
					  ,TO_CHAR(INFO.ORD_REGIST_DT, 'YYYY-MM-DD HH24:MI') AS ORD_REGIST_DT
					  ,INFO.PROC_STAT_CD
					  ,INFO.PROD_SEQ
					  ,INFO.ORD_MBER_SEQ AS ORD_MBER_SEQ
					  ,OMI.MBER_EMAIL AS ORD_MBER_EMAIL
					  ,OMI.MBER_NM AS ORD_MBER_NM
					  ,INFO.RCV_NM
		              ,INFO.RCV_TEL
		              ,INFO.ZIP_CD
		              ,INFO.JUSO_JIBEN
		              ,INFO.JUSO_DORO
		              ,INFO.JUSO_DTL
		              ,INFO.DLV_MSG
		              ,II.DLV_CMP_CD
		              ,II.INVC_NO
		              ,TO_CHAR(II.DLV_START_DT, 'YYYY-MM-DD HH24:MI') AS DLV_START_DT
		              ,TO_CHAR(II.DLV_END_DT, 'YYYY-MM-DD HH24:MI') AS DLV_END_DT
				  FROM (
						SELECT X.CNT AS REQ_CNT
							  ,X.PROD_CODE AS PROD_CODE
							  ,X.PROD_NM AS PROD_NM
							  ,X.PROD_TYPE_CD AS PROD_TYPE_CD
							  ,X.DLV_WAY_CD AS DLV_WAY_CD
							  ,X.FREESHARE_START_DT AS FREESHARE_START_DT
							  ,X.FREESHARE_END_DT AS FREESHARE_END_DT    
							  ,X.SELLER_MBER_EMAIL AS SELLER_MBER_EMAIL
							  ,X.SELLER_MBER_NM AS SELLER_MBER_NM
							  ,X.MBER_GB_CD_NM AS MBER_GB_CD_NM
							  ,OPI.ORD_CD AS ORD_CD
							  ,OPI.REGIST_DT AS ORD_REGIST_DT
							  ,NVL(OPI.PROC_STAT_CD, '97') AS PROC_STAT_CD
							  ,OPI.PROD_SEQ AS PROD_SEQ
							  ,OPI.MBER_SEQ AS ORD_MBER_SEQ
							  ,ODI.RCV_NM
			                  ,ODI.RCV_TEL
			                  ,ODI.ZIP_CD
			                  ,ODI.JUSO_JIBEN
			                  ,ODI.JUSO_DORO
			                  ,ODI.JUSO_DTL
			                  ,ODI.DLV_MSG
						  FROM (
								SELECT COUNT(PI.PROD_CODE) AS CNT 
									  ,PI.PROD_CODE
									  ,PI.PROD_NM
									  ,PI.PROD_TYPE_CD
									  ,PI.DLV_WAY_CD
									  ,PI.REGIST_DT AS FREESHARE_START_DT
									  ,PI.FREESHARE_END_DT
									  ,MI.MBER_EMAIL AS SELLER_MBER_EMAIL
									  ,MI.MBER_NM AS SELLER_MBER_NM
									  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'MBER_GB_CD' AND COM_CD = MI.MBER_GB_CD) AS MBER_GB_CD_NM
								  FROM PROD PI ,PROD_SUBMIT_INFO PSI, MBER_INFO MI
								 WHERE PI.PROD_CODE = PSI.PROD_CODE
								   AND PI.MBER_SEQ = MI.MBER_SEQ
								   AND PI.PROD_TYPE_CD = '3'
								   AND TO_CHAR(PI.REGIST_DT , 'YYYYMMDD') BETWEEN #{S_START_DATE} AND #{S_END_DATE}
								GROUP BY PI.PROD_CODE, PI.PROD_NM, PI.PROD_TYPE_CD, PI.DLV_WAY_CD, PI.REGIST_DT, PI.FREESHARE_END_DT, MI.MBER_EMAIL, MI.MBER_NM, MI.MBER_GB_CD
							   )X LEFT OUTER JOIN ORD_PROD_INFO OPI ON X.PROD_CODE = OPI.PROD_CODE
								  INNER JOIN ORD_DLV_INFO ODI ON OPI.ORD_CD = ODI.ORD_CD
					   ) INFO LEFT OUTER JOIN MBER_INFO OMI ON INFO.ORD_MBER_SEQ = OMI.MBER_SEQ
					   		  LEFT OUTER JOIN INVC_INFO II ON INFO.ORD_CD = II.ORD_CD AND INFO.PROD_CODE = II.PROD_CODE AND INFO.PROD_SEQ = II.PROD_SEQ
				 WHERE 1=1
				<if test="PROD_NM != null and PROD_NM != ''">
				   AND INFO.PROD_NM LIKE '%'||#{PROD_NM}||'%'
				</if>
				<if test="ORD_CD != null and ORD_CD != ''">
				   AND INFO.ORD_CD = #{ORD_CD}
				</if>
				<if test="SEARCH_NM != null and SEARCH_NM != ''">
					<if test='SEARCH_GB == "1"'>
						AND INFO.SELLER_MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "2"'>
						AND INFO.SELLER_MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "3"'>
						AND OMI.MBER_EMAIL LIKE '%'||#{SEARCH_NM}||'%'
					</if>
					<if test='SEARCH_GB == "4"'>
						AND OMI.MBER_NM LIKE '%'||#{SEARCH_NM}||'%'
					</if>
				</if>
				<if test="PROC_STAT_CD != null and PROC_STAT_CD != ''">
				   AND INFO.PROC_STAT_CD IN
					<foreach collection="PROC_STAT_CD" item="cd" open="(" close=")" separator=",">
				  		#{cd}
				  	</foreach>
			  	</if>
			  ) FREE LEFT OUTER JOIN (SELECT COM_CD,COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD') COMM ON FREE.DLV_CMP_CD = COMM.COM_CD
	
	</select>
	
	<!-- 나눔 상세내역 신청상품정보 조회 -->
	<select id="selectFreeShareReqDtl" parameterType="hashmap" resultType="hashmap">
	
		SELECT INFO.PROD_CODE
			  ,INFO.PROD_NM
			  ,INFO.REGIST_DT
			  ,INFO.FREESHARE_START_DT
			  ,INFO.FREESHARE_END_DT
			  ,INFO.PROD_IMG_URL
			  ,CNT.REQ_CNT
		  FROM (
				SELECT PI.PROD_CODE
					  ,PI.PROD_NM
					  ,PI.REGIST_DT
					  ,PI.REGIST_DT AS FREESHARE_START_DT
					  ,PI.FREESHARE_END_DT 
					  ,IMG.PROD_IMG_URL
				  FROM PROD PI ,PROD_IMG IMG
				 WHERE PI.PROD_CODE = IMG.PROD_CODE
				   AND IMG.PROD_IMG_GB_CD = #{prodImgGbCd}
				   AND PI.PROD_CODE = #{prodCode}
			   ) INFO,
			   (
				SELECT COUNT(1) AS REQ_CNT
				  FROM PROD PI ,PROD_SUBMIT_INFO PSI
				 WHERE PI.PROD_CODE = PSI.PROD_CODE
				   AND PI.PROD_CODE = #{prodCode}
			   ) CNT
	
	</select>
	
	<!-- 나눔 상세내역 신청정보 총건수 -->
	<select id="selectListFreeShareReqCnt" parameterType="hashmap" resultType="int">
	
		SELECT COUNT(*)
		  FROM (
		  		SELECT PSI.MBER_SEQ
			  		  ,PSI.REGIST_DT
					  ,MI.MBER_NM
					  ,MI.MBER_EMAIL
					  ,PSI.REQ_MEMO
				  FROM PROD_SUBMIT_INFO PSI
					  ,MBER_INFO MI
				 WHERE PSI.MBER_SEQ = MI.MBER_SEQ
				   AND PSI.PROD_CODE = #{prodCode}
		  		)
	
	</select>
	
	<!-- 나눔 상세내역 신청정보 조회 -->
	<select id="selectListFreeShareReq" parameterType="hashmap" resultType="hashmap">
	
		<include refid="adminCommonMapper.pagingHeader" />
		SELECT ROW_NUMBER() OVER(ORDER BY PSI.REGIST_DT DESC ) AS NO
			  ,PSI.MBER_SEQ
			  ,PSI.REGIST_DT
			  ,MI.MBER_NM
			  ,MI.MBER_EMAIL
			  ,PSI.REQ_MEMO
		  FROM PROD_SUBMIT_INFO PSI
			  ,MBER_INFO MI
		 WHERE PSI.MBER_SEQ = MI.MBER_SEQ
		   AND PSI.PROD_CODE = #{prodCode}
		<include refid="adminCommonMapper.pagingFooter" />
	
	</select>
	
	<!-- 나눔신청 상태변경 -->
	<update id="updateFreeShareReq" parameterType="hashmap">
	
		UPDATE PROD_SUBMIT_INFO
		   SET PROC_STAT_CD = #{procStatCd}
		 WHERE PROD_CODE = #{prodCode}
		<if test="mberSeq != null and mberSeq != ''">
		   AND MBER_SEQ = #{mberSeq}
		</if>
	
	</update>
	
	<!-- 상품 상태변경 -->
	<update id="updateProdStatCd" parameterType="hashmap">
	
		UPDATE PROD
		   SET PROD_STAT_CD = #{prodStatCd}
		 WHERE PROD_CODE = #{prodCode}
	
	</update>
	
	<!-- 나눔 수락 전, 상품 상태 확인 -->
	<select id="selectProdStat" parameterType="hashmap" resultType="hashmap">
		/* 나눔 수락 전, 상품 상태 확인 */
			SELECT 	PROD_STAT_CD 
				  	,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'PROD_STAT_CD' AND COM_CD = PROD_STAT_CD) PROD_STAT_NM
			FROM 	PROD
		   WHERE 	PROD_CODE = #{prodCode}
	</select>
	
	<!-- 나눔 신청정보 조회 -->
	<select id="selectProdSubmitInfo" parameterType="hashmap" resultType="hashmap">
	
		SELECT PROD_CODE
			  ,MBER_SEQ
			  ,RCV_NM
			  ,PROD_TYPE_CD
			  ,ZIP_CD
			  ,JUSO_DORO
			  ,JUSO_JIBEN
			  ,JUSO_DTL
			  ,TEL
			  ,MEMO
		  FROM PROD_SUBMIT_INFO
		 WHERE PROD_CODE = #{prodCode}
		   AND MBER_SEQ = #{mberSeq}
		   AND PROC_STAT_CD = #{procStatCd}
			AND ROWNUM = 1
	</select> 
	
	<!-- 주문서 등록 -->
    <insert id="insertOrdInfo" parameterType="hashmap" useGeneratedKeys="true" keyProperty="ORD_CD" keyColumn="ORD_CD">
  			INSERT INTO ORD_INFO( ORD_CD				<!--  주문코드  -->
								, MBER_SEQ				<!--  회원고유번호 -->
								, ORD_REG_DATE			<!--  등록일시  -->
								, REGIST_DT				<!--  등록일시  -->
								, UPDT_DT				<!--  수정일시  -->
		)VALUES (
				#{ordCd}
				, #{MBER_SEQ}
				, SYSDATE
				, SYSDATE
				, SYSDATE
		)
	</insert>
	
	<!-- 주문 배송지 정보 등록 -->
    <insert id="insertOrdDlvInfo" parameterType="hashmap">
  		INSERT INTO ORD_DLV_INFO( ORD_CD					<!-- 주문코드  -->
							, RCV_NM				<!-- 받는자명  -->
							, RCV_TEL				<!-- 받는자전화번호  -->
							, ZIP_CD				<!--  우편번호  -->
							, JUSO_DORO				<!--  배송지 주소 -->
							, JUSO_JIBEN			<!--  배송지 주소 -->
							, JUSO_DTL				<!--  배송지 주소 상세 -->
							, REGIST_DT				<!--  등록일시  -->
							, UPDT_DT				<!--  수정일시  -->
							<!--  , DLV_MSG				배송 메시지  -->
		)VALUES ( #{ORD_CD}
				, #{RCV_NM}
				, #{TEL}
				, #{ZIP_CD}
				, #{JUSO_DORO}
				, #{JUSO_JIBEN}
				, #{JUSO_DTL}
				, SYSDATE
				, SYSDATE
			<!--  	, #{MEMO} -->
		)
	</insert>
	
	<!-- 주문 상품 정보 등록 -->
    <insert id="insertOrdProdInfo" parameterType="hashmap"  useGeneratedKeys="true" keyProperty="PROD_SEQ" keyColumn="PROD_SEQ">
  		INSERT INTO ORD_PROD_INFO( PROD_CODE				<!--  상품코드  -->
								, ORD_CD				<!--  주문코드  -->
								, PROD_SEQ				<!--  상품일련번호  -->
								, MBER_SEQ				<!--  회원일련번호  -->
								, PROD_TYPE_CD			<!--  상품구분코드  -->
								, PROC_STAT_CD			<!--  처리상태코드  -->
								, DLV_GRP_CODE			<!--  묶음처리  -->
								, REGIST_DT				<!--  등록일시  -->
								, UPDT_DT				<!--  수정일시  -->
		)VALUES ( #{PROD_CODE}
				, #{ORD_CD}
				, #{PROD_SEQ}
				, #{MBER_SEQ}
				, #{PROD_TYPE_CD}
				, #{PROC_STAT_CD}
				, #{DLV_GRP_CODE}
				, SYSDATE
				, SYSDATE
		)
	</insert>
	
	<!-- 나눔 주문내역 -->
	<select id="selectFreeShareConfDtl" parameterType="hashmap" resultType="hashmap">
	/* 나눔 주문내역 상세 */
	
		SELECT OPI.REGIST_DT AS ORD_REGIST_DT
			  ,OPI.ORD_CD
			  ,'' AS CHAN
			  ,MI.MBER_SEQ AS ORD_MBER_SEQ
			  ,MI.MBER_NM AS ORD_MBER_NM
			  ,MI.MBER_EMAIL AS ORD_MBER_EMAIL
			  ,MI.MBER_PHONE AS ORD_MBER_PHONE
			  ,PSI.REQ_SEQ
			  ,PSI.REGIST_DT AS REQ_REGIST_DT
			  ,PSI.REQ_MEMO
			  ,PI.MBER_SEQ AS SELL_MBER_SEQ
			  ,PI.MBER_NM AS SELL_MBER_NM
			  ,PI.MBER_EMAIL AS SELL_MBER_EMAIL
			  ,PI.MBER_GB_CD_NM AS SELL_MBER_GB_CD_NM
			  ,PI.PROD_CODE
			  ,PI.PROD_NM
			  ,IMG.PROD_IMG_URL
			  ,PI.REGIST_DT AS FREESHARE_START_DT
			  ,PI.FREESHARE_END_DT AS FREESHARE_END_DT
			  ,PI.DLV_WAY_CD
			  ,PI.DLV_CMP_CD
      		  ,PI.DLV_CMP_CD_NM
			  ,PI.REQ_CNT
			  ,OPI.PROD_SEQ
			  ,OPI.PROC_STAT_CD
			  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'PROC_STAT_CD' AND COM_CD = OPI.PROC_STAT_CD) AS PROC_STAT_CD_NM
			  ,ODI.RCV_NM
			  ,ODI.RCV_TEL
			  ,ODI.ZIP_CD
			  ,ODI.JUSO_JIBEN
			  ,ODI.JUSO_DORO
			  ,ODI.JUSO_DTL
			  ,ODI.DLV_MSG
			  ,OI.ADMIN_MEMO
			  ,II.INVC_NO
      		  ,II.DLV_START_DT
      		  ,CASE WHEN OPI.PROC_STAT_CD = '22' THEN II.DLV_START_DT+1 WHEN OPI.PROC_STAT_CD = '23' THEN II.DLV_END_DT ELSE SYSDATE END AS DLV_END_DT
      		  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD' AND COM_CD = II.DLV_CMP_CD) AS INVC_DLV_CMP_CD_NM
		  FROM (
				SELECT PMI.MBER_SEQ
					  ,PMI.MBER_NM
					  ,PMI.MBER_EMAIL
					  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'MBER_GB_CD' AND COM_CD = PMI.MBER_GB_CD) AS MBER_GB_CD_NM
					  ,PRD.PROD_CODE
					  ,PRD.PROD_NM
					  ,PRD.REGIST_DT
					  ,PRD.FREESHARE_END_DT
					  ,PRD.DLV_WAY_CD
					  ,PRD.DLV_CMP_CD
          			  ,(SELECT COM_CD_NM FROM CODE WHERE GRP_CD = 'DLV_CMP_CD' AND COM_CD = PRD.DLV_CMP_CD) AS DLV_CMP_CD_NM
					  ,(SELECT COUNT(*) FROM PROD_SUBMIT_INFO WHERE PROD_CODE = PRD.PROD_CODE) AS REQ_CNT
				  FROM PROD PRD, MBER_INFO PMI
				 WHERE PRD.MBER_SEQ = PMI.MBER_SEQ
		  		   AND PRD.PROD_CODE = #{prodCode}
				) PI ,
				PROD_SUBMIT_INFO PSI, PROD_IMG IMG, ORD_PROD_INFO OPI, MBER_INFO MI, ORD_DLV_INFO ODI, ORD_INFO OI, INVC_INFO II
		 WHERE PI.PROD_CODE = PSI.PROD_CODE
		   AND PI.PROD_CODE = IMG.PROD_CODE
		   AND PI.PROD_CODE = OPI.PROD_CODE
		   AND OPI.MBER_SEQ = MI.MBER_SEQ
		   AND OPI.ORD_CD = ODI.ORD_CD
		   AND OPI.ORD_CD = OI.ORD_CD
		   AND OPI.ORD_CD = II.ORD_CD(+)
     	   AND OPI.PROD_CODE = II.PROD_CODE(+)
     	   AND OPI.PROD_SEQ = II.PROD_SEQ(+)
		   AND IMG.PROD_IMG_GB_CD = #{prodImgGbCd}
		   AND OPI.PROC_STAT_CD = #{procStatCd}
		   AND OI.ORD_CD = #{ordCd}
		   AND PSI.PROC_STAT_CD = '95'
		   AND ROWNUM=1
	
	</select>

	
	<!-- 배송지정보 변경 -->
	<update id="updateDlvInfo" parameterType="hashmap">
	
		UPDATE ORD_DLV_INFO
		   SET RCV_NM = #{rcvNm}
			  ,RCV_TEL = #{rcvTel}
			  ,ZIP_CD = #{zipCd}
			  ,JUSO_DORO = #{jusoDoro}
			  ,JUSO_JIBEN = #{jusoJiben}
			  ,JUSO_DTL = #{jusoDtl}
			  ,UPDT_DT = SYSDATE
		 WHERE ORD_CD = #{ordCd}
		
	</update>
	
	<!-- 운송장 정보생성 -->
	<insert id="insertInvcInfo" parameterType="hashmap">
	
		INSERT INTO INVC_INFO (PROD_CODE, PROD_SEQ, ORD_CD, INVC_NO, DLV_CMP_CD, DLV_STAT_CD, DLV_START_DT, REGIST_DT, UPDT_DT)
					   VALUES (#{prodCode}, #{prodSeq}, #{ordCd}, #{invcNo}, #{dlvCmpCd}, #{dlvStatCd}, SYSDATE, SYSDATE, SYSDATE)
	
	</insert>
	
	<!-- 배송완료 운송장 정보수정 -->
	<update id="updateInvcInfo" parameterType="hashmap">
	
		UPDATE INVC_INFO
		   SET DLV_STAT_CD = #{dlvStatCd}
		      ,DLV_END_DT = SYSDATE
		      ,UPDT_DT = SYSDATE
		 WHERE PROD_CODE = #{prodCode}
		   AND PROD_SEQ = #{prodSeq}
		   AND ORD_CD = #{ordCd}
	
	</update>
	
	<select id="selectOrdInfoSeq" resultType="string">
		SELECT TO_CHAR(SYSDATE, 'YYYYMMDDHH24MI') || LPAD(SEQ_ORD_CD.NEXTVAL,4,0) AS ORD_CD FROM DUAL
	</select>
	
	<!-- //나눔 주문내역 ======================================================================== -->
	
	
</mapper>
