package com.ssocio.sharing.vo.admin;

import java.util.ArrayList;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.multipart.MultipartHttpServletRequest;

public class PlanTemplate extends PlanContainer{
	private static final Logger logger = LoggerFactory.getLogger(PlanTemplate.class);
	
	public static final String TYPE_S_CARD = "카드형";
	public static final String TYPE_S_SYMMETRY = "대칭형";
	public static final String TYPE_S_BANNER = "배너형";
	
	public static final String TYPE_CARD = "10";
	public static final String TYPE_SYMMETRY = "20";
	public static final String TYPE_BANNER = "30";
	
	private String tplGbCd;
	private int rowCnt;
	
	private ArrayList<PlanContent> contents = new ArrayList<PlanContent>();
	
	public PlanTemplate(){
		super();

		this.tplGbCd = TYPE_CARD;
		this.rowCnt = 1;
	}
	
	public PlanTemplate(JSONObject json){
		super(json);
		
		this.tplGbCd =  (String)json.get("type");
		this.rowCnt = (int)(long)json.get("rowNum");
	}
	
	/**
	 * 
	 * <pre>
	 * 설명 : 템플릿에서 하위 컨텐츠를 세팅하기 위한 메소드
	 * 설명 : setter 메소드가 아님.
	 * @param inParam
	 * @throws Exception
	 * @date 2015. 8. 13. 오후 5:52:16
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	public void setContents(MultipartHttpServletRequest inParam) throws Exception{
		for(int i=0 ; i<this.rowCnt ; i++){
			if( TYPE_CARD.equals(this.tplGbCd)  ){
				PlanContent content = new PlanContent();
				content.init((int)idx, i, inParam);
				this.contents.add(content);
			}
			else if(TYPE_SYMMETRY.equals(this.tplGbCd)){
				for( int j=0 ; j<2 ; j++){
					PlanContent content = new PlanContent();
					content.init((int)idx, i*2 + j, inParam);
					this.contents.add(content);
				}
			}
			else if(TYPE_BANNER.equals(this.tplGbCd)){
				PlanContent content = new PlanContent();
				content.init((int)idx, i, inParam);
				this.contents.add(content);
			}
		}

		toString();
	}
	
	public void setContents(JSONObject jsonObject, MultipartHttpServletRequest inParam) throws Exception{
		JSONArray jsonContents = (JSONArray)jsonObject.get("contents");
		
		for(int i=0 ; i<jsonContents.size() ; i++){
			JSONObject json = (JSONObject)jsonContents.get(i);
			PlanContent pc = new PlanContent(json);
			pc.init((int)idx, i, inParam);
			this.contents.add(pc);
		}

		toString();
	}
	
	public void setContents(JSONObject json){
		
	}

	public String getTplGbCd() {
		return tplGbCd;
	}

	public void setTplGbCd(String tplGbCd) {
		this.tplGbCd = tplGbCd;
	}

	public int getRowCnt() {
		return rowCnt;
	}

	public void setRowCnt(int rowCnt) {
		this.rowCnt = rowCnt;
	}

	public ArrayList<PlanContent> getContents() {
		return contents;
	}

	public void setContents(ArrayList<PlanContent> contents) {
		this.contents = contents;
	}

	@Override
	public String toString(){
		StringBuffer sb = new StringBuffer("");
		sb.append("[");
		sb.append("TYPE : ").append(this.tplGbCd);
		
		for(int i=0 ; i<this.contents.size() ; i++ ){
			this.contents.get(i).toString(sb);
		}

		sb.append("]");
		
		return sb.toString();
	}
}
