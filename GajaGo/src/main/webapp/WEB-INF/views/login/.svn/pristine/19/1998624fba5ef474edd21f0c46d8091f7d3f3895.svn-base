package com.ssocio.sharing.cmmn.admin.util;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ssocio.sharing.cmmn.util.JsonUtil;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;

public class HttpUrlConnectionUtil{
	  private static final Logger logger = LoggerFactory.getLogger(HttpUrlConnectionUtil.class);

	
	/**
	*<pre>
	*callHttpURLConnection
	*
	*@param expUrl: http://localhost:9200/prods/prod/{상품코드}
	*@param expMethod :
	* - GET:    Read
	* - PUT:    Update
	* - POST:   Create
	* - DELETE: Delete	* 
	*@param pramMap
	*@exception
	*@date 2015.4.21.오후4:28:11
	*@author N.J.Kim
	*@비고
	*
	*</pre>
	*/
	public static Map<String, Object> callHttpURLConnection(String expUrl, String expMethod, Map<String, Object> pramMap){
		JSONObject json = JsonUtil.getJsonfromMap(pramMap);
		expMethod = StringUtil.nvl(expMethod, "GET");
		StringBuffer sb = new StringBuffer();
		
		try{
			//send request
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[expUrl]"+expUrl);
			logger.debug("[expMethod]"+expMethod);
			LoggerUtil.writeMap(pramMap);
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[json]"+json.toString());
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
	
			URL url = new URL(expUrl);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			con.setDoOutput(true);
			con.setDoInput(true);
			// 요청 방식 (GET:Read, PUT:Update,POST:Create, DELETE:Delete)
			con.setRequestMethod(expMethod);
			
			BufferedReader reader = new BufferedReader(new InputStreamReader(con.getInputStream(),"utf-8"));
			StringBuffer buffer = new StringBuffer();
			
			int read = 0;
			char[] cbuff = new char[1024];
			while ((read = reader.read(cbuff)) > 0) { 
			      buffer.append(cbuff, 0, read);
			}
			reader.close();
			logger.debug(buffer.toString()); 
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return JsonUtil.getJsonStringToMap(sb.toString());
	}
	
	
	/**
	* <pre>
	* 1. 메소드명 : callHttpURLConnectionPush
	* 2. 작성일 : 2015. 9. 30. 오후 8:43:42
	* 3. 작성자 : guitarhyo
	* 4. 설명 : submit용으로 파라미터 던짐니다
	* </pre>
	* @param expUrl
	* @param expMethod
	* @param pramMap
	* @return
	*/
	public static String callHttpURLConnectionPush(String expUrl, String expMethod, Map<String, Object> pramMap){
		JSONObject json = JsonUtil.getJsonfromMap(pramMap);
		expMethod = StringUtil.nvl(expMethod, "GET");
		StringBuffer sb = new StringBuffer();
		
		try{
			//send request
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[expUrl]"+expUrl);
			logger.debug("[expMethod]"+expMethod);
			LoggerUtil.writeMap(pramMap);
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[json]"+json.toString());
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
	
			URL url = new URL(expUrl);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			con.setDoOutput(true);
			con.setDoInput(true);
			//con.setRequestProperty("Accept-Charset", "UTF-8"); 
//			con.setRequestProperty("Content-Type", "application/json;charset=utf-8");
			con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
//			con.setRequestProperty("Accept", "application/json");
			con.setRequestMethod(expMethod);
			String prams ="token="+(String)pramMap.get("token")+"&title="+(String)pramMap.get("title")+"&message="+(String)pramMap.get("message")+"&pushtype="+(String)pramMap.get("pushtype")+"&badge="+(String)pramMap.get("badge")+"&sound="+(String)pramMap.get("sound");
			DataOutputStream out = new DataOutputStream(con.getOutputStream());
			out.write(prams.getBytes("UTF-8"));
			out.flush();
			int HttpResult=con.getResponseCode();
			/*
			//JSON Request 요청
			Writer wr = new OutputStreamWriter(con.getOutputStream(), "utf-8");

			wr.write(json.toString());
			wr.flush();
			int HttpResult = con.getResponseCode();
			*/
			logger.debug("[HttpResult]:"+HttpResult);
			
			//get result if there is one
			if(HttpResult == HttpURLConnection.HTTP_OK)//HTTP200:ResponseOK
			{	
				BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(),"UTF-8"));
				String line = null;
				while((line = br.readLine()) != null){
					sb.append(line);
				}
				br.close();
				logger.debug("[Respons emessage]:"+sb.toString());
			}
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return sb.toString();
	}
	
	
	/**
	*<pre>
	*callHttpURLConnection
	*
	*@param expUrl: http://localhost:9200/prods/prod/{상품코드}
	*@param expMethod :
	* - GET:    Read
	* - PUT:    Update
	* - POST:   Create
	* - DELETE: Delete	* 
	*@param pramMap
	*@exception
	*@date 2015.4.21.오후4:28:11
	*@author N.J.Kim
	*@비고
	*
	*</pre>
	*/
	public static Map<String, Object> callHttpURLConnection1(String expUrl, String expMethod, Map<String, Object> pramMap){
		JSONObject json = JsonUtil.getJsonfromMap(pramMap);
		expMethod = StringUtil.nvl(expMethod, "GET");
		StringBuffer sb = new StringBuffer();
		
		try{
			//send request
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[expUrl]"+expUrl);
			logger.debug("[expMethod]"+expMethod);
			LoggerUtil.writeMap(pramMap);
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[json]"+json.toString());
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
	
			URL url = new URL(expUrl);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			con.setDoOutput(true);
			con.setDoInput(true);
			//con.setRequestProperty("Accept-Charset", "UTF-8"); 
			con.setRequestProperty("Content-Type", "application/json;charset=utf-8");
			//con.setRequestProperty("Accept", "application/json");
			con.setRequestMethod(expMethod);
			
			OutputStream os= con.getOutputStream();
			os.write(json.toString().getBytes());
			os.flush();
			int HttpResult=con.getResponseCode();
			/*
			//JSON Request 요청
			Writer wr = new OutputStreamWriter(con.getOutputStream(), "utf-8");

			wr.write(json.toString());
			wr.flush();
			int HttpResult = con.getResponseCode();
			*/
			logger.debug("[HttpResult]:"+HttpResult);
			
			//get result if there is one
			if(HttpResult == HttpURLConnection.HTTP_OK)//HTTP200:ResponseOK
			{	
				BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(),"UTF-8"));
				String line = null;
				while((line = br.readLine()) != null){
					sb.append(line);
				}
				br.close();
				logger.debug("[Respons emessage]:"+sb.toString());
			}
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return JsonUtil.getJsonStringToMap(sb.toString());
	}
	
	
	
	
	public static Map<String, Object> callHttpURLConnection2(String expUrl, String expMethod, Map<String, Object> pramMap){
		JSONObject json = JsonUtil.getJsonfromMap(pramMap);
		expMethod = StringUtil.nvl(expMethod, "GET");
		StringBuffer sb = new StringBuffer();
		String de = "data="+json.toString();
		
		try{
			//send request
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[expUrl]"+expUrl);
			logger.debug("[expMethod]"+expMethod);
			LoggerUtil.writeMap(pramMap);
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[json]"+de);
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
	
			URL url = new URL(expUrl);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			con.setDoOutput(true);
			con.setDoInput(true);
			//con.setRequestProperty("Accept-Charset", "UTF-8"); 
			con.setRequestProperty("Content-Type", "application/json;charset=utf-8");
			//con.setRequestProperty("Accept", "application/json");
			con.setRequestMethod(expMethod);
			
			OutputStream os= con.getOutputStream();
			os.write(de.getBytes());
			os.flush();
			int HttpResult=con.getResponseCode();
			/*
			//JSON Request 요청
			Writer wr = new OutputStreamWriter(con.getOutputStream(), "utf-8");

			wr.write(json.toString());
			wr.flush();
			int HttpResult = con.getResponseCode();
			*/
			logger.debug("[HttpResult]:"+HttpResult);
			
			//get result if there is one
			if(HttpResult == HttpURLConnection.HTTP_OK)//HTTP200:ResponseOK
			{	
				BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(),"UTF-8"));
				String line = null;
				while((line = br.readLine()) != null){
					sb.append(line);
				}
				br.close();
				logger.debug("[Respons emessage]:"+sb.toString());
			}
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		}catch(Exception e){
			e.printStackTrace();
		}
		
		return JsonUtil.getJsonStringToMap(sb.toString());
	}
	
	public static Map<String, Object> callHttpURLConnection3(String expUrl, String expMethod, Map<String, String> pramMap){
		expMethod = StringUtil.nvl(expMethod, "GET");
		StringBuffer sb = new StringBuffer(256);
		
		try{
			//send request
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[expUrl]"+expUrl);
			logger.debug("[expMethod]"+expMethod);
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			String value = "";
			logger.debug("[pramMap.length]"+pramMap.size());
			for(String key: pramMap.keySet()) {
				logger.debug("[key]"+key);
				String currentValue = pramMap.get(key);
				logger.debug("[currentValue]"+currentValue);
				if (currentValue.equals("tokenid")) {
					value += key+"="+currentValue;
				} else {
					value += "&"+key+"="+currentValue;
				}
			}
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[expData]"+value);
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			
			URL url = new URL(expUrl);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			con.setDoOutput(true);
			con.setDoInput(true);
			con.setRequestProperty("Accept-Charset", "UTF-8"); 
			con.setRequestProperty("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
			con.setRequestMethod(expMethod);
			
			OutputStream os= con.getOutputStream();
			os.write(value.toString().getBytes());
			os.flush();
			int HttpResult=con.getResponseCode();
			logger.debug("[HttpResult]:"+HttpResult);
			
			//get result if there is one
			if(HttpResult == HttpURLConnection.HTTP_OK) {//HTTP200:ResponseOK	
				BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(),"UTF-8"));
				String line = null;
				while((line = br.readLine()) != null){
					sb.append(line);
				}
				br.close();
				logger.debug("[Respons emessage]:"+sb.toString());
			}
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		}catch(Exception e){
			e.printStackTrace();
		}
		return JsonUtil.getJsonStringToMap(sb.toString());
	}
	
	/**
	 * <pre>
	 * 이메일 발송
	 * 
	 * @param expUrl
	 * @param expMethod
	 * @param pramMap
	 * @return
	 * @date 2015. 9. 8. 오후 7:41:47
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.cmmn.admin.util
	 * </pre>
	 */
	public static Map<String, Object> sendEmail(String expUrl, String expMethod, Map<String, Object> pramMap){
		JSONObject json = JsonUtil.getJsonfromMap(pramMap);
		expMethod = StringUtil.nvl(expMethod, "GET");
		StringBuffer sb = new StringBuffer();
		String data = "";
		try{
			//send request
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[expUrl]"+expUrl);
			logger.debug("[expMethod]"+expMethod);
			LoggerUtil.writeMap(pramMap);
			data = URLEncoder.encode(json.toString(), "UTF-8");
			logger.debug("[json]"+json.toString());
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
	
			URL url = new URL(expUrl);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			con.setDoOutput(true);
			con.setDoInput(true);
			con.setRequestProperty("Accept-Charset", "UTF-8"); 
			con.setRequestProperty("Content-Type", "application/json;charset=utf-8");
			con.setRequestProperty("Accept", "application/json");
			con.setRequestMethod(expMethod);
			
			OutputStream os= con.getOutputStream();
			os.write(data.getBytes());
			os.flush();
			int HttpResult=con.getResponseCode();
			logger.debug("[HttpResult]:"+HttpResult);
			
			//get result if there is one
			if(HttpResult == HttpURLConnection.HTTP_OK) {//HTTP200:ResponseOK
				BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(),"UTF-8"));
				String line = null;
				while((line = br.readLine()) != null){
					sb.append(line);
				}
				br.close();
				logger.debug("[Respons emessage]:"+sb.toString());
			}
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		}catch(Exception e){
			e.printStackTrace();
		}
		return JsonUtil.getJsonStringToMap(sb.toString());
	}
	
	
	
	public static Map<String, Object> sendPush(String expUrl, String expMethod, Map<String, Object> pramMap){
		JSONObject json = JsonUtil.getJsonfromMap(pramMap);
		expMethod = StringUtil.nvl(expMethod, "GET");
		StringBuffer sb = new StringBuffer();
		String data = "";
		try{
			//send request
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
			logger.debug("[expUrl]"+expUrl);
			logger.debug("[expMethod]"+expMethod);
			LoggerUtil.writeMap(pramMap);
			data = URLEncoder.encode(json.toString(), "UTF-8");
			logger.debug("[json]"+json.toString());
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
	
			URL url = new URL(expUrl);
			HttpURLConnection con = (HttpURLConnection)url.openConnection();
			con.setDoOutput(true);
			con.setDoInput(true);
			con.setRequestProperty("Accept-Charset", "UTF-8"); 
			con.setRequestProperty("Content-Type", "application/json;charset=utf-8");
			con.setRequestProperty("Accept", "application/json");
			con.setRequestMethod(expMethod);
			
			OutputStream os= con.getOutputStream();
			os.write(data.getBytes());
			os.flush();
			int HttpResult=con.getResponseCode();
			logger.debug("[HttpResult]:"+HttpResult);
			
			//get result if there is one
			if(HttpResult == HttpURLConnection.HTTP_OK) {//HTTP200:ResponseOK
				BufferedReader br = new BufferedReader(new InputStreamReader(con.getInputStream(),"UTF-8"));
				String line = null;
				while((line = br.readLine()) != null){
					sb.append(line);
				}
				br.close();
				logger.debug("[Respons emessage]:"+sb.toString());
			}
			logger.debug("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		}catch(Exception e){
			e.printStackTrace();
		}
		return JsonUtil.getJsonStringToMap(sb.toString());
	}
}
