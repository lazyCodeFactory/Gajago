package com.ssocio.sharing.cmmn.util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Random;

public class CreateCoupon {

	public List<String>  getCuponNum(int couponSize, List<String> cpnNoDB, String gubun) throws Exception {
		
		List<String> cuponList = new ArrayList<String>() ;
					
		cuponList = makeCouponNum(couponSize,cpnNoDB,gubun);
		
		/*for(int i=0; i<cuponList.size();i++){
			System.out.println(cuponList.get(i).substring(0, 4)+"-"+cuponList.get(i).substring(4, 8)+"-"+cuponList.get(i).substring(8, 12)+"-"+cuponList.get(i).substring(12, 16));
		
		}	*/			 
		
		return cuponList;
		
	}
	
	public List<String> makeCouponNum(int couponSize, List<String> cpnNoDB, String gubun){
		
		List<String> makeCuponList = new ArrayList<String>();

		
		final char[] possibleCharacters =
		    {'0','1','2','3','4','5','6','7','8','9','0','A','B','C','D','E','F',
		     'G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V',
		     'W','X','Y','Z'};
		  
		final int possibleCharacterCount = possibleCharacters.length;	
		String[] arr = new String[couponSize];
		Random rnd = new Random();
		int currentIndex = 0;
	
		while (currentIndex < couponSize) {
			
			StringBuffer buf = new StringBuffer(16);			
			for (int i= 0; i < 9; i++) {
				buf.append(possibleCharacters[rnd.nextInt(possibleCharacterCount)]);
			}
			String couponnum = buf.toString();
		
			arr[currentIndex] = couponnum;
			currentIndex++;
		}
		
		int arrIndex = 0;
		
		
		while(arrIndex < arr.length){		
		
			String cupon13;
			int cupon4;
			String cupon57;
			int cupon8;
			String cupon911;
			int cupon12;
			String cupon1315;
			String cupon;
						
			cupon13 = gubun;	// C 일반쿠폰, P 			
			cupon13 = cupon13+arr[arrIndex].substring(1,3); //2~3자리
	//		cupon13 = arr[arrIndex].substring(0,3);	// 1~3자리		
			
			cupon57 = arr[arrIndex].substring(3,6);	// 4~6자리
			cupon911 = arr[arrIndex].substring(6,9);	// 7~9자리
			
			// 알파벳을 변환해서 3자리값을 합한다.
			cupon4 = convert(cupon13.substring(0,1)) 
					+convert(cupon13.substring(1,2))+convert(cupon13.substring(2,3));
			
			cupon8 = convert(cupon57.substring(0,1)) 
					+convert(cupon57.substring(1,2))+convert(cupon57.substring(2,3));
			
			cupon12 = convert(cupon911.substring(0,1)) 
					+convert(cupon911.substring(1,2))+convert(cupon911.substring(2,3));
				
			
			// 합한값이 10을 넘지 않으면 그대로 합쳐서 4자리로 만든다. 
			if(cupon4 >9){
				if(cupon4> 99){	// 100을 넘으면 마지막 끝자리만 합친다
					cupon13 = cupon13+Integer.toString(cupon4).substring(2, 3);
				}else{	// 10을 넘으면 마지막 끝자리만 합친다.
					cupon13 = cupon13+Integer.toString(cupon4).substring(1, 2);
				}
			}else{
				cupon13=cupon13+Integer.toString(cupon4);
			}
			
			if(cupon8 >9){
				if(cupon8> 99){
					cupon57 = cupon57+Integer.toString(cupon8).substring(2, 3);
				}else{
					cupon57 = cupon57+Integer.toString(cupon8).substring(1, 2);
				}
			}else{
				cupon57=cupon57+Integer.toString(cupon8);
			}
			
			if(cupon12 >9){
				if(cupon12> 99){
					cupon911 = cupon911+Integer.toString(cupon12).substring(2, 3);
				}else{
					cupon911 = cupon911+Integer.toString(cupon12).substring(1, 2);
				}
			}else{
				cupon911=cupon911+Integer.toString(cupon12);
			}
			
			cupon1315 = cupon13.substring(3,4)+ cupon57.substring(3,4)
						+ cupon911.substring(3,4)+possibleCharacters[rnd.nextInt(possibleCharacterCount)];
			
			cupon = cupon13+cupon57+cupon911+cupon1315;
			
			
			if(compare(cupon,cpnNoDB) && compare(cupon ,makeCuponList)){
				makeCuponList.add(cupon);	
				arrIndex++;
			}else{
				StringBuffer buf = new StringBuffer(16);			
				for (int i= 0; i < 9; i++) {
					buf.append(possibleCharacters[rnd.nextInt(possibleCharacterCount)]);
				}
				arr[arrIndex] = buf.toString();
			}
			
		}
		
		return makeCuponList;
		
	}

	
	
	private boolean compare(String cupon, List<String> cpnNoDB) {
		
		if (cpnNoDB.size() > 0){
		
			
			for(int i=0; i<cpnNoDB.size() ; i ++){				
				if(cpnNoDB.get(i).equals(cupon)){					
					return false;					
				}				
			}			
			
		}
		return true;		
		
	}

	public int convert(String num){
		
		int cNum=0;
		switch(num){
			case "A":
				cNum =11;
				break;
			case "B":
				cNum =12;
				break;
			case "C":
				cNum =13;
				break;
			case "D":
				cNum =14;
				break;
			case "E":
				cNum =15;
				break;
			case "F":
				cNum =16;
				break;
			case "G":
				cNum =17;
				break;
			case "H":
				cNum =18;
				break;
			case "I":
				cNum =19;
				break;
			case "J":
				cNum =20;
				break;
			case "K":
				cNum =21;
				break;
			case "L":
				cNum =22;
				break;
			case "M":
				cNum =23;
				break;
			case "N":
				cNum =24;
				break;
			case "O":
				cNum =25;
				break;
			case "P":
				cNum =26;
				break;
			case "Q":
				cNum =27;
				break;
			case "R":
				cNum =28;
				break;
			case "S":
				cNum =29;
				break;
			case "T":
				cNum =30;
				break;
			case "U":
				cNum =31;
				break;
			case "V":
				cNum =32;
				break;
			case "W":
				cNum =33;
				break;
			case "X":
				cNum =34;
				break;
			case "Y":
				cNum =35;
				break;
			case "Z":
				cNum =36;
				break;
			default:
				cNum = Integer.parseInt(num);
				break;
		}		
		return cNum;		
	}

	
	
}
