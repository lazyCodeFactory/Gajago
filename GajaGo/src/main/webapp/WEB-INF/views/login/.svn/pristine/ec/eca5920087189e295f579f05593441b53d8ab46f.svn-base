<%@ page import="kr.co.danal.jsinbi.*"%>
<%@ page import="java.net.*, java.util.*, java.text.*, java.io.*"%>
<%!
	/*****************************************************
	 * 다날 정기과금 요청
	 *****************************************************/
	
	/*****************************************************
	 * 연동에 필요한 Function 및 변수값 설정
     *
	 * 연동에 대한 문의사항 있으시면 기술지원팀으로 연락 주십시오.
	 * DANAL Commerce Division Technique supporting Team 
	 * EMail : tech@danal.co.kr	 
	 ******************************************************/

	static final String DN_CREDIT_URL = "http://121.157.163.71:8080/edi/";

	static final int DN_CONNECT_TIMEOUT = 5000;
	static final int DN_TIMEOUT = 30000;
	static final int DN_RTIME = 30000;
	static final String ERC_NETWORK_ERROR = "-1";
	static final String ERM_NETWORK = "Network Error";

	public String ID_MERCHANT 	= "A010007017";
	public String PW_MERCHANT 	= "test";
	public String AMOUNT		= "1004";
	
	public String CHARSET = "EUC-KR";

	public Map CallCredit(Map REQ_DATA, boolean Debug) {

		String REQ_STR = data2str(REQ_DATA);

		HttpClient hc = new HttpClient();
		hc.setConnectionTimeout(DN_CONNECT_TIMEOUT);
		hc.setTimeout(DN_TIMEOUT);

		int Result = hc.retrieve("POST", DN_CREDIT_URL, REQ_STR, CHARSET, CHARSET);

		String RES_STR = "";
		if (Result == HttpClient.EOK && hc.getResponseCode() == 200) {
			RES_STR = hc.getResponseBody();
		} else {
			RES_STR = "RETURNCODE=" + ERC_NETWORK_ERROR + "&RETURNMSG="
					+ ERM_NETWORK + "( " + Result + "/" + hc.getResponseCode()
					+ " )";
		}

		if (Debug) {
			System.out.println("Req[" + REQ_STR + "]");
			System.out.println("Ret[" + Result + "/" + hc.getResponseCode() + "]");
			System.out.println("Res[" + RES_STR + "]");
		}

		return str2data(RES_STR);
	}

	public Map str2data(String str) {
		Map map = new HashMap();
		String[] st = str.split("&");

		for (int i = 0; i < st.length; i++) {
			int index = st[i].indexOf('=');
			if (index > 0)
				map.put(st[i].substring(0, index),
						urlDecode(st[i].substring(index + 1)));
		}

		return map;
	}

	public String data2str(Map data) {
		Iterator i = data.keySet().iterator();
		StringBuffer sb = new StringBuffer();
		while (i.hasNext()) {
			Object key = i.next();
			Object value = data.get(key);
			
			sb.append(key.toString());
			sb.append('=');
			//sb.append( toEuckr(value.toString()) ); // UTF-8
			sb.append(value.toString()); // EUC-KR
			sb.append('&');
			
		}

		if (sb.length() > 0)
			return sb.substring(0, sb.length() - 1);
		else
			return "";
	}
	
	public String Map2Str(Map data){

		StringBuffer sb = new StringBuffer();
		Iterator it = data.keySet().iterator();
		while(it.hasNext()){
			Object key = it.next();
			String[] value = (String[])data.get(key);

			for(int i = 0; i<value.length;i++){
				sb.append( "{"+key+"="+value[i]+"}" );
			}
		}
		return sb.toString();
	}

	/*
	 *  urlEncode
	 */
	public String urlEncode(Object obj) {
		if (obj == null)
			return null;

		try {
			return URLEncoder.encode(obj.toString(), "EUC-KR");
		} catch (Exception e) {
			return obj.toString();
		}
	}

	/*
	 *  urlDecode
	 */
	public String urlDecode(Object obj) {
		if (obj == null)
			return null;

		try {
			return URLDecoder.decode(obj.toString(), "EUC-KR");
		} catch (Exception e) {
			return obj.toString();
		}
	}

	public String toEuckr(String str) {
		if (str == null)
			return "";
		try {
			return new String(str.getBytes("8859_1"), "EUC-KR");
		} catch (IOException e) {
			return "";
		}
	}
%>