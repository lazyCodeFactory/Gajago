package com.ssocio.sharing.dao.admin;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;
import com.ssocio.sharing.vo.admin.PlanBanner;
import com.ssocio.sharing.vo.admin.PlanContent;
import com.ssocio.sharing.vo.admin.PlanExhibition;
import com.ssocio.sharing.vo.admin.PlanTemplate;

/**
 * 
 * <pre>
 * 설명
 * 설명
 * @author WOOK.KIM
 * @version
 * @since 2015. 8. 7. 오후 7:07:34
 * @see
 * @History
 * Date			|	author		| 변경 내용
 * 2015. 8. 7.	|	WOOK.KIM	|신규
 * @비고
 * </pre>
 */
@Component
public class AdminPlanDao {
	private static final String INSERT_PLAN = "adminPlanMapper.insertPlan";
	private static final String UPDATE_PLAN = "adminPlanMapper.updatePlan";
	private static final String UPDATE_PLAN_VIEW_YN = "adminPlanMapper.updatePlanViewYn";
	private static final String UPDATE_PLAN_VIEW_SEQ = "adminPlanMapper.updatePlanViewSeq";
	private static final String DELETE_PLAN = "adminPlanMapper.deletePlan";
	private static final String SELECT_LIST_PLAN = "adminPlanMapper.selectListPlan";
	private static final String SELECT_PLAN = "adminPlanMapper.selectPlan";

	private static final String INSERT_BANNER = "adminPlanMapper.insertBanner";
	private static final String UPDATE_BANNER = "adminPlanMapper.updateBanner";
	private static final String DELETE_BANNER = "adminPlanMapper.deleteBanner";
	private static final String SELECT_LIST_BANNER = "adminPlanMapper.selectListBanner";
	
	private static final String INSERT_TEMPLATE = "adminPlanMapper.insertTemplate";
	private static final String UPDATE_TEMPLATE = "adminPlanMapper.updateTemplate";
	private static final String DELETE_TEMPLATE = "adminPlanMapper.deleteTemplate";
	private static final String SELECT_LIST_TEMPLATE = "adminPlanMapper.selectListTemplate";
	
	private static final String INSERT_CONTENT = "adminPlanMapper.insertContent";
	private static final String UPDATE_CONTENT = "adminPlanMapper.updateContent";
	private static final String DELETE_CONTENT = "adminPlanMapper.deleteContent";
	private static final String SELECT_LIST_CONTENT = "adminPlanMapper.selectListContent";
	
	private static final String SELECT_PROD = "adminPlanMapper.selectProd";
	private static final String SELECT_SH_PROD = "adminPlanMapper.selectShProd";
	
	private static final String DELETE_PLAN_CONTENTS = "adminPlanMapper.deletePlanContents";
	private static final String DELETE_PLAN_TPLS = "adminPlanMapper.deletePlanTpls";

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminPlanDao.class);
	
	@Resource(name="sqlSessionAdmin")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	public String insertPlan(PlanExhibition pe) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("insertPlan Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", "");
		map.put("PLAN_NM", pe.getPlanNm());
		map.put("PLAN_TITLE", pe.getPlanTitle());
		map.put("VIEW_YN", pe.isViewYn() ? "Y" : "N");
		map.put("VIEW_SEQ", pe.getViewSeq());
		map.put("ALL_VIEW_YN", pe.isAllViewYn() ? "Y" : "N");
		map.put("ALL_VIEW_SEQ", pe.getAllViewSeq());
		map.put("TMP_SAVE_YN", pe.isTmpSaveYn() ? "Y" : "N");
		map.put("START_DT", pe.getStartDt());
		map.put("END_DT", pe.getEndDt());
		map.put("PREVIEW", pe.isPreview());
		map.put("TODAY_YN", pe.getTodayYn());
		
		sqlSession.insert(INSERT_PLAN, map);
		
		return StringUtil.nvl((String)map.get("PLAN_CD"));
	}
	
	public int updatePlan(PlanExhibition pe) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("updatePlan Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", pe.getPlanCd());
		map.put("PLAN_NM", pe.getPlanNm());
		map.put("PLAN_TITLE", pe.getPlanTitle());
		map.put("VIEW_YN", pe.isViewYn() ? "Y" : "N");
		map.put("VIEW_SEQ", pe.getViewSeq());
		map.put("ALL_VIEW_YN", pe.isAllViewYn() ? "Y" : "N");
		map.put("ALL_VIEW_SEQ", pe.getAllViewSeq());
		map.put("TMP_SAVE_YN", pe.isTmpSaveYn() ? "Y" : "N");
		map.put("START_DT", pe.getStartDt());
		map.put("END_DT", pe.getEndDt());
		map.put("PREVIEW", pe.isPreview());
		map.put("TODAY_YN", pe.getTodayYn());
		
		return sqlSession.update(UPDATE_PLAN, map);
	}
	
	public int updatePlanViewYn(boolean isAllView, String planCd, boolean isView) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("updatePlanViewYn Start");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);
		if(isAllView){
			map.put("ALL_VIEW_YN", isView ? "Y" : "N");
		}
		else{
			map.put("VIEW_YN", isView ? "Y" : "N");
		}
		return sqlSession.update(UPDATE_PLAN_VIEW_YN, map);
	}
	
	public int updatePlanViewSeq(boolean isAllView, String planCd, int seq) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("updatePlanViewYn Start");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);
		if(isAllView){
			map.put("ALL_VIEW_SEQ", seq);
		}
		else{
			map.put("VIEW_SEQ", seq);
		}
		return sqlSession.update(UPDATE_PLAN_VIEW_SEQ, map);
	}
	
	public int deletePlan(String planCd, boolean isPreview) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("deletePlan Start");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);
		map.put("PREVIEW", isPreview);

		return sqlSession.delete(DELETE_PLAN, map);
	}
	
	public int insertBanner(PlanBanner pb) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("insertBanner Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", pb.getPlanCd());
		map.put("IMG_SEQ", pb.getSequence());
		map.put("VIEW_SEQ", pb.getViewSeq());
		map.put("FILE_SEQ", pb.getFileSeq());
		map.put("URL", pb.getUrl());
		map.put("PREVIEW", pb.isPreview());

		return sqlSession.insert(INSERT_BANNER, map);
	}
	
	public int updateBanner(PlanBanner pb) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("updateBanner Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", pb.getPlanCd());
		map.put("IMG_SEQ", pb.getSequence());
		map.put("VIEW_SEQ", pb.getViewSeq());
		map.put("FILE_SEQ", pb.getFileSeq());
		map.put("URL", pb.getUrl());
		map.put("PREVIEW", pb.isPreview());
		
		return sqlSession.update(UPDATE_BANNER, map);
	}
	
	public int deleteBanner(String imgSeq, boolean isPreview) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("deleteBanner Start");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("IMG_SEQ", imgSeq);
		map.put("PREVIEW", isPreview);

		return sqlSession.delete(DELETE_BANNER, map);
	}
	
	public int insertTemplate(PlanTemplate pt) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("insertTemplate Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", pt.getPlanCd());
		map.put("PLAN_SEQ", pt.getSequence());
		map.put("VIEW_SEQ", pt.getViewSeq());
		map.put("PLAN_TPL_GB_CD", pt.getTplGbCd());
		map.put("ROW_CNT", pt.getRowCnt());
		map.put("PREVIEW", pt.isPreview());

		return sqlSession.insert(INSERT_TEMPLATE, map);
	}
	
	public int updateTemplate(PlanTemplate pt) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("updateTemplate Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", pt.getPlanCd());
		map.put("PLAN_SEQ", pt.getSequence());
		map.put("VIEW_SEQ", pt.getViewSeq());
		map.put("PREVIEW", pt.isPreview());
		
		return sqlSession.update(UPDATE_TEMPLATE, map);
	}
	
	public int deleteTemplate(String planCd, String planSeq, boolean isPreview) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("deleteTemplate Start");
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);
		map.put("PLAN_SEQ", planSeq);
		map.put("PREVIEW", isPreview);

		return sqlSession.delete(DELETE_TEMPLATE, map);
	}
	
	public int insertContent(PlanContent pc) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("insertContent Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", pc.getPlanCd());
		map.put("PLAN_SEQ", pc.getSequence());
		map.put("VIEW_SEQ", pc.getViewSeq());
		map.put("CONT_GB_CD", pc.getContGbCd());
		map.put("URL", pc.getUrl());
		map.put("CONT_NM", pc.getContNm());
		map.put("CONT_NM_USE_YN", pc.isContNmUseYn() ? "Y" : "N");
		map.put("CONT_NO", pc.getContNo());
		map.put("PLAN_VIEW_GB_CD", pc.getPlanViewGbCd());
		map.put("FILE_SEQ", pc.getFileSeq());
		map.put("PREVIEW", pc.isPreview());
		map.put("PLAN_VIEW_CSS", pc.getPlanViewCss());

		return sqlSession.insert(INSERT_CONTENT, map);
	}
	
	public int updateContent(PlanContent pc) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("updateContent Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", pc.getPlanCd());
		map.put("PLAN_SEQ", pc.getSequence());
		map.put("VIEW_SEQ", pc.getViewSeq());
		map.put("CONT_GB_CD", pc.getContGbCd());
		map.put("URL", pc.getUrl());
		map.put("CONT_NM", pc.getContNm());
		map.put("CONT_NM_USE_YN", pc.isContNmUseYn() ? "Y" : "N");
		map.put("CONT_NO", pc.getContNo());
		map.put("PLAN_VIEW_GB_CD", pc.getPlanViewGbCd());
		map.put("FILE_SEQ", pc.getFileSeq());
		map.put("PREVIEW", pc.isPreview());
		map.put("PLAN_VIEW_CSS", pc.getPlanViewCss());
		
		return sqlSession.update(UPDATE_CONTENT, map);
	}
	
	public int deleteContent(String planCd, String planSeq, boolean isPreview) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("deleteContent Start");

		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);
		map.put("PLAN_SEQ", planSeq);
		map.put("PREVIEW", isPreview);
		
		return sqlSession.delete(DELETE_CONTENT, map);
	}
	/**
	 * 
	 * <pre>
	 * 설명
	 * 설명
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 7. 오후 7:07:56
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	public List<Map<String, Object>> selectListPlan (Map<String, Object> inParam) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListIngPlan Start");
		List<Map<String, Object>> list = null;
		try {
			list =  sqlSession.selectList(SELECT_LIST_PLAN, inParam);
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * 
	 * <pre>
	 * 설명
	 * 설명
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 7. 오후 7:07:56
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	public Map<String, Object> selectPlan(String planCd, boolean isPreview) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectPlan Start");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("PLAN_CD", planCd);
			params.put("PREVIEW", isPreview);
			map =  sqlSession.selectOne(SELECT_PLAN, params);
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return map;
	}
	
	/**
	 * 
	 * <pre>
	 * 설명
	 * 설명
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 7. 오후 7:07:56
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	public List<Map<String, Object>> selectListBanner(String planCd, boolean isPreview) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectBanner Start");
		List<Map<String, Object>> list = null;
		try {
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("PLAN_CD", planCd);
			params.put("PREVIEW", isPreview);

			list =  sqlSession.selectList(SELECT_LIST_BANNER, params);
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * 
	 * <pre>
	 * 설명
	 * 설명
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 7. 오후 7:07:56
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	public List<Map<String, Object>> selectListTemplate(String planCd, boolean isPreview) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListTemplate Start");
		List<Map<String, Object>> list = null;
		try {
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("PLAN_CD", planCd);
			params.put("PREVIEW", isPreview);
			list =  sqlSession.selectList(SELECT_LIST_TEMPLATE, params);
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	/**
	 * 
	 * <pre>
	 * 설명
	 * 설명
	 * @return
	 * @throws Exception
	 * @date 2015. 8. 7. 오후 7:07:56
	 * @author WOOK.KIM
	 * @see
	 * </pre>
	 */
	public List<Map<String, Object>> selectListContents(String planCd, String planSeq, boolean isPreview) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectListContents Start");
		List<Map<String, Object>> list = null;
		try {
			Map<String, Object> params = new HashMap<String, Object>();
			params.put("PLAN_CD", planCd);
			params.put("PLAN_SEQ", planSeq);
			params.put("PREVIEW", isPreview);
			list =  sqlSession.selectList(SELECT_LIST_CONTENT, params);
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	}
	
	public Map<String, Object> selectProd(String prodCode) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectProd Start");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			map  =  sqlSession.selectOne(SELECT_PROD, prodCode);
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		
		return map;
	}
	
	public Map<String, Object> selectShProd(String prodCode) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("selectSpProd Start");
		Map<String, Object> map = new HashMap<String, Object>();
		try {
			map  =  sqlSession.selectOne(SELECT_SH_PROD, prodCode);
		} catch (Exception e) {
			logger.error(e.getMessage());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		
		return map;
	}
	
	public boolean deletePlanContents(String planCd) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("deletePlanContents Start");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);

		try {
			sqlSession.delete(DELETE_PLAN_CONTENTS, map);
			return true;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}
	
	public boolean deletePlanTpls(String planCd) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------		
		logger.info("deletePlanTpls Start");
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("PLAN_CD", planCd);

		try {
			sqlSession.delete(DELETE_PLAN_TPLS, map);
			return true;
		} catch (Exception e) {
			return false;
		}
	}
	
	public List<Map<String, Object>> selectMainPlanPreview(String PLAN_CD) throws Exception{
		return sqlSession.selectList("selectMainPlanPreview", PLAN_CD);
	}
	
	public List<Map<String, Object>> selectListMainPlan() throws Exception{
		return sqlSession.selectList("adminPlanMapper.selectListMainPlan");
	}
	
	public List<Map<String, Object>> selectAllPlanList() throws Exception{
		return sqlSession.selectList("adminPlanMapper.selectAllPlanList");
	}
	
	public List<Map<String, Object>> selectListAppMainPlan() throws Exception{
		return sqlSession.selectList("adminPlanMapper.selectListAppMainPlan");
	}
	
	public List<Map<String, Object>> selectListPlanTemplateContent(String planCd) throws Exception{
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		HashMap<String, Object> inParam = new HashMap<String, Object>();
		inParam.put("PLAN_CD", planCd);
		List<Map<String, Object>> outDataList =  new ArrayList<Map<String, Object>>();
		try {
			outDataList =  sqlSession.selectList("adminPlanMapper.selectListPlanTemplateContent", inParam);
		} catch (Exception e) {
			logger.error("selectFindId DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return outDataList;
	}
	
	public List<Map<String, Object>> selectListPlanBanner(String planCd) throws Exception{
		return sqlSession.selectList("adminPlanMapper.selectListPlanBanner", planCd);
	}
	
}
