package com.ssocio.sharing.controller.mobile;


import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.PaymentUtil;
import com.ssocio.sharing.service.web.MobilePaymentService;
import com.ssocio.sharing.vo.web.NoAuthIssueBill;
import com.ssocio.sharing.vo.web.SetlInfo;



@Controller
public class MobileNoAuthIssueBillController extends MobileReferController {
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(MobileNoAuthIssueBillController.class);
	

	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private MobilePaymentService mobileKcreditService;

	@Autowired
	private MobilePaymentService mobilePaymentService;
	
	
	@RequestMapping("/mobile/issuebillkey/Order.do")
	public ModelAndView NoAuthIssuBillOrder(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("Order START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		
		
		//  /ssocio/src/main/webapp/WEB-INF/views/web/edi/ISSUEBILLKEY/Order.jsp
		
		ModelMap modelMap = new ModelMap();
		modelMap.put("RLT_CD", "7777");
		modelMap.put("RLT_MSG", "테스트");
		
		LoggerUtil.writeMap(inParam);
		ModelAndView mw = new ModelAndView("web/noAuth/ISSUEBILLKEY/Order");
		
//		String TargetURL = (String)request.getAttribute("INIT_URL") + "/mobile/NoAuthIssuBill/CPCGI.do";
//		logger.debug(" TargetURL : " + TargetURL);
		
		return mw;
	}
	
	
	@RequestMapping("/mobile/issuebillkey/CPCGI.do")
	public ModelAndView NoAuthIssuBillCPCGI(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("CPCGI START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		
		
		ModelMap modelMap = new ModelMap();
		
		LoggerUtil.writeMap(inParam);
		NoAuthIssueBill issueBill = new NoAuthIssueBill();

		
		String returnCode = request.getParameter("RETURNCODE");
		
		logger.debug("returnCode : " + returnCode);

		  //*****  신용카드 인증결과 확인 *****************
		  if ( returnCode == null || !"0000".equals(returnCode)) {
		    // returnCode가 없거나 또는 그 결과가 성공이 아니라면 ISSUEBILLKEY를 하지 않아야 함.
				String RETURNCODE = returnCode;
				String RETURNMSG = "신용카드 인증 실패";
				String BackURL = (String)request.getParameter("CANCELURL");
				
				modelMap.put("RLT_CD", RETURNCODE);
				modelMap.put("RLT_MSG", RETURNMSG);
				modelMap.put("BackURL", BackURL);
				
				logger.debug("=== 신용카드 인증 실패 ===");
				LoggerUtil.writeMap(modelMap);
				return new ModelAndView("web/danal/paymentErrPopup",modelMap);
		  }
		 

			/*[ 필수 데이터 ]***************************************/
			Map REQ_DATA = new HashMap();
			Map RES_DATA = new HashMap();
			
			/**************************************************
			 * CP 정보
			 **************************************************/
			REQ_DATA.put("CPID", CmmnCnst.NOAUTH_ID_MERCHANT);
			REQ_DATA.put("CPPWD", CmmnCnst.NOAUTH_PW_MERCHANT);
			
			/**************************************************
			 * 결제 정보
			 **************************************************/
//			REQ_DATA.put("TID", request.getParameter("TID"));
			REQ_DATA.put("TID", (String) inParam.get("TID"));
			
			/**************************************************
			 * 기본 정보
			 **************************************************/
			REQ_DATA.put("TXTYPE", "ISSUEBILLKEY");
			REQ_DATA.put("CHARSET", "euc-kr");

			
//			PaymentUtil.logging(SVC_NM.NOAUTH, TRANS_TYPE.REQ, REQ_DATA.toString());
			
			
			logger.info("[cpcgi][request]" + new Gson().toJson(REQ_DATA));
			RES_DATA = issueBill.CallCredit(REQ_DATA, true);
			logger.info("[cpcgi][resposne]" + new Gson().toJson(RES_DATA));
			
			if ( RES_DATA.get("CARDCODE") != null ){
				String cardCompNm = mobileKcreditService.selectCardCompNm((String) RES_DATA.get("CARDCODE"));
				RES_DATA.put("CARD_COMP_NM",cardCompNm);
			} else {
				RES_DATA.put("CARD_COMP_NM","");
			}
			

			if ( "0000".equals(RES_DATA.get("RETURNCODE"))){	
				
				SetlInfo ordVo = new SetlInfo();

				ordVo.setOrdCd((String) RES_DATA.get("ORDERID"));
				ordVo.setTrdGbCd("10");
				ordVo.setTrdNo((String)RES_DATA.get("TID"));
//				ordVo.setTrdAmt( Integer.parseInt((String)RES_DATA.get("AMT_PAY")) );		// 스셰는 총액이 내려오지 않는다
				ordVo.setSeltNm((String) RES_DATA.get("USERID") );
				ordVo.setBillKey((String) RES_DATA.get("BILLKEY"));
				ordVo.setCardCompNm((String) RES_DATA.get("CARD_COMP_NM"));
				ordVo.setRltCd((String) RES_DATA.get("RETURNCODE") );
				ordVo.setRltMsg((String) RES_DATA.get("RETURNMSG") );
				
				logger.debug("ordVo : " + ordVo.toString());
				
				mobilePaymentService.insertSetlInfoIssuBill(ordVo);
				
				String inputStr1 = issueBill.MakeFormInput(RES_DATA, new String[]{"RETURNCODE", "RETURNMSG"}) ;
				String inputStr2 = issueBill.MakeFormInputHTTP(request.getParameterMap(), null);
				
				modelMap.put("inputStr1", inputStr1);
				modelMap.put("inputStr2", inputStr2);
				
				logger.debug("=== 성공 ===");
				LoggerUtil.writeMap(modelMap);
				return new ModelAndView("web/noAuth/ISSUEBILLKEY/CPCGI",modelMap);

			}else{
				String RETURNCODE = (String)RES_DATA.get("RETURNCODE");
				String RETURNMSG = (String)RES_DATA.get("RETURNMSG");
				String BackURL = (String)request.getParameter("CANCELURL");
				
				modelMap.put("RLT_CD", RETURNCODE);
				modelMap.put("RLT_MSG", RETURNMSG);
				modelMap.put("BackURL", BackURL);

				logger.debug("=== 실패 ===");
				LoggerUtil.writeMap(modelMap);
				return new ModelAndView("web/danal/paymentErrPopup",modelMap);
			}
		


		
	}
	
	/**
	 *	Cancel 페이지로 이동 
	 */
	@RequestMapping(value="/mobile/issuebillkey/Cancel.do")
	public ModelAndView NoAuthIssuBillCancel(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,HttpSession session
			) throws Exception	{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("Ready START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");

		ModelMap modelMap = new ModelMap();
		
		
		
		LoggerUtil.writeMap(modelMap);
		return  new ModelAndView("web/noAuth/ISSUEBILLKEY/Cancel",modelMap);
	}
	
	

	/****************************************************************************
	 * 신용카드 결과 통보. 
	 *  - Noti.jsp
	 *     
	 * 결제시스템 연동에 대한 문의사항 있으시면 기술지원팀으로 연락 주십시오.
	 * DANAL Commerce Division Technique supporting Team 
	 * EMAIL : tech@danal.co.kr
	 *****************************************************************************/
	@ResponseBody
	@RequestMapping(value="/mobile/issuebillkey/Noti.do")
	public String NoAuthIssuBillNoti(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,HttpSession session
			) throws Exception	{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("Noti START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");

		ModelMap modelMap = new ModelMap();
		
		
		
		NoAuthIssueBill issueBill = new NoAuthIssueBill();
		
		try {
			Calendar cal = Calendar.getInstance();
			String ndt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(cal.getTime());
			String dt = new SimpleDateFormat("yyMMdd").format(cal.getTime());

//			String Logs = LogDir + "/noti_" + dt + ".log";

			String QueryString = issueBill.Map2Str( request.getParameterMap() );
			
			String Out = "["+ndt+"]" + QueryString + "\n";

			
			/****************************************************
			 * 	Out 변수를 통해 로그 작성 로직 추가 필요함.
			 ****************************************************/
			logger.info("Out : " + Out);
			
			
			
		
			
			
			/***************************************************
			 * Noti 성공 시 결제 완료에 대한 작업
			 * - Noti의 결과에 따라 DB작업등의 코딩을 삽입하여 주십시오.
			 * - ORDERID, AMOUNT 등 결제 거래내용에 대한 검증을 반드시 하시기 바랍니다.
			 ****************************************************/		
			String paramReturnCode = (String) inParam.get("RETURNCODE");
			String paramReturnMsg = (String) inParam.get("RETURNMSG");
			String paramTid = (String) inParam.get("TID");
			String paramOrderId = (String) inParam.get("ORDERID");
			
			
			
			
			return "OK";

			
			
		} catch (Exception e) {
			e.printStackTrace();
			logger.error(e.toString());
//			out.print("Fail-"+e.getMessage());
		}
		
		
		
		LoggerUtil.writeMap(modelMap);
		return "OK";
	}
	
	
	
	/**
	 *	Ready  
	 */
	@RequestMapping(value="/mobile/issuebillkey/Ready.do")
	public ModelAndView NoAuthIssuBillReady(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,HttpSession session
			
			) throws Exception	{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("Ready START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");


		LoggerUtil.writeMap(inParam);
		
		NoAuthIssueBill isuueBill = new NoAuthIssueBill();
		ModelMap modelMap = new ModelMap();
		
		String initUrl = (String)request.getAttribute("INIT_URL");

		
		
		/*[ 필수 데이터 ]***************************************/
		Map REQ_DATA = new HashMap();
		Map BYPASSVALUE = new HashMap();
		Map RES_DATA = null;
		
		/******************************************************
		 *  AvailableDate 	: 제공 기간 설정 ( 월 단위. Default : 0개월(별도제공기간 없음) / 12개월까지 가능 )
		 ******************************************************/
		String AvailableDate = "3";
		
		/******************************************************
		 *  RETURNURL 	: CPCGI페이지의 Full URL을 넣어주세요
		 *  CANCELURL 	: BackURL페이지의 Full URL을 넣어주세요
		 *	NotiURL     : Noti페이지의 Full URL을 넣어주세요
		 ******************************************************/
		
		
		String RETURNURL 	= initUrl + "/mobile/issuebillkey/CPCGI.do";
		String CANCELURL 	= initUrl + "/mobile/issuebillkey/Cancel.do";
		String NotiURL 		= initUrl + "/mobile/issuebillkey/Noti.do";
		
		modelMap.put("RETURNURL", RETURNURL);
		modelMap.put("CANCELURL", CANCELURL);
		
		
//		String NotiURL 		= "http://192.168.1.205:8081/DanalNoAuth/ISSUEBILLKEY/Noti.jsp";
		
		/**************************************************
		 * CP 정보
		 **************************************************/
		REQ_DATA.put("CPID", CmmnCnst.NOAUTH_ID_MERCHANT);
		REQ_DATA.put("CPPWD", CmmnCnst.NOAUTH_PW_MERCHANT);
		
		/**************************************************
		 * 결제 정보
		 **************************************************/
		REQ_DATA.put("ORDERID", (String)request.getParameter("ID_ORDER"));
		REQ_DATA.put("ITEMNAME", (String)request.getParameter("NM_ITEM"));
		REQ_DATA.put("AVAILABLEPERIOD", AvailableDate);


		/**************************************************
		 * 인증 정보
		 **************************************************/
		REQ_DATA.put("AUTHTYPE", "N"); // fixed
		REQ_DATA.put("BILLTYPE", "ONLINE");

		
		/**************************************************
		 * 고객 정보
		 **************************************************/
		REQ_DATA.put("USERNAME", (String)request.getParameter("BUYR_NAME"));
		REQ_DATA.put("USERID", (String)request.getParameter("BUYR_ID"));
		REQ_DATA.put("USERIP", request.getRemoteAddr()); // IPv4 사용
		REQ_DATA.put("USERPHONE", (String)request.getParameter("BUYR_TEL1"));
		REQ_DATA.put("USEREMAIL", (String)request.getParameter("BUYR_MAIL"));
		
		/**************************************************
		 * 기본 정보
		 **************************************************/
		REQ_DATA.put("TXTYPE", "AUTH");
		REQ_DATA.put("CHARSET", "euc-kr");
		REQ_DATA.put("ISNOTI", "Y");
		REQ_DATA.put("NOTIURL", NotiURL);
		
		BYPASSVALUE.put("Post1", "This is value bypass to CPCGI Page");
		BYPASSVALUE.put("Post2", "AnyValue");


		logger.info("[ready][request]" + new Gson().toJson(REQ_DATA));
		RES_DATA = isuueBill.CallCredit(REQ_DATA, true);
		logger.info("[ready][response]" + new Gson().toJson(RES_DATA));
		
		
		modelMap.put("RES_DATA", RES_DATA);
		

		if ( "0000".equals(RES_DATA.get("RETURNCODE"))){
			String[] exclusion = new String[]{"RETURNCODE", "RETURNMSG"};
			
			String RES_STR = isuueBill.MakeDataStr(RES_DATA, exclusion);
			String POST_STR = isuueBill.MakeDataStrHTTP((Map)request.getParameterMap(), exclusion);

			
			
			String DATA = RES_STR + POST_STR;
			
			modelMap.put("DATA", DATA);
			
			
			logger.debug("=== AuthIssueBill 종료 ===");
			LoggerUtil.writeMap(modelMap);
			return  new ModelAndView("web/noAuth/ISSUEBILLKEY/Ready",modelMap);

		} else {
			String RETURNCODE = (String)RES_DATA.get("RETURNCODE");
			String RETURNMSG = (String)RES_DATA.get("RETURNMSG");
			String BackURL = CmmnCnst.CLOSE_POPUP;
			
			modelMap.put("RLT_CD", RETURNCODE);
			modelMap.put("RLT_MSG", RETURNMSG);
			modelMap.put("BackURL", BackURL);
			
			
			logger.debug("=== AuthIssueBill 종료 ===");
			LoggerUtil.writeMap(modelMap);
			return  new ModelAndView("web/danal/paymentErrPopup",modelMap);

		}

	}
	
	
	/**
	 *	Ready  
	 */
	@RequestMapping(value="/mobile/issuebillkey/Success.do")
	public ModelAndView NoAuthBillSuccess(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,HttpSession session ){

		LoggerUtil.writeMap(inParam);
		
		Enumeration enuma =  request.getHeaderNames();
	
		while (enuma.hasMoreElements()) {
			String key = (String) enuma.nextElement();
			String value = request.getHeader(key);
			logger.debug("key {} \t\t\t value {}",key,value);
			
		}
		ModelMap modelMap= new ModelMap();
		
		Gson gson = new Gson();
		String json = gson.toJson(inParam);
		
		
		modelMap.put("json", json);
		logger.debug("===success.do 종료===");
		LoggerUtil.writeMap(modelMap);

		return  new ModelAndView("web/noAuth/ISSUEBILLKEY/Success",modelMap);

	}
	
	/**
	 *	Ready  
	 */
	@RequestMapping(value="/mobile/issuebillkey/Dummy.do")
	public void NoAuthIssuBillDummy(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,HttpSession session ){

		LoggerUtil.writeMap(inParam);
		
		Enumeration enuma =  request.getHeaderNames();
	
		while (enuma.hasMoreElements()) {
			String key = (String) enuma.nextElement();
			String value = request.getHeader(key);
			logger.debug("key {} \t\t\t value {}",key,value);
			
		}
			
	}

	
	
	
		
}
