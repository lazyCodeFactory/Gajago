package com.ssocio.sharing.service.web;

import java.io.Reader;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;

import net.sf.json.JSONArray;
import oracle.sql.CLOB;

import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.dao.web.MobileMyBasketDao;
import com.ssocio.sharing.vo.web.WebSession;

@Service
public class MobileMyBasketServiceImpl implements MobileMyBasketService {
	
	private static final Logger logger = LoggerFactory.getLogger(MobileMyBasketServiceImpl.class);
	
	@Resource(name="mobileMyBasketDao")
	private MobileMyBasketDao mobileMyBasketDao;
	
	
	/**   
	 * 장바구니 > A.판매상품
	 */
	@Override	
	public ModelMap getMySellList(Map<String, Object> inParam, WebSession user){
		logger.debug("service");
		ModelMap mm = new ModelMap();
		Map<String, Object> result = new HashMap<String, Object>();
		int mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		List<Map<String, Object>> resultList = null;
		try {
				resultList = mobileMyBasketDao.getMySellList(inParam);
			
			mobileMyBasketDao.updateCartViewYn(inParam);
			mm.put("resultList", clobToString(resultList)); 
			mm.put("resultListSize", resultList.size()); 
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	/**   
	 * 장바구니 > B.셰어링 상품
	 */
	@Override	
	public ModelMap getMySharingList(Map<String, Object> inParam, WebSession user){
		logger.debug("service");
		ModelMap mm = new ModelMap();
		Map<String, Object> result = new HashMap<String, Object>();
		int mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		List<Map<String, Object>> resultList = null;
		try {
			// 조회
			resultList = mobileMyBasketDao.getMySharingList(inParam);
			mobileMyBasketDao.updateCartViewYn(inParam);
			mm.put("resultList", clobToString(resultList));
			mm.put("resultListSize", resultList.size());
		}catch (Exception e) {
			e.printStackTrace();
		}
		return mm;
	}
	/**   
	 * 장바구니 삭제
	 */
	@Override
	public ModelMap deleteMyBasket(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		String inputArrayValS = "";
		inputArrayValS = inParam.get("chk01").toString();
		logger.debug("inputArrayValS:"+inputArrayValS);
		try {
			
			String[] inputArrayYnSArr = inputArrayValS.split(",");
			logger.debug("inputArrayYnSArr.length:"+inputArrayYnSArr.length);
			for(int a=0;a<inputArrayYnSArr.length;a++){
				logger.debug("inputArrayYnSArr["+a+"]:"+inputArrayYnSArr[a]);
				inParam.put("PROD_CODE", inputArrayYnSArr[a]);
				adrStatus = mobileMyBasketDao.deleteMyBasketOpt(inParam);
				adrStatus = mobileMyBasketDao.deleteMyBasket(inParam);
				logger.debug("adrStatus:"+adrStatus);
			
			}
				
			if(adrStatus == null){
				msg = "장바구니 정보가 삭제되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			try {
				throw e;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return mm;
	}
	/**   
	 * 장바구니 옵션 삭제
	 */
	@Override
	public ModelMap deleteMyBasketOption(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		try {
			
			adrStatus = mobileMyBasketDao.deleteCartOpt(inParam);
			
			msg = "장바구니 정보가 삭제되었습니다.";
			mm.put("msg", msg);
		}catch (Exception e) {
			try {
				throw e;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return mm;
	}
	/**
	 * 	[상품정보 변경/제고부족으로 삭제.]
	 * 	- 사용처 : [셰어링] 장바구니 삭제
	 *   	1.조회 OPT_CD 해서 1건이면 CART_OPT , CART도 삭제처리 
	 * 			1-1.OPT_CD , 2.PROD_CODE
	 * 		2.상품코드만 존재시 CART 만 삭제처리 
	 */
	@Override
	public ModelMap deleteMyBacketChangeDel(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		try {
			logger.debug("OPT_CD:"+inParam.get("OPT_CD"));
			String optCdStr = inParam.get("OPT_CD")==null?"":inParam.get("OPT_CD").toString();
			logger.debug("optCdStr:"+optCdStr);
			if(optCdStr.length() < 1){
				// 셰어링 진입(O)
				logger.debug("### 2.상품코드만 존재시 CART 만 삭제처리  ");
				adrStatus = mobileMyBasketDao.deleteMyBasket(inParam);
			}else{
				logger.debug("### 1.조회 OPT_CD 해서 1건이면 CART_OPT , CART도 삭제처리 ");
				int cntCartOpt = mobileMyBasketDao.selectCountCartOptAll(inParam);
				logger.debug("cntCartOpt:"+cntCartOpt);
				
				adrStatus = mobileMyBasketDao.deleteCartOpt(inParam);
				logger.debug("adrStatus:"+adrStatus);
				if(cntCartOpt==1){
					adrStatus = mobileMyBasketDao.deleteMyBasket(inParam);
					logger.debug("adrStatus:"+adrStatus);
				}
			}
			msg = "장바구니 정보가 삭제되었습니다.";
			mm.put("msg", msg);
		}catch (Exception e) {
			try {
				throw e;
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		return mm;
	}
	/**
	  *  List<Map<String, Object>>에 담긴 Clob를  json로 추출하여 String형태로 변환해서 Map를 Return.
	  *  @param   map        Data
	  *  @param   arryKey    CLOB key
	  *  @return   List<Map<String, Object>>
	  */
	public static List<Map<String, Object>> clobToString(List<Map<String, Object>> countList) throws Exception{
		JSONObject jsonObj = new JSONObject() ;
		JSONObject jsonSubObj = new JSONObject() ;
		JSONArray jsonArr = new JSONArray();
		for(Map<String,Object> m : countList){
			Set<String> key = m.keySet();
			//logger.debug("### key	:"+key	+" >>>>");
			jsonSubObj = new JSONObject();
			for(Iterator<String> iterator = key.iterator(); iterator.hasNext();){
				String k = (String) iterator.next();
				//logger.debug("### k	:"+k	+" >>>>");
				String val = "";
				if("CONTENTS".equals(k)){						
					// 내용
					CLOB clobANSCONTENTS = (CLOB) m.get(k);
					if(clobANSCONTENTS!=null){
						Reader readerANSCONTENTS = clobANSCONTENTS.getCharacterStream();
						StringBuffer outANSCONTENTS = new StringBuffer();
						char[] buffANSCONTENTS = new char[1024];
						int ncharsANS = 0;
						while ((ncharsANS = readerANSCONTENTS.read(buffANSCONTENTS)) > 0) {
							outANSCONTENTS.append(buffANSCONTENTS, 0, ncharsANS);
						}
						val = outANSCONTENTS.toString();
						if(val.length() > 16){
							val = val.substring(0, 16)+"...";
						}
					}else{
						val = "";
					}
				}else{
					val = String.valueOf(m.get(k));
				}
				jsonSubObj.put(k,val);
			}
			jsonArr.add(jsonSubObj);
		}
		return jsonArr;
	}
	/**
	  *  Clob를  추출하여 String형태로 변환 Return.
	  *  @param   map        Data
	  *  @param   arryKey    CLOB key
	  *  @return   List<Map<String, Object>>
	  */
	public static String clobToStr(CLOB clobCONTENTS) throws Exception{
		logger.debug("[clobToStr] clobCONTENTS:"+clobCONTENTS);
		if(clobCONTENTS!=null){
			Reader readerCONTENTS = clobCONTENTS.getCharacterStream();
			StringBuffer outCONTENTS = new StringBuffer();
			char[] buffCONTENTS = new char[1024];
			int nchars = 0;
			while ((nchars = readerCONTENTS.read(buffCONTENTS)) > 0) {
				outCONTENTS.append(buffCONTENTS, 0, nchars);
			}
			return outCONTENTS.toString();
		}else{
			return "";
		}
		
	}
	
	public ModelMap getMyBasketStockCnt(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		try{
			inParam.put("MBER_SEQ", user.getMBER_SEQ());
			mm.put("cnt", mobileMyBasketDao.getMyBasketStockCnt(inParam));
			mm.put("params", inParam);
		}catch(Exception e){
			e.printStackTrace();
		}
		return mm;
	}
}
