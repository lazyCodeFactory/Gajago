package com.ssocio.sharing.controller.admin;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.service.admin.AdminSharOrderService;
import com.ssocio.sharing.vo.admin.AdminSession;

/**
 * <pre>
 * 주문관리
 * 쉐어링 상품 주문 관리
 * @author S.B.LEE
 * @version
 * @since 2015. 7. 17. 오전 11:44:26
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 17.	|	S.B.LEE	|신규
 * @비고
 * </pre>
 */
@Controller
public class AdminSharOrderController extends AdminReferController {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminSharOrderController.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private AdminSharOrderService adminSharOrderService;
	

	/**
	 * <pre>
	 * 셰어링 주문 내역 리스트 
	 * 셰어링 주문 내역 리스트를 조회 합니다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListSharOrder.do")
	public ModelAndView selectListSharOrder(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING ORDER LIST START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("params", inParam);
			mav.addObject("list", adminSharOrderService.selectListSharOrder(inParam));
			mav.setViewName("admin/order/selectListSharOrder");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 주문 관리 상세
	 * 설명
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectSharOrderDtl.do")
	public ModelAndView selectSharOrderDtl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING ORDER DETAIL START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		LoggerUtil.writeMap(inParam);
		String mSeller = session.getSELLER_CD(); 
		String mVdrId  = session.getVDR_ID();
		String mAdmId = session.getADM_ID();
		try {
			inParam.put("M_SELLER_CD", mSeller);
			inParam.put("M_VDR_ID", mVdrId);
			inParam.put("SS_ADM_ID", mAdmId);
			mav.addObject("params", inParam);
			mav.addObject("list", adminSharOrderService.selectSharOrderDtl(inParam));
			mav.setViewName("admin/order/selectSharOrderDtl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 교환 내역 리스트
	 * 셰어링 교환 내역 리스트를 조회 합니다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListSharExc.do")
	public ModelAndView selectListSharExc(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING EXC LIST START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("params", inParam);
			mav.addObject("list", adminSharOrderService.selectListSharExcRtn(inParam));
			mav.setViewName("admin/order/selectListSharExc");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 교환 상세
	 * 셰어링 교환 상세 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectSharExcDtl.do")
	public ModelAndView selectSharExcDtl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING ORDER EXC START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		LoggerUtil.writeMap(inParam);
		String mSeller = session.getSELLER_CD(); 
		String mVdrId  = session.getVDR_ID();
		String mAdmId = session.getADM_ID();
		try {
			inParam.put("M_SELLER_CD", mSeller);
			inParam.put("M_VDR_ID", mVdrId);
			inParam.put("SS_ADM_ID", mAdmId);
			mav.addObject("params", inParam);
			mav.addObject("list", adminSharOrderService.selectSharExcDtl(inParam));
			mav.setViewName("admin/order/selectSharExcDtl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 반품 내역 리스트
	 * 셰어링 반품 내역 리스트를 조회 합니다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListSharRtn.do")
	public ModelAndView selectListSharRtn(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING RTN LIST START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("params", inParam);
			mav.addObject("list", adminSharOrderService.selectListSharReturn(inParam));
			mav.setViewName("admin/order/selectListSharRtn");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 반품 상세
	 * 셰어링 반품 상세 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 25
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectSharRtnDtl.do")
	public ModelAndView selectSharRtnDtl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING ORDER RTN START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		LoggerUtil.writeMap(inParam);
		String mSeller = session.getSELLER_CD(); 
		String mVdrId  = session.getVDR_ID();
		String mAdmId = session.getADM_ID();
		try {
			inParam.put("M_SELLER_CD", mSeller);
			inParam.put("M_VDR_ID", mVdrId);
			inParam.put("SS_ADM_ID", mAdmId);
			mav.addObject("params", inParam);
			mav.addObject("list", adminSharOrderService.selectSharReturnDtl(inParam));
			mav.setViewName("admin/order/selectSharRtnDtl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 주문취소 리스트
	 * 셰어링 주문취소 리스트를 조회 합니다.
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 26
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListSharCan.do")
	public ModelAndView selectListSharCan(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING CANCEL LIST START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		LoggerUtil.writeMap(inParam);
		
		try {
			mav.addObject("params", inParam);
			mav.addObject("list", adminSharOrderService.selectListSharCancel(inParam));
			mav.setViewName("admin/order/selectListSharCan");
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 주문취소 상세
	 * 셰어링 주문취소 상세 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 26
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectSharCanDtl.do")
	public ModelAndView selectSharCanDtl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING ORDER CAN START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		LoggerUtil.writeMap(inParam);
		String mSeller = session.getSELLER_CD(); 
		String mVdrId  = session.getVDR_ID();
		String mAdmId = session.getADM_ID();
		try {
			inParam.put("M_SELLER_CD", mSeller);
			inParam.put("M_VDR_ID", mVdrId);
			inParam.put("SS_ADM_ID", mAdmId);
			mav.addObject("params", inParam);
			mav.addObject("list", adminSharOrderService.selectSharCancelDtl(inParam));
			mav.setViewName("admin/order/selectSharCanDtl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 반품,교환 배송지 정보 수정 
	 * 반품,교환 배송지 정보 수정 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 10. 26
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/order/updateDlvReg.do")
	public ModelAndView updateDlvReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("UPDATE ADDRESS START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		try {
			mav.addObject("list", adminSharOrderService.updateDlvReg(inParam));
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 주문 메모 수정 
	 * 주문 메모 수정 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 10. 26
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * @비고
	 * 
	 * </pre>
	*/
	@RequestMapping("/admin/order/updateSharAdminMemo.do")
	public ModelAndView updateSharAdminMemo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("UPDATE MEMO START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		try {
			mav.addObject("list", adminSharOrderService.updateSharAdminMemo(inParam));
		} catch (Exception e) {
			e.printStackTrace();
			mav.addObject("list", 0);
		}
		mav.setViewName("jsonView");
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 주문 조회 엑셀다운로드
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @date 2015. 10. 27
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListSharOrderExcelDownload.do")
	public ModelAndView selectListSharOrderExcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING ORDER LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView2");
		try {
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("셰어링주문조회_"+today+".xls", check_browser(request)));
			String SheetName = "셰어링 주문 조회";
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("주문번호");
			excelTitle.add("주문일시");
			excelTitle.add("주문자명(ID)");
			excelTitle.add("휴대폰번호");
			excelTitle.add("판매자명(ID)");
			excelTitle.add("상품코드");
			excelTitle.add("주문상태");
			excelTitle.add("상품명");
			excelTitle.add("보증금");
			excelTitle.add("셰어링료");
			excelTitle.add("수량");
			excelTitle.add("상품금액");
			excelTitle.add("배송비");
			excelTitle.add("쿠폰할인");
			excelTitle.add("주문금액");
			excelTitle.add("포인트사용");
			excelTitle.add("결제금액");
			excelTitle.add("결제수단");
			excelTitle.add("카드사");
			excelTitle.add("이름");
			excelTitle.add("연락처");
			excelTitle.add("우편번호");
			excelTitle.add("도로명 주소(기본주소+상세주소)");
			excelTitle.add("지번 주소(기본주소+상세주소)");
			excelTitle.add("배송메모");
			excelTitle.add("택배사");
			excelTitle.add("송장번호");
			excelTitle.add("배송일자");
			excelTitle.add("도착일자");
			excelTitle.add("반납/회수신청일시");
			excelTitle.add("반납/회수 완료일시");
			excelTitle.add("일셰어링료");
			excelTitle.add("셰어링기간(사용일수/잔여일)");
			excelTitle.add("셰어링이용금액");
			excelTitle.add("환불금액");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("ORD_CD");
			CellName.add("ORD_REG_DATE");
			CellName.add("ORDER_INFO");			
			CellName.add("ORD_HP");
			CellName.add("SELLER_INFO");
			CellName.add("PROD_CODE");
			CellName.add("PROC_STAT_CD_NAME");
			CellName.add("PROD_NM");			
			CellName.add("DEPOSIT");
			CellName.add("SHARING_PERIOD_PRICE");
			CellName.add("ORD_QTY");
			CellName.add("PROD_PRCE");
			CellName.add("DLV_PRCE");
			CellName.add("CPN_USE_AMT");			
			CellName.add("TOTAL_ORDER_PRICE");
			CellName.add("POINT_USE_AMT");
			CellName.add("REAL_SELT_AMT");
			CellName.add("PAYMENT");
			CellName.add("CARD_COMP_NM");
			CellName.add("RCV_NM");			
			CellName.add("RCV_TEL");
			CellName.add("ZIP_CD");
			CellName.add("DORO_ADDR_INFO");
			CellName.add("JIBEN_ADDR_INFO");
			CellName.add("DLV_MSG");
			CellName.add("DLV_COM_CD_NAME");			
			CellName.add("INVC_NO");
			CellName.add("DLV_REGIST_DT");
			CellName.add("DLV_END_DT");
			CellName.add("CHG_REGIST_DT");
			CellName.add("CHG_DLV_END_DT");
			CellName.add("SHARING_PRICE");			
			CellName.add("SHAR_PERIOD");
			CellName.add("SHAR_USING_MONEY");
			CellName.add("SHAR_RETURN_MONEY");
			
			List<String> sizeList = new ArrayList<String>();
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("50");
			sizeList.add("50");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
	
			mav.addObject("fileName", "셰어링주문조회_"+today+".xls");
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("sizeList", sizeList);
			logger.debug("start--> " +System.currentTimeMillis());
			mav.addObject("excelList", adminSharOrderService.selectListSharOrderExcel(inParam));
			logger.debug("end--> " +System.currentTimeMillis());
			mav.addObject("param", inParam);

		} catch (Exception e) {e.printStackTrace();}
	    return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 교환신청 조회 엑셀다운로드
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @date 2015. 10. 27
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListSharExcExcelDownload.do")
	public ModelAndView selectListSharExcExcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING EXC LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView2");
		try {
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("셰어링교환신청_"+today+".xls", check_browser(request)));
			String SheetName = "셰어링 교환 신청";
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("주문번호");
			excelTitle.add("주문일시");
			excelTitle.add("주문자명(ID)");
			excelTitle.add("휴대폰번호");
			excelTitle.add("판매자명(ID)");
			excelTitle.add("상품코드");
			excelTitle.add("주문상태");
			excelTitle.add("상품명");
			excelTitle.add("보증금");
			excelTitle.add("셰어링료");
			excelTitle.add("수량");
			excelTitle.add("상품금액");
			excelTitle.add("배송비");
			excelTitle.add("쿠폰할인");
			excelTitle.add("주문금액");
			excelTitle.add("포인트사용");
			excelTitle.add("결제금액");
			excelTitle.add("결제수단");
			excelTitle.add("카드사");
			excelTitle.add("이름");
			excelTitle.add("연락처");
			excelTitle.add("우편번호");
			excelTitle.add("도로명 주소(기본주소+상세주소)");
			excelTitle.add("지번 주소(기본주소+상세주소)");
			excelTitle.add("배송메모");
			excelTitle.add("택배사");
			excelTitle.add("송장번호");
			excelTitle.add("배송일자");
			excelTitle.add("도착일자");
			excelTitle.add("교환 신청일시");
			excelTitle.add("교환 완료일시");
			excelTitle.add("일셰어링료");
			excelTitle.add("셰어링기간(사용일수/잔여일)");
			excelTitle.add("셰어링이용금액");
			excelTitle.add("환불금액");
			excelTitle.add("교환 사유");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("ORD_CD");
			CellName.add("ORD_REG_DATE");
			CellName.add("ORDER_INFO");			
			CellName.add("ORD_HP");
			CellName.add("SELLER_INFO");
			CellName.add("PROD_CODE");
			CellName.add("PROC_STAT_CD_NAME");
			CellName.add("PROD_NM");			
			CellName.add("DEPOSIT");
			CellName.add("SHARING_PERIOD_PRICE");
			CellName.add("ORD_QTY");
			CellName.add("PROD_PRCE");
			CellName.add("DLV_PRCE");
			CellName.add("CPN_USE_AMT");			
			CellName.add("TOTAL_ORDER_PRICE");
			CellName.add("POINT_USE_AMT");
			CellName.add("REAL_SELT_AMT");
			CellName.add("PAYMENT");
			CellName.add("CARD_COMP_NM");
			CellName.add("RCV_NM");			
			CellName.add("RCV_TEL");
			CellName.add("ZIP_CD");
			CellName.add("DORO_ADDR_INFO");
			CellName.add("JIBEN_ADDR_INFO");
			CellName.add("DLV_MSG");
			CellName.add("DLV_COM_CD_NAME");			
			CellName.add("INVC_NO");
			CellName.add("DLV_REGIST_DT");
			CellName.add("DLV_END_DT");
			CellName.add("REQUEST_DT");
			CellName.add("CHG_DLV_END_DT");
			CellName.add("SHARING_PRICE");			
			CellName.add("SHAR_PERIOD");
			CellName.add("SHAR_USING_MONEY");
			CellName.add("SHAR_RETURN_MONEY");
			CellName.add("CHG_REASON");
			
			List<String> sizeList = new ArrayList<String>();
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("50");
			sizeList.add("50");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("40");
	
			mav.addObject("fileName", "셰어링교환신청_"+today+".xls");
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("sizeList", sizeList);
			
			mav.addObject("excelList", adminSharOrderService.selectListSharExcExcel(inParam));
			mav.addObject("param", inParam);

		} catch (Exception e) {e.printStackTrace();}
	    return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 반품 신청 조회 엑셀다운로드
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @date 2015. 10. 27
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListSharRtnExcelDownload.do")
	public ModelAndView selectListSharRtnExcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING RETURN LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView2");
		try {
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("셰어링반품신청_"+today+".xls", check_browser(request)));
			String SheetName = "셰어링 반품 신청";
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("주문번호");
			excelTitle.add("주문일시");
			excelTitle.add("주문자명(ID)");
			excelTitle.add("휴대폰번호");
			excelTitle.add("판매자명(ID)");
			excelTitle.add("상품코드");
			excelTitle.add("주문상태");
			excelTitle.add("상품명");
			excelTitle.add("보증금");
			excelTitle.add("셰어링료");
			excelTitle.add("수량");
			excelTitle.add("상품금액");
			excelTitle.add("배송비");
			excelTitle.add("쿠폰할인");
			excelTitle.add("주문금액");
			excelTitle.add("포인트사용");
			excelTitle.add("결제금액");
			excelTitle.add("결제수단");
			excelTitle.add("카드사");
			excelTitle.add("이름");
			excelTitle.add("연락처");
			excelTitle.add("우편번호");
			excelTitle.add("도로명 주소(기본주소+상세주소)");
			excelTitle.add("지번 주소(기본주소+상세주소)");
			excelTitle.add("배송메모");
			excelTitle.add("택배사");
			excelTitle.add("송장번호");
			excelTitle.add("배송일자");
			excelTitle.add("도착일자");
			excelTitle.add("반품 신청일시");
			excelTitle.add("반품 완료일시");
			excelTitle.add("일셰어링료");
			excelTitle.add("셰어링기간(사용일수/잔여일)");
			excelTitle.add("셰어링이용금액");
			excelTitle.add("환불금액");
			excelTitle.add("반품 사유");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("ORD_CD");
			CellName.add("ORD_REG_DATE");
			CellName.add("ORDER_INFO");			
			CellName.add("ORD_HP");
			CellName.add("SELLER_INFO");
			CellName.add("PROD_CODE");
			CellName.add("PROC_STAT_CD_NAME");
			CellName.add("PROD_NM");			
			CellName.add("DEPOSIT");
			CellName.add("SHARING_PERIOD_PRICE");
			CellName.add("ORD_QTY");
			CellName.add("PROD_PRCE");
			CellName.add("DLV_PRCE");
			CellName.add("CPN_USE_AMT");			
			CellName.add("TOTAL_ORDER_PRICE");
			CellName.add("POINT_USE_AMT");
			CellName.add("REAL_SELT_AMT");
			CellName.add("PAYMENT");
			CellName.add("CARD_COMP_NM");
			CellName.add("RCV_NM");			
			CellName.add("RCV_TEL");
			CellName.add("ZIP_CD");
			CellName.add("DORO_ADDR_INFO");
			CellName.add("JIBEN_ADDR_INFO");
			CellName.add("DLV_MSG");
			CellName.add("DLV_COM_CD_NAME");			
			CellName.add("INVC_NO");
			CellName.add("DLV_REGIST_DT");
			CellName.add("DLV_END_DT");
			CellName.add("REQUEST_DT");
			CellName.add("CHG_DLV_END_DT");
			CellName.add("SHARING_PRICE");			
			CellName.add("SHAR_PERIOD");
			CellName.add("SHAR_USING_MONEY");
			CellName.add("SHAR_RETURN_MONEY");
			CellName.add("CHG_REASON");
			
			List<String> sizeList = new ArrayList<String>();
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("50");
			sizeList.add("50");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("40");
	
			mav.addObject("fileName", "셰어링반품신청_"+today+".xls");
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("sizeList", sizeList);
			
			mav.addObject("excelList", adminSharOrderService.selectListSharRtnExcel(inParam));
			mav.addObject("param", inParam);

		} catch (Exception e) {e.printStackTrace();}
	    return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 주문취소 조회 엑셀다운로드
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @date 2015. 10. 27
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListSharCancelExcelDownload.do")
	public ModelAndView selectListSharCancelExcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT SHARING CANCEL LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView2");
		try {
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", getDisposition("셰어링주문취소_"+today+".xls", check_browser(request)));
			String SheetName = "셰어링 주문취소";
			
			List<String> excelTitle = new ArrayList<String>();
			
			excelTitle.add("주문번호");
			excelTitle.add("주문일시");
			excelTitle.add("주문자명(ID)");
			excelTitle.add("휴대폰번호");
			excelTitle.add("판매자명(ID)");
			excelTitle.add("상품코드");
			excelTitle.add("주문상태");
			excelTitle.add("상품명");
			excelTitle.add("보증금");
			excelTitle.add("셰어링료");
			excelTitle.add("수량");
			excelTitle.add("상품금액");
			excelTitle.add("배송비");
			excelTitle.add("쿠폰할인");
			excelTitle.add("주문금액");
			excelTitle.add("포인트사용");
			excelTitle.add("결제금액");
			excelTitle.add("결제수단");
			excelTitle.add("카드사");
			excelTitle.add("이름");
			excelTitle.add("연락처");
			excelTitle.add("우편번호");
			excelTitle.add("도로명 주소(기본주소+상세주소)");
			excelTitle.add("지번 주소(기본주소+상세주소)");
			excelTitle.add("배송메모");
			excelTitle.add("택배사");
			excelTitle.add("송장번호");
			excelTitle.add("배송일자");
			excelTitle.add("도착일자");
			excelTitle.add("반납/회수신청일시");
			excelTitle.add("반납/회수 완료일시");
			excelTitle.add("일셰어링료");
			excelTitle.add("셰어링기간(사용일수/잔여일)");
			excelTitle.add("셰어링이용금액");
			excelTitle.add("환불금액");
			excelTitle.add("주문취소 사유");
	
			List<String> CellName = new ArrayList<String>();
			CellName.add("ORD_CD");
			CellName.add("ORD_REG_DATE");
			CellName.add("ORDER_INFO");			
			CellName.add("ORD_HP");
			CellName.add("SELLER_INFO");
			CellName.add("PROD_CODE");
			CellName.add("PROC_STAT_CD_NAME");
			CellName.add("PROD_NM");			
			CellName.add("DEPOSIT");
			CellName.add("SHARING_PERIOD_PRICE");
			CellName.add("ORD_QTY");
			CellName.add("PROD_PRCE");
			CellName.add("DLV_PRCE");
			CellName.add("CPN_USE_AMT");			
			CellName.add("TOTAL_ORDER_PRICE");
			CellName.add("POINT_USE_AMT");
			CellName.add("REAL_SELT_AMT");
			CellName.add("PAYMENT");
			CellName.add("CARD_COMP_NM");
			CellName.add("RCV_NM");			
			CellName.add("RCV_TEL");
			CellName.add("ZIP_CD");
			CellName.add("DORO_ADDR_INFO");
			CellName.add("JIBEN_ADDR_INFO");
			CellName.add("DLV_MSG");
			CellName.add("DLV_COM_CD_NAME");			
			CellName.add("INVC_NO");
			CellName.add("DLV_REGIST_DT");
			CellName.add("DLV_END_DT");
			CellName.add("CHG_REGIST_DT");
			CellName.add("CHG_DLV_END_DT");
			CellName.add("SHARING_PRICE");			
			CellName.add("SHAR_PERIOD");
			CellName.add("SHAR_USING_MONEY");
			CellName.add("SHAR_RETURN_MONEY");
			CellName.add("CANC_REASON");
			
			List<String> sizeList = new ArrayList<String>();
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("50");
			sizeList.add("50");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("30");
			sizeList.add("20");
			sizeList.add("20");
			sizeList.add("40");
	
			mav.addObject("fileName", "셰어링주문취소_"+today+".xls");
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			mav.addObject("sizeList", sizeList);
			
			mav.addObject("excelList", adminSharOrderService.selectListSharCanExcel(inParam));
			mav.addObject("param", inParam);

		} catch (Exception e) {e.printStackTrace();}
	    return mav;
	}

	/**
	 * <pre>
	 * 주문 상태 변경
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 28
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/updateSharOrderState.do")
	public ModelAndView updateSharOrderState(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT UPDATE SHARING ORDER STATE START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		try {
			mav.addObject("result", adminSharOrderService.updateSharOrderState(inParam));
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	/**
	 * <pre>
	 * 회수,교환 요청 접수
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 29
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/insertSharAllType.do")
	public ModelAndView insertSharWithDraw(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("INSERT SHARING AllType");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		String mAdmId = session.getADM_ID();
		String mAdmNm = session.getADM_NM();
		inParam.put("ADM_ID", mAdmId);	
		inParam.put("ADM_NM", mAdmNm);
		LoggerUtil.writeMap(inParam);
		ModelAndView mav = new ModelAndView();
		try {
			mav.addObject("result", adminSharOrderService.insertSharAllType(inParam));
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 주문 취소
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 01
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/cancelSharOrderState.do")
	public ModelAndView cancelSharOrderState(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ORDER SHARE CANCEL");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		String mAdmId = session.getADM_ID();
		String mAdmNm = session.getADM_NM();
		inParam.put("ADM_ID", mAdmId);	
		inParam.put("ADM_NM", mAdmNm);
		LoggerUtil.writeMap(inParam);
		ModelAndView mav = new ModelAndView();
		Map<String, Object> cancelGroup = adminSharOrderService.selectSharOrderCancelGroupInfo(inParam);
		if(Integer.parseInt(cancelGroup.get("CT").toString()) == 1){
			//단일 상품 취소
			inParam.put("BUYER_SEQ",Integer.parseInt(cancelGroup.get("MBER_SEQ").toString()));
			inParam.put("POINT_USE_AMT",Integer.parseInt(cancelGroup.get("POINT_USE_AMT").toString()));
			inParam.put("REAL_SELT_AMT",cancelGroup.get("REAL_SELT_AMT").toString());
			Map<String, Object> result = adminSharOrderService.cancelSharOrderOneItem(inParam);
			if(result.get("RESULT").equals("OK")){
				mav.addObject("result", 1);
				mav.addObject("msg", "성공");
			}else if(result.get("RESULT").equals("DB")){
				mav.addObject("result", 0);
				mav.addObject("msg", "DB UPDATE FAIL");
			}else if(result.get("RESULT").equals("API")){
				mav.addObject("result", 0);
				mav.addObject("msg", "API FAIL");
			}else{
				mav.addObject("result", 0);
				mav.addObject("msg", "ETC FAIL");
			}
		}else{
			//복합 상품 취소
			Map<String, Object> multiResult = new HashMap<String, Object>();
			String seltGbCd = (String)inParam.get("SELT_GB_CD");	//결재 구분자
			if(seltGbCd.equals("0")){
				multiResult = adminSharOrderService.cancelSaleAdminOrderMultiItemZero(inParam);
			}else{
				multiResult = adminSharOrderService.cancelSharOrderMultiItem(inParam);
			}
			if(multiResult.get("RESULT").equals("OK")){
				mav.addObject("result", 1);
				mav.addObject("msg", "성공");
			}else if(multiResult.get("RESULT").equals("DB")){
				mav.addObject("result", 0);
				mav.addObject("msg", "DB UPDATE FAIL");
			}else if(multiResult.get("RESULT").equals("API")){
				mav.addObject("result", 0);
				mav.addObject("msg", "API FAIL");
			}else{
				mav.addObject("result", 0);
				mav.addObject("msg", "ETC FAIL");
			}
		}
		
		mav.setViewName("jsonView");
		return mav;
	}
	
	/**
	 * <pre>
	 * 반납완료 처리
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 03
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/giveUpSharOrderState.do")
	public ModelAndView giveUpSharOrderState(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("ORDER GIVE UP");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		String mAdmId = session.getADM_ID();
		String mAdmNm = session.getADM_NM();
		inParam.put("ADM_ID", mAdmId);	
		inParam.put("ADM_NM", mAdmNm);
		LoggerUtil.writeMap(inParam);
		ModelAndView mav = new ModelAndView();
		
		Map<String, Object> result = adminSharOrderService.giveUpSharOrderItem(inParam);
		if(result.get("RESULT").equals("OK")){
			mav.addObject("result", 1);
			mav.addObject("msg", "성공");
		}else if(result.get("RESULT").equals("DB")){
			mav.addObject("result", 0);
			mav.addObject("msg", "DB UPDATE FAIL");
		}else if(result.get("RESULT").equals("API")){
			mav.addObject("result", 0);
			mav.addObject("msg", "API FAIL");
		}else{
			mav.addObject("result", 0);
			mav.addObject("msg", "ETC FAIL");
		}
		
		mav.setViewName("jsonView");
		return mav;
	}
	
	/**
	 * <pre>
	 * 반품 완료 결제 처리
	 * 
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 11. 03
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/returnSharOrderState.do")
	public ModelAndView returnSharOrderState(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("RETURN ORDER PROCESSING");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		AdminSession session = (AdminSession) request.getSession().getAttribute("manager");
		String mAdmId = session.getADM_ID();
		String mAdmNm = session.getADM_NM();
		inParam.put("ADM_ID", mAdmId);	
		inParam.put("ADM_NM", mAdmNm);
		LoggerUtil.writeMap(inParam);
		ModelAndView mav = new ModelAndView();
		Map<String, Object> cancelGroup = adminSharOrderService.selectSharOrderCancelGroupInfo(inParam);
		if(Integer.parseInt(cancelGroup.get("CT").toString()) == 1){
			//단일 상품 반품 처리
			inParam.put("BUYER_SEQ",Integer.parseInt(cancelGroup.get("MBER_SEQ").toString()));
			inParam.put("POINT_USE_AMT",Integer.parseInt(cancelGroup.get("POINT_USE_AMT").toString()));
			inParam.put("REAL_SELT_AMT",cancelGroup.get("REAL_SELT_AMT").toString());
			Map<String, Object> result = adminSharOrderService.returnSharOrderOneItem(inParam);
			if(result.get("RESULT").equals("OK")){
				mav.addObject("result", 1);
				mav.addObject("msg", "성공");
			}else if(result.get("RESULT").equals("DB")){
				mav.addObject("result", 0);
				mav.addObject("msg", "DB UPDATE FAIL");
			}else if(result.get("RESULT").equals("API")){
				mav.addObject("result", 0);
				mav.addObject("msg", "API FAIL");
			}else{
				mav.addObject("result", 0);
				mav.addObject("msg", "ETC FAIL");
			}
		}else{
			//복합 상품 반품 처리
			Map<String, Object> multiResult = new HashMap<String, Object>();
			String seltGbCd = (String)inParam.get("SELT_GB_CD");	//결재 구분자
			if(seltGbCd.equals("0")){
				multiResult = adminSharOrderService.cancelSaleAdminOrderMultiItemZero(inParam);
			}else{
				multiResult = adminSharOrderService.returnSharOrderMultiItem(inParam);
			}
			if(multiResult.get("RESULT").equals("OK")){
				mav.addObject("result", 1);
				mav.addObject("msg", "성공");
			}else if(multiResult.get("RESULT").equals("DB")){
				mav.addObject("result", 0);
				mav.addObject("msg", "DB UPDATE FAIL");
			}else if(multiResult.get("RESULT").equals("API")){
				mav.addObject("result", 0);
				mav.addObject("msg", "API FAIL");
			}else{
				mav.addObject("result", 0);
				mav.addObject("msg", "ETC FAIL");
			}
		}
		
		mav.setViewName("jsonView");
		return mav;
	}
	
	/**
	 * <pre>
	 * 셰어링 주문관리 > 판매주문상세 
	 * 운송장 번호, 배송완료 시간 업데이트  처리
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 12. 08
	 * @author Y.S.KIM
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/modifySharDlvTime.do")
	public ModelAndView modifySharDlvTime(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN update DLV TIME START☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("jsonView");
		try {
			String procStatCd = (String)inParam.get("PROC_STAT_CD");	//상태코드
			if(procStatCd.equals("33") || procStatCd.equals("91")){
				inParam.put("CHG_CD", adminSharOrderService.getChgCd(inParam));
			}
			// 배송정보 업데이트 처리
			mav.addObject("result",adminSharOrderService.updateSharDlvTime(inParam));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			mav.addObject("result", 0);
		}
		return mav;
	}
	
	
	
	
	
	/**
	 * <pre>
	 * 엑셀 다운로드 브라우저 체크
	 * </pre>
	 */
	private String check_browser(HttpServletRequest request) {
		String browser = "";
		String header = request.getHeader("User-Agent");
		//신규추가된 indexof : Trident(IE11) 일반 MSIE로는 체크 안됨
		if (header.indexOf("MSIE") > -1 || header.indexOf("Trident") > -1){
		browser = "ie";
		}
		//크롬일 경우
		else if (header.indexOf("Chrome") > -1){
		browser = "chrome";
		}
		//오페라일경우
		else if (header.indexOf("Opera") > -1){
		browser = "opera";
		}
		//사파리일 경우
		else if (header.indexOf("Apple") > -1){
		browser = "sarari";
		} else {
		browser = "firfox"; 
		}
		return browser;
	}
	
	/**
	 * <pre>
	 * 엑셀 다운로드 파일명
	 * </pre>
	 */
	private String getDisposition(String down_filename, String browser_check) throws UnsupportedEncodingException {
		String prefix = "attachment;filename=";
		String encodedfilename = null;
		if (browser_check.equals("ie")) {
		encodedfilename = URLEncoder.encode(down_filename, "UTF-8").replaceAll("\\+", "%20");
		}else if (browser_check.equals("chrome")) {
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < down_filename.length(); i++){
		    char c = down_filename.charAt(i);
		    if (c > '~') {
		        sb.append(URLEncoder.encode("" + c, "UTF-8"));
		    } else {
		        sb.append(c);
		    }
		}
		encodedfilename = sb.toString();
		}else {
		encodedfilename = "\"" + new String(down_filename.getBytes("UTF-8"), "8859_1") + "\"";
		} 
		return prefix + encodedfilename;
	}

}
