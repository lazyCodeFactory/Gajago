package com.ssocio.sharing.controller.mobile;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.security.SSOCIO_AES256Cipher;
import com.ssocio.sharing.cmmn.util.JsonUtil;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.web.util.WebCommonUtil;
import com.ssocio.sharing.service.web.MobileSetupService;
import com.ssocio.sharing.vo.web.HeaderVO;
import com.ssocio.sharing.vo.web.WebSession;

@Controller
public class MobileSetupController extends MobileReferController {
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(MobileSetupController.class);
	
	@Autowired
	private MobileSetupService mobileSetupService;
	

	/**
	* <pre>
	* 1. 메소드명 : info
	* 2. 작성일 : 2015. 9. 16. 오후 2:22:04
	* 3. 작성자 : guitarhyo
	* 4. 설명 : 모바일 웹뷰 설정 화면
	* </pre>
	* @param request
	* @param response
	* @param inParam
	* @return
	* @throws Exception
	*/
	@RequestMapping("/mobile/setup/selectInfo.do")
	public ModelAndView info(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★   /mobile/setup/info.do");
		ModelMap modelMap =  new ModelMap();
		LoggerUtil.writeMap(inParam);
		

		return new ModelAndView("web/setup/selectInfo",modelMap);
	}
	
	
//	@RequestMapping("/mobile/setup/selectPush.do")  //2015-09-15 웹뷰에서는 필요없음
//	public ModelAndView push(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
//		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★  /mobile/setup/push.do");
//		ModelMap modelMap =  new ModelMap();
//		LoggerUtil.writeMap(inParam);
//		
//
//		return new ModelAndView("web/setup/selectPush",modelMap);
//	}
	
	
	/**
	* <pre>
	* 1. 메소드명 : out
	* 2. 작성일 : 2015. 9. 16. 오후 2:24:25
	* 3. 작성자 : guitarhyo
	* 4. 설명 :회원탈퇴 화면 페이지
	* </pre>
	* @param request
	* @param response
	* @param inParam
	* @return
	* @throws Exception
	*/
	@RequestMapping("/mobile/setup/updateOut.do")
	public ModelAndView out(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★  /mobile/setup/out.do");
		ModelMap modelMap =  new ModelMap();
		LoggerUtil.writeMap(inParam);
		

		return new ModelAndView("web/setup/updateOut",modelMap);
	}
	
	/**
	* <pre>
	* 1. 메소드명 : outpass
	* 2. 작성일 : 2015. 9. 16. 오후 2:23:26
	* 3. 작성자 : guitarhyo
	* 4. 설명 :  회원탈퇴를 위한 페스워드 확인 입력페이지
	* </pre>
	* @param request
	* @param response
	* @param inParam
	* @return
	* @throws Exception
	*/
	@RequestMapping("/mobile/setup/updateOutPass.do")
	public ModelAndView outpass(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★  /mobile/setup/push.do");
		ModelMap modelMap =  new ModelMap();
		LoggerUtil.writeMap(inParam);
		
		try {
			WebSession session = (WebSession)request.getSession().getAttribute("user");
			if(WebCommonUtil.isLogin(request)){
				inParam.put("MBER_SEQ", session.getMBER_SEQ());
				modelMap.put("SSO_GB_CD", mobileSetupService.selectMberSso(inParam));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}

		return new ModelAndView("web/setup/updateOutPass",modelMap);
	}
	
	
	
	@RequestMapping("/mobile/setup/updateOutAct.do")
	public ModelAndView setLogin(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★  /mobile/setup/updateOutAct.do");
		LoggerUtil.writeMap(inParam);
		ModelAndView mav = new ModelAndView("jsonView");
		mav.addObject("retCode", "F");
		try {
			int ret = 0;
			
			if("1".equals((String)inParam.get("MBER_REG_GB_CD"))){//판매자일경우 판매중인것
				ret = mobileSetupService.selectSellerCnt(inParam);
				if(0 < ret){
					mav.addObject("retCode", "SC");
					return mav;
				}
			}
		
			ret = mobileSetupService.selectOrdCnt(inParam);
			if(0 < ret){
				mav.addObject("retCode", "OC");
				return mav;
			}
			
			
			ret = mobileSetupService.updateMberOut(inParam);
			if(0 < ret){
				mav.addObject("retCode", "S");
				HttpSession session = request.getSession();
				session.removeAttribute("user");
				Cookie[] cookies = request.getCookies();
				for (int i = 0; i < cookies.length; i++) {
					cookies[i].setMaxAge(0);                 //쿠키 유지기간을 0으로함
					cookies[i].setPath("/mobile");                    //쿠키 접근 경로 지정
					response.addCookie(cookies[i]);
				}
				return mav;
			}
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * <pre>
	 * 회원탈퇴처리
	 * 회원탈퇴처리
	 * @param request
	 * @param response
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 9. 18. 오후 12:54:46
	 * @author LeeJinSe
	 * @see com.ssocio.sharing.controller.app
	 * @비고
	 * 
	 * </pre>
	*/
	@SuppressWarnings("unchecked")
	@RequestMapping("/mobile/inf/updateMberOut.do")
	public ModelAndView updateMberOut(HttpServletRequest request, HttpServletResponse response) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("@@@@ /app/inf/updateMberOut.do IN @@@@@");
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		HeaderVO headerObj = (HeaderVO) request.getAttribute("header");
		 Map<String, Object> resultData   = new HashMap<String, Object>();
		 ModelMap outData = new ModelMap();
			Map<String, Object> bodyParam = (Map<String, Object>) request.getAttribute("body");
			
		try {
			bodyParam.put("MBER_SEQ", headerObj.getMber_seq());
			int ret = mobileSetupService.selectOrdCnt(bodyParam);
			if(0 < ret){
				outData.put("rnt_cd","F");
				outData.put("moveUrl","www.naver.com");
			}else{
				outData.put("rnt_cd","S");
			}
			if("1".equals((String)bodyParam.get("MBER_REG_GB_CD"))){//판매자일경우 판매중인것
				ret = mobileSetupService.selectOrdCnt(bodyParam);
				if(0 < ret){
					outData.put("rnt_cd","F");
					outData.put("moveUrl","www.naver.com");
				}
			}else{
				outData.put("rnt_cd","S");
			}
			if(!"F".equals(outData.get("rnt_cd"))){
				ret = mobileSetupService.updateMberOut(bodyParam);
				HttpSession session = request.getSession();
				session.removeAttribute("user");
				outData.put("rnt_cd","S");
				outData.put("moveUrl","");
				Cookie[] cookies = request.getCookies();
				for (int i = 0; i < cookies.length; i++) {
					cookies[i].setMaxAge(0);                 //쿠키 유지기간을 0으로함
					cookies[i].setPath("/mobile");                    //쿠키 접근 경로 지정
					response.addCookie(cookies[i]);
				}
			}
			resultData = RetSettMethod(request,headerObj,outData);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return new ModelAndView("jsonView",resultData);
	}
	
	
	public  Map<String, Object> RetSettMethod(HttpServletRequest request,HeaderVO headerObj, Map<String, Object> outData) throws Exception{
		
		Map<String, Object> resultData   = new HashMap<String, Object>();
		 String json="";
		 outData.put("header", headerObj);
		 String Str= "";
		 json = JsonUtil.getJsonStringfromMap(outData);
		 //api test 를 위해 구분 해놈
		if(null != request.getParameter("ENCODE_YN")){
			try {
				resultData.put("ret_data", URLEncoder.encode(json, "UTF-8"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}else{
			
			Str = SSOCIO_AES256Cipher.setAesMsg(json);
			Str = URLEncoder.encode(Str, "UTF-8");
				resultData.put("ret_data", Str);
		}
		
		return resultData;
		
	}
}
