/**<pre>
 * 1. Project Name : SSOCIO
 * 2. Package Name : com.ssocio.sharing.dao.web
 * 3. File Name	   : WebBuySharingDao.java
 * 4. Date		   : 오후 2:20 2015-08-19
 * 5. Author	   : H.M.Yang
 * 6. Note		   :
 * </pre>
 */
package com.ssocio.sharing.dao.web;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 구매관리 셰어링 DAO
 * 구매관리 셰어링 DAO
 * &#64;author H.M.Yang
 * &#64;version
 * &#64;since 2015. 8. 19. 오후 2:20:00
 * &#64;see
 * &#64;History
 *  Date          |    author    | 변경내용
 *	2015. 8. 19.  |    H.M.Yang  | 신규
 * &#64;Todo
 * </pre>
 */
@Component
public class WebBuySharingDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(WebBuySharingDao.class);

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	// -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	// -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	/**
	 * <pre>
	 * 셰어링 주문 내역 조회
	 * 셰어링 주문 내역 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharOrderHist(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharOrderHist Start");
		return sqlSession.selectList("webBuySharingMapper.selectListSharOrderHist", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 주문 내역 검색 건수 조회
	 * 셰어링 주문 내역 검색 건수 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int selectListSharOrderHistTotCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharOrderHistTotCnt Start");
		return sqlSession.selectOne("webBuySharingMapper.selectListSharOrderHistTotCnt", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 주문 내역 상품 조회
	 * 셰어링 주문 내역 상품 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharOrderProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharOrderProd Start");
		return sqlSession.selectList("webBuySharingMapper.selectListSharOrderProd", paramDto);
	}

	/**
	 * <pre>
	 * 구매관리 화면 내역 조회
	 * 셰어링, 판매, 나눔, 렌탈 주문 갯수 조회
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public Map<String, Object> selectBuyMain(Map<String, Object> paramDto) throws Exception{
		logger.info("selectBuyMain Start");
		return sqlSession.selectOne("webBuySharingMapper.selectBuyMain", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 주문 내역 주문 정보 조회
	 * 셰어링 주문 내역 주문 정보 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectSharOrderInfo(Map<String, Object> paramDto) throws Exception{
		logger.info("selectSharOrderInfo Start");
		return sqlSession.selectList("webBuySharingMapper.selectSharOrderInfo", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 주문 내역 주문 정보 조회
	 * 셰어링 주문 내역 주문 정보 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectSharOrderGrpInfo(Map<String, Object> paramDto) throws Exception{
		logger.info("selectSharOrderGrpInfo Start");
		return sqlSession.selectList("webBuySharingMapper.selectSharOrderGrpInfo", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 교환신청 내역 조회
	 * 셰어링 교환신청 내역 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharExcReqHist(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharExcReqHist Start");
		return sqlSession.selectList("webBuySharingMapper.selectListSharExcReqHist", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 교환신청 검색 건수 조회
	 * 셰어링 교환신청 검색 건수 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int selectListSharExcReqHistTotCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharExcReqHistTotCnt Start");
		return sqlSession.selectOne("webBuySharingMapper.selectListSharExcReqHistTotCnt", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 교환신청 내역 상품 조회
	 * 셰어링 교환신청 내역 상품 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharExcReqProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharExcReqProd Start");
		return sqlSession.selectList("webBuySharingMapper.selectListSharExcReqProd", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 반품신청 내역 조회
	 * 셰어링 반품신청 내역 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharTakeBaReqHist(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharTakeBaReqHist Start");
		return sqlSession.selectList("webBuySharingMapper.selectListSharTakeBaReqHist", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 반품신청 검색 건수 조회
	 * 셰어링 반품신청 검색 건수 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int selectListSharTakeBaReqHistTotCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharTakeBaReqHistTotCnt Start");
		return sqlSession.selectOne("webBuySharingMapper.selectListSharTakeBaReqHistTotCnt", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 반품신청 내역 상품 조회
	 * 셰어링 반품신청 내역 상품 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharTakeBaReqProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharTakeBaReqProd Start");
		return sqlSession.selectList("webBuySharingMapper.selectListSharTakeBaReqProd", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 주문취소 내역 조회
	 * 셰어링 주문취소 내역 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharOrderCanHist(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharOrderCanHist Start");
		return sqlSession.selectList("webBuySharingMapper.selectListSharOrderCanHist", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 주문취소 검색 건수 조회
	 * 셰어링 주문취소 검색 건수 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int selectListSharOrderCanHistTotCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharOrderCanHistTotCnt Start");
		return sqlSession.selectOne("webBuySharingMapper.selectListSharOrderCanHistTotCnt", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 주문취소 내역 상품 조회
	 * 셰어링 주문취소 내역 상품 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListSharOrderCanProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListSharOrderCanProd Start");
		return sqlSession.selectList("webBuySharingMapper.selectListSharOrderCanProd", paramDto);
	}

	/**
	 * <pre>
	 * 공통 주문 상품 목록 조회
	 * 공통 주문 상품 목록을 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListOrderProd Start");
		return sqlSession.selectList("webBuySharingMapper.selectListOrderProd", paramDto);
	}

	/**
	 * <pre>
	 * 공통 주문취소 등록
	 * 공통 주문취소를 등록 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int insertOrderCancel(Map<String, Object> paramDto) throws Exception {
		logger.info("insertOrderCancel Start");
		int count =  sqlSession.insert("webBuySharingMapper.insertOrderCancel", paramDto);
		return count;
	}

	/**
	 * <pre>
	 * 공통 주문 상품별 주문취소 코드를 저장
	 * 공통 주문 상품별 주문취소 코드를 저장 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int updateOrderProdInfoCancel(Map<String, Object> paramDto) throws Exception {
		logger.info("updateOrderProdInfoCancel Start");
		int count =  sqlSession.update("webBuySharingMapper.updateOrderProdInfoCancel", paramDto);
		return count;
	}

	/**
	 * <pre>
	 * 공통 교환/반품 신청 등록
	 * 공통 교환/반품 신청을 등록 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public String insertChgRtnProcInfo(Map<String, Object> paramDto) throws Exception {
		logger.info("insertChgRtnProcInfo Start");
		this.sqlSession.insert("webBuySharingMapper.insertChgRtnProcInfo", paramDto);
		return StringUtil.nvl((String)paramDto.get("CHG_CD"));
	}


	/**
	 * <pre>
	 * 공통 교환/반품 상품을 등록
	 * 공통 교환/반품 상품을 등록 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int insertChgProdInfo(Map<String, Object> paramDto) throws Exception {
		logger.info("insertChgProdInfo Start");
		int count =  sqlSession.insert("webBuySharingMapper.insertChgProdInfo", paramDto);
		return count;
	}

	/**
	 * <pre>
	 * 공통 주문 상품별 처리 상태 코드를 저장
	 * 공통 주문 상품별 처리 상태 코드를 저장 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int updateOrdProcStat(Map<String, Object> paramDto) throws Exception {
		logger.info("updateOrdProcStat Start");
		int count =  sqlSession.update("webBuySharingMapper.updateOrdProcStat", paramDto);
		return count;
	}

	/**
	 * <pre>
	 * 주문 상품별 구매확정 정보 저장
	 * 주문 상품별 구매확정 정보를 저장 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int insertProdBuyConfInfo(Map<String, Object> paramDto) throws Exception {
		logger.info("insertProdBuyConfInfo Start");
		int count =  sqlSession.insert("webBuySharingMapper.insertProdBuyConfInfo", paramDto);
		return count;
	}

	/**
	 * <pre>
	 * 상품 후기 정보 저장
	 * 상품 후기 정보를 저장 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int insertProdPostInfo(Map<String, Object> paramDto) throws Exception {
		logger.info("insertProdPostInfo Start");
		int count =  sqlSession.insert("webBuySharingMapper.insertProdPostInfo", paramDto);
		return count;
	}

	/**
	 * <pre>
	 * 상품 후기 사진 첨부파일 저장
	 * 상품 후기 사진 첨부파일을 저장 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public String insertFile(Map<String, Object> paramDto) throws Exception {
		logger.info("insertFile Start");
		int count =  sqlSession.insert("webBuySharingMapper.insertFile", paramDto);

		// 파일SEQ를 넘김
		return StringUtil.nvl(paramDto.get("FILE_SEQ").toString());
	}

	/**
	 * <pre>
	 * 상품 후기 사진 첨부파일 정보를 게시판 파일 정보에 저장
	 * 상품 후기 사진 첨부파일 정보를 게시판 파일 정보에 저장합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int insertBoardFile(Map<String, Object> paramDto) throws Exception {
		logger.info("insertBoardFile Start");
		int count =  sqlSession.insert("webBuySharingMapper.insertBoardFile", paramDto);

		return count;
	}

	/**
	 * <pre>
	 * 상품 후기 사진 첨부파일 삭제
	 * 상품 후기 사진 첨부파일을 삭제 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int deleteFile(Map<String, Object> paramDto) throws Exception {
		logger.info("deleteFile Start");
		int count =  sqlSession.delete("webBuySharingMapper.deleteFile", paramDto);
		return count;
	}

	/**
	 * <pre>
	 * 공통 주문 상품 배송 정보 조회
	 * 공통 주문 상품 배송 정보를 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderProdShip(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListOrderProdShip Start");
		return sqlSession.selectList("webBuySharingMapper.selectListOrderProdShip", paramDto);
	}

	/**
	 * <pre>
	 * 공통 주문 상품 배송 정보 이력 조회
	 * 공통 주문 상품 배송 정보 이력을 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 11. 03. 오전 10:18:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListInvcProcHist(String invcNo) throws Exception{
		logger.info("selectListInvcProcHist Start");
		return sqlSession.selectList("webBuySharingMapper.selectListInvcProcHist", invcNo);
	}

	/**
	 * <pre>
	 * 공통 주문 상품 교환/반품/반납/회수 배송 정보 조회
	 * 공통 주문 상품 교환/반품/반납/회수 배송 정보를 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderProdChgShip(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListOrderProdChgShip Start");
		return sqlSession.selectList("webBuySharingMapper.selectListOrderProdChgShip", paramDto);
	}

	/**
	 * <pre>
	 * 공통 주문 주소 조회
	 * 공통 주문 주소 조회를 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectOrderAddrInfo(Map<String, Object> paramDto) throws Exception{
		logger.info("selectOrderAddrInfo Start");
		return sqlSession.selectList("webBuySharingMapper.selectOrderAddrInfo", paramDto);
	}

	/**
	 * <pre>
	 * 공통 주문 주소 변경 저장
	 * 공통 주문 주소 변경 저장합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int updateOrderAddrInfo(Map<String, Object> paramDto) throws Exception {
		logger.info("updateOrderAddrInfo Start");
		int count =  sqlSession.update("webBuySharingMapper.updateOrderAddrInfo", paramDto);

		return count;
	}

	/**
	 * <pre>
	 * 공통 배송 주문 상품 목록 조회
	 * 공통 배송 주문 상품 목록을 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListShipOrderProd(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListShipOrderProd Start");
		return sqlSession.selectList("webBuySharingMapper.selectListShipOrderProd", paramDto);
	}

	/**
	 * <pre>
	 * 주문취소 - 단일,복합 상품 취소 구분 획득
	 * </pre>
	 */
	public Map<String, Object> selectMobileSharOrderCancelGroupInfo(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("webBuySharingMapper.selectMobileSharOrderCancelGroupInfo",inParam);
	}

	/**
	 * <pre>
	 * 주문취소 - 사유 테이블에 삽입
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 01
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertMobileSharOrderCancelReason(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.insert("webBuySharingMapper.insertMobileSharOrderCancelReason", inParam);
		} catch (Exception e) {
			logger.error("insertSharOrderCancelReason DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문취소 - 주문 테이블에 상태코드 변경
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 01
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateMobileSharOrderTableCancelState(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("webBuySharingMapper.updateMobileSharOrderTableCancelState", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrderTableCancelState DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문취소 - cancel code 생성
	 * </pre>
	 */
	public String selectMobileOrderCancelCode(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("webBuySharingMapper.selectMobileOrderCancelCode",inParam);
	}

	/**
	 * <pre>
	 * 쿠폰원복 - 쿠폰테이블 변경
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 01
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateMobileSharOrderCouponTable(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("webBuySharingMapper.updateMobileSharOrderCouponTable", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrderCouponTable DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 주문취소 - 주문상품 테이블에 상태코드 변경
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 01
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateMobileSharOrderProductTableCancelState(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("webBuySharingMapper.updateMobileSharOrderProductTableCancelState", inParam);
		} catch (Exception e) {
			logger.error("updateSharOrderProductTableCancelState DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 포인트 원복 - 회원테이블 변경
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 01
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int updateMobileMemberTableForPoint(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("webBuySharingMapper.updateMoboileMemberTableForPoint", inParam);
		} catch (Exception e) {
			logger.error("updateMemberTableForPoint DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 포인트 원복 - 사용이력 쌓기
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 01
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertMobilePointLogTable(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.update("webBuySharingMapper.insertMobilePointLogTable", inParam);
		} catch (Exception e) {
			logger.error("insertPointLogTable DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}


	/**
	 * <pre>
	 * 결제취소 - 카드결제 코드 획득
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 01
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectMobileTradeNumber(Map<String, Object> inParam) throws Exception {
		Map<String, Object> result = null;
		try {
			result = sqlSession.selectOne("webBuySharingMapper.selectMobileTradeNumber", inParam);
		} catch (Exception e) {
			logger.error("selectTradeNumber DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return result;
	}

	/**
	 * <pre>
	 * 주문취소 - 카드결제정보 저장
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 01
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int insertOrdCancelInfo(Map<String, Object> inParam) throws Exception {
		int count = 0;
		try {
			count = sqlSession.insert("webBuySharingMapper.insertOrdCancelInfo", inParam);
		} catch (Exception e) {
			logger.error("insertOrdCancelInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return count;
	}

	/**
	 * <pre>
	 * 결제취소 - 상품 결제 기본 정보
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 02
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public Map<String, Object> selectMobileDefaultProductCancelInfo(Map<String, Object> inParam) throws Exception {
		logger.info("selectDefaultProductCancelInfo Start");
		Map<String, Object> productInfo = null;
		try {
			productInfo =  sqlSession.selectOne("webBuySharingMapper.selectMobileDefaultProductCancelInfo", inParam);
		} catch (Exception e) {
			logger.error("selectDefaultProductCancelInfo DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return productInfo;
	}

	/**
	 * <pre>
	 * 주문취소 - 쿠폰정보
	 * </pre>
	 */
	public Map<String, Object> selectProdCpnCd(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("webBuySharingMapper.selectProdCpnCd",inParam);
	}

	/**
	 * <pre>
	 * 결제취소 - 주문 최종상태 유무
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 02
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectMobileOrderNotCancelCount(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("webBuySharingMapper.selectOrderNotCancelCount",inParam);
	}

	/**
	 * <pre>
	 * 결제취소 - 묶음배송 최종상태 유무
	 *
	 * &#64;param inParam
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;date 2015. 11. 02
	 * &#64;author Y.S.KIM
	 * &#64;see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public int selectNotCancelDlvGroupCount(Map<String, Object> inParam) throws Exception {
		return sqlSession.selectOne("webBuySharingMapper.selectNotCancelDlvGroupCount",inParam);
	}

	/**
	 * <pre>
	 * 공통 환불계좌 등록
	 * 공통 환불께좌을 등록 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 11. 11. 오후 2:20:00
	 * &#64;author M.C.JUNG
	 * &#64;비고
	 *
	 * </pre>
	 */
	public String insertRfndProcInfo(Map<String, Object> paramDto) throws Exception {
		logger.info("insertRfndProcInfo Start");
		this.sqlSession.insert("webBuySharingMapper.insertRfndProcInfo", paramDto);
		return StringUtil.nvl((String)paramDto.get("RFND_CD"));
	}

	/**
	 * <pre>
	 * 공통 환불상품 등록
	 * 공통 환불상품을 등록 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 11. 11. 오후 2:20:00
	 * &#64;author M.C.JUNG
	 * &#64;비고
	 *
	 * </pre>
	 */
	public int insertRfndProdInfo(Map<String, Object> paramDto) throws Exception {
		logger.info("insertRfndProdInfo Start");
		int count =  sqlSession.insert("webBuySharingMapper.insertRfndProdInfo", paramDto);
		return count;
	}

	/**
	 * <pre>
	 * 공통 은행정보 조회
	 * 공통 은행정보 목록을 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 11. 11. 오후 2:20:00
	 * &#64;author M.C.JUNG
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListBank(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListOrderProd Start");
		return sqlSession.selectList("webBuySaleMapper.selectListBank", paramDto);
	}

	/**
	 * <pre>
	 * 공통 교환배송 정보 조회
	 * 공통 교환배송 정보를 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 11. 12. 오후 2:20:00
	 * &#64;author M.C.JUNG
	 * &#64;비고
	 *
	 * </pre>
	 */
	public List<Map<String, Object>> selectListOrderProdRtnShip(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListOrderProdRtnShip Start");
		return sqlSession.selectList("webBuySharingMapper.selectListOrderProdRtnShip", paramDto);
	}

	/**
	 * <pre>
	 * 셰어링 주문취소 검색 건수 조회
	 * 셰어링 주문취소 검색 건수 조회 합니다.
	 * &#64;param paramDto
	 * &#64;return
	 * &#64;throws Exception
	 * &#64;exception
	 * &#64;date 2015. 8. 19. 오후 2:20:00
	 * &#64;author H.M.Yang
	 * &#64;비고
	 *
	 * </pre>
	 */
	public String selectOrdProcInfo(Map<String, Object> paramDto) throws Exception{
		logger.info("selectOrdProcInfo Start");
		return sqlSession.selectOne("webBuySharingMapper.selectOrdProcInfo", paramDto);
	}

	public int updateProdPostInfo(Map<String, Object> paramDto) {
		logger.info("updateProdPostInfo Start");
		int count = sqlSession.insert("webBuySharingMapper.updateProdPostInfo", paramDto);
		return count;
	}

	public int updateBoardFile(Map<String, Object> paramDto) {
		logger.info("updateBoardFile Start");
		int count = sqlSession.insert("webBuySharingMapper.updateBoardFile", paramDto);

		return count;
	}

	public int modifyBoardFile(Map<String, Object> paramDto) {
		logger.info("modifyBoardFile Start");
		int count = sqlSession.insert("webBuySharingMapper.modifyBoardFile", paramDto);

		return count;
	}

	public int deleteBoardFile(Map<String, Object> paramDto) {
		logger.info("deleteBoardFile Start");
		int count = sqlSession.insert("webBuySharingMapper.deleteBoardFile", paramDto);

		return count;
	}

	public int removeBoardFile(Map<String, Object> paramDto) {
		logger.info("removeBoardFile Start");
		int count = sqlSession.insert("webBuySharingMapper.removeBoardFile", paramDto);

		return count;
	}

	public String  selectMobileSharOrderCancelOrdcd(String ORD_CD) throws Exception {
		return sqlSession.selectOne("webBuySharingMapper.selectMobileSharOrderCancelOrdcd",ORD_CD);
	}

	/**
	 * <pre>
	 * 공통 주문 상품별 처리 상태 코드를 저장
	 * 공통 주문 상품별 처리 상태 코드를 저장 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 *
	 * </pre>
	 */
	public int updateInvcInfo(Map<String, Object> paramDto) throws Exception {
		logger.info("updateInvcInfo Start");
		int count =  sqlSession.update("webBuySharingMapper.updateInvcInfo", paramDto);
		return count;
	}
	
	
	/**
	 * <pre>
	 * 공통 주문 상품별 처리 상태 코드를 저장
	 * 공통 주문 상품별 처리 상태 코드를 저장 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception
	 * @exception
	 * @date 2015. 8. 19. 오후 2:20:00
	 * @author H.M.Yang
	 * @비고
	 *
	 * </pre>
	 */
	public int selectPordPostCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectPordPostCnt Start");
		int count = sqlSession.selectOne("webBuySharingMapper.selectPordPostCnt", paramDto);
		return count;
	}

}