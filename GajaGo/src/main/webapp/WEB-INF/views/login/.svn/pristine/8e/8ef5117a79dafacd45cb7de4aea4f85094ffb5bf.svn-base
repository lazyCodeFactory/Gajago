package com.ssocio.sharing.cmmn.instance.cmmncode;

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <pre>
 * 공통코드헬퍼
 * 
 * @author Administrator
 * @version 
 * @since 2015. 2. 12. 오후 8:31:11
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 2. 12.  |    Administrator       | 신규 
 * @Todo
 * </pre>
 */
public class CmmnCodeHelper {

  // --------------------------------------------------------------------------
  // # Log 설정
  // --------------------------------------------------------------------------
  private static final Logger logger = LoggerFactory.getLogger(CmmnCodeHelper.class);
  
  private CmmnCodeHelper(){}

  /**
   * <pre>
   * 해당 groupCode 대한 코드정보를 얻어옴
   * 
   * @param groupCode
   * @return
   * @throws Exception 
   * @exception 
   * @date 2014. 8. 5. 오후 8:50:16
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  private static CmmnCodeTable getCodeTable(String groupCode) throws Exception {
    return CmmnCodeTableManager.getInstance().getCodeTableForType(groupCode);
  }

  /**
   * <pre>
   * groupCode와 코드명을 가지고 코드값을 찾아옴
   * 
   * @param groupCode
   * @param codeName
   * @return
   * @throws Exception 
   * @exception 
   * @date 2014. 8. 5. 오후 8:50:46
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public static String lookUpCode(String groupCode, String codeName) throws Exception {
    return CmmnCodeTableManager.getInstance().lookUpCode(groupCode, codeName);
  }
  
  /**
   * <pre>
   * groupCode와 코드값을 가지고 코드명을 찾아옴
   * 
   * @param groupCode
   * @param codeId
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 8:51:57
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public static String lookUpCodeNm(String groupCode, String codeId) {
    try {
      return CmmnCodeTableManager.getInstance().lookUpCodeNm(groupCode, codeId);
    } catch (Exception e) {
      logger.error("lookUpText e : " + e);
    }
    return "";
  }

  /**
   * <pre>
   * 인스턴스코드값(codeId)의 리스트를 배열로 구함
   * 
   * @param groupCode
   * @return
   * @throws Exception 
   * @exception 
   * @date 2014. 8. 5. 오후 8:52:47
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String[] listInstanceCds(String groupCode) throws Exception {
    return getCodeTable(groupCode).listCodes();
  }

  /**
   * <pre>
   * 인스턴스코드명 (codeName)의 리스트를 배열로 구함
   * 
   * @param groupCode
   * @return
   * @throws Exception 
   * @exception 
   * @date 2014. 8. 5. 오후 8:53:09
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String[] listInstanceTexts(String groupCode) throws Exception {
    return getCodeTable(groupCode).listCodeNms();
  }

  /**
   * <pre>
   * 코드테이블 매니저를 직접 핸들링
   * 
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 8:54:50
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public static CmmnCodeTableManager getCodeTableManager() {
    return CmmnCodeTableManager.getInstance();
  }

  /**
   * <pre>
   * 해당 codeId에 대한 CodeDescriptor객체를 구함
   * 
   * @param groupCode
   * @param codeId
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 8:55:21
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public static CmmnCodeDescriptor getCodeDescriptor(String groupCode, String codeId) {
    try {
      return getCodeTable(groupCode).getCodeDescriptor(codeId);
    } catch (Exception e) {
      return null;
    }
  }

  /**
   * <pre>
   * groupCode에 해당하는 코드리스트를 Map으로 변환하여 찾아옴
   * 
   * @param groupCode
   * @return
   * @throws Exception 
   * @exception 
   * @date 2014. 8. 5. 오후 8:55:55
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public static Map<String, Object> getCodeMap(String groupCode) throws Exception {
    return CmmnCodeTableManager.getInstance().getCodeMap(groupCode);
  }


  /**
   * 인스턴스id,인스턴스cd에 해당하는 코드를 xml문서로 변환함 웹단말에서 동적인 콤보처리를 위해 사용됨 ㅇ xml 문서 형태는
   * 아래와 같다. <DATA> <instance> <컨트롤명 인스턴스Id="인스턴스Cd" /> <컨트롤명 인스턴스Id="인스턴스Cd"
   * /> </instance> </DATA>
   * 
   * @param controlName 컨트롤명(콤보의 name)
   * @param map groupCode=codeId 인 맵
   * @return Map을 xml문서로 전환한 string
   **/
  //public static String toXMLString(String ctrName,CodeTable codeTable) {
  //
  //  String[] codes = codeTable.listInstanceCds(); String[] meanings = codeTable.listInstanceTexts(); 
  //  StringBuffer sb = new StringBuffer();
  //  sb.append("<DATA><instance>");
  //  for(int i=0,size=codes.length;i<size;i++){
  //    sb.append("<").append(ctrName).append(" key=\"").
  //    append(codes[i]).append("\"") .append(" value=\"").
  //    append(meanings[i]).append("\" />"); 
  //  }
  //  sb.append("</instance></DATA>"); return sb.toString(); 
  //}
   
  /**
   * groupCode에 해당하는 코드들의 xml문서
   * 
   * @param ctrName 웹단말 콤보명
   * @param groupCode 인스턴스Id
   * @return xml문서로 전환한 string
   **/
  //public static String toXMLString(String ctrName,String groupCode) throws Exception {
  //    
  //  CodeTable codeTable = getCodeTable(groupCode); 
  //  return  toXMLString(ctrName,codeTable);
  //}

}
