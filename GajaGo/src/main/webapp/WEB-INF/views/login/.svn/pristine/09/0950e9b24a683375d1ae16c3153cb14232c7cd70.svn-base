package com.ssocio.sharing.controller.admin;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.admin.util.CommonUtil;
import com.ssocio.sharing.cmmn.util.CmmnCnst;
import com.ssocio.sharing.cmmn.util.DateUtil;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.service.admin.AdminCodeService;
import com.ssocio.sharing.service.admin.AdminEvtService;


/**
 * <pre>
 * 브랜드 콘트롤러
 * 브랜드 콘트롤러
 * @author Y.I.Chun
 * @version
 * @since 2015. 7. 8. 오후 5:50:30
 * @see
 * @History
 * Date			|	author	    | 변경 내용
 * 2015. 7. 8.	|	Y.I.Chun	| 신규
 * @비고
 * </pre>
 */
@Controller
public class AdminEvtController extends AdminReferController {
	
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminEvtController.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private AdminEvtService adminEvtService;
	
	@Autowired
	private AdminCodeService adminCodeService;
	
	
// 유입경로 할인 시작페이지
	@RequestMapping("/admin/evt/selectEvtView.do")
	public ModelAndView selectEvtView(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
	
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtView START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		
		try {
			
			mav.addObject("list", adminEvtService.startUrl());
			mav.setViewName("admin/evt/selectListEvt");
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtView END☆★☆★☆★☆★☆★☆★☆");
		return mav;
		
	}
	
	//이벤트 등록화면
	@RequestMapping("/admin/evt/insertEvtOpen.do")
	public ModelAndView insertEventOpen(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception   {
		
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		// 공통코드 조회
		try {
			// 공통 코드 조회 - 쿠폰사용채널
			inParam.put("S_GROUP_CODE", CmmnCnst.evtGbCd);			
			mav.addObject("evtGbCd", adminCodeService.selectListCodeGroup(inParam).get("selectListCodeGroup"));
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		mav.setViewName("admin/evt/insertEvt");
		
		return mav;
		
	}
	
	//이벤트 등록 후 eventlist로 이동
	@RequestMapping("/admin/evt/insertEvt.do")
	public ModelAndView insertEvent(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,MultipartHttpServletRequest req) throws Exception   {
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN insertEvent START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
							
		try {

			adminEvtService.insertEvent(inParam,req);
			mav.addObject("list", adminEvtService.startUrl());
			mav.setViewName("admin/evt/selectListEvt");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN insertEvent END☆★☆★☆★☆★☆★☆★☆");
		return mav;
		
	}
	
	
	@RequestMapping("/admin/evt/selectEvt.do")
	public ModelAndView selectEvt(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
	
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvt START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		
		String evtGbCd[] = null;
		String exposureYn[] = null;
		String evtStateYn[] = null;
		evtGbCd =request.getParameterValues("EVT_GB_CD[]");
		exposureYn =request.getParameterValues("EXPOSURE_YN[]");
		evtStateYn =request.getParameterValues("EVT_STATE_YN[]");
		
		try{
		
			mav.addObject("list", adminEvtService.selectEvt(inParam,evtGbCd,exposureYn,evtStateYn));		
		
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		mav.setViewName("admin/evt/selectListEvt");
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvt END☆★☆★☆★☆★☆★☆★☆");
		return mav;
		
	}
	
	
	@RequestMapping("/admin/evt/selectEvtDtl.do")
	public ModelAndView selectEvtDtl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtDtl START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
		String dtlFlag = "A";
				
		try {

			mav.addObject("list", adminEvtService.selectEvtDtl(inParam,evtGrpCd,dtlFlag));		
			mav.setViewName("admin/evt/selectEvtDtl");
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtDtl END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	
	}
	
	
	@RequestMapping("/admin/evt/selectEvtJoinMber.do")
	public ModelAndView selectEvtJoinMber(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtJoinMber START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
				
		String mberEmail = request.getParameter("MBER_EMAIL");
		String mberGbCd[] = request.getParameterValues("MBER_GB_CD[]");
		String mberRegGbCd[] = request.getParameterValues("MBER_REG_GB_CD[]");
		String dateChk = request.getParameter("DATE_CHK");
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
				
		try {

			mav.addObject("list", adminEvtService.selectEvtJoinMber(inParam,mberEmail,mberGbCd,mberRegGbCd,dateChk,evtGrpCd));		
			mav.setViewName("admin/evt/evtJoinPopup");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtJoinMber END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	
	}
	
	@RequestMapping("/admin/evt/selectEvtJoinMberExcelDownload.do")
	public ModelAndView selectEvtJoinMberExcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam)
	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtJoinMberExcelDownload START☆★☆★☆★☆★☆★☆★☆");
		
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView");
		LoggerUtil.writeMap(inParam);
		
		String mberEmail = request.getParameter("MBER_EMAIL");
		String mberGbCd[] = request.getParameterValues("MBER_GB_CD[]");
		String mberRegGbCd[] = request.getParameterValues("MBER_REG_GB_CD[]");
		String dateChk = request.getParameter("DATE_CHK");
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
		String todate = null;
		
		try {
			todate = DateUtil.toDateString("yyyy.MM.dd");
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition"
					, CommonUtil.getDisposition("SSOCIO이벤트 참여 회원_" + todate + ".xls", CommonUtil.check_browser(request)));
		
			String SheetName = "이벤트 참여 회원";
			
			List<String> excelTitle = new ArrayList<String>();
			excelTitle.add("No");
			excelTitle.add("참여일시");
			excelTitle.add("아이디");
			excelTitle.add("회원구분");
			excelTitle.add("가입구분");
			
			List<String> CellName = new ArrayList<String>();
			CellName.add("NO"); // No
			CellName.add("REGIST_DT"); // 참여일시
			CellName.add("MBER_EMAIL"); // ID
			CellName.add("MBER_GB_CD_NM"); // 회원구분
			CellName.add("MBER_REG_GB_CD_NM"); // 가입구분			
		
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			
			mav.addObject("excelList", adminEvtService.selectEvtJoinMberExcelDownload(inParam,mberEmail,mberGbCd,mberRegGbCd,dateChk,evtGrpCd));	
			mav.addObject("param", inParam);

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtJoinMberExcelDownload END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}
	
	
	@RequestMapping("/admin/evt/selectEvtWinMber.do")
	public ModelAndView selectEvtWinMber(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtWinMber START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
				
		String mberEmail = request.getParameter("MBER_EMAIL");
		String mberGbCd[] = request.getParameterValues("MBER_GB_CD[]");
		String mberRegGbCd[] = request.getParameterValues("MBER_REG_GB_CD[]");
		String dateChk = request.getParameter("DATE_CHK");
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
				
		try {

			mav.addObject("list", adminEvtService.selectEvtWinMber(inParam,mberEmail,mberGbCd,mberRegGbCd,dateChk,evtGrpCd));		
			mav.setViewName("admin/evt/evtWinPopup");
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtWinMber END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	
	}
	
	@RequestMapping("/admin/evt/selectEvtWinMberExcelDownload.do")
	public ModelAndView selectEvtWinMberExcelDownload(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam)
	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtWinMberExcelDownload START☆★☆★☆★☆★☆★☆★☆");
		
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView");
		LoggerUtil.writeMap(inParam);
		
		String mberEmail = request.getParameter("MBER_EMAIL");
		String mberGbCd[] = request.getParameterValues("MBER_GB_CD[]");
		String mberRegGbCd[] = request.getParameterValues("MBER_REG_GB_CD[]");
		String dateChk = request.getParameter("DATE_CHK");
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
		String todate = null;
		
		try {
			todate = DateUtil.toDateString("yyyy.MM.dd");
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition"
					, CommonUtil.getDisposition("SSOCIO이벤트 당첨 회원_" + todate + ".xls", CommonUtil.check_browser(request)));
		
			String SheetName = "이벤트 당첨 회원";
			
			List<String> excelTitle = new ArrayList<String>();
			excelTitle.add("No");
			excelTitle.add("참여일시");
			excelTitle.add("당첨일시");
			excelTitle.add("아이디");
			excelTitle.add("회원구분");
			excelTitle.add("가입구분");
			
			List<String> CellName = new ArrayList<String>();
			CellName.add("NO"); // No
			CellName.add("REGIST_DT"); // 참여일시
			CellName.add("WIN_DT"); // 당첨일시
			CellName.add("MBER_EMAIL"); // 아이디
			CellName.add("MBER_GB_CD_NM"); // 회원구분
			CellName.add("MBER_REG_GB_CD_NM"); // 가입구분			
		
			mav.addObject("SheetName", SheetName);
			mav.addObject("excelTitle", excelTitle);
			mav.addObject("CellName", CellName);
			
			mav.addObject("excelList", adminEvtService.selectEvtWinMberExcelDownload(inParam,mberEmail,mberGbCd,mberRegGbCd,dateChk,evtGrpCd));	
			mav.addObject("param", inParam);

		} catch (Exception e) {
			e.printStackTrace();
		}
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectEvtWinMberExcelDownload END☆★☆★☆★☆★☆★☆★☆");
		return mav;
	}
	
	
	@RequestMapping("/admin/evt/updateEvtJoinMber.do")
	public ModelAndView updateEvtJoinMber(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN updateEvtJoinMber START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		String mberSeq[] = request.getParameterValues("MBER_SEQ[]");
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
		String mberEmail = request.getParameter("MBER_EMAIL");
		String mberGbCd[] = request.getParameterValues("MBER_GB_CD[]");
		String mberRegGbCd[] = request.getParameterValues("MBER_REG_GB_CD[]");
		String dateChk = request.getParameter("DATE_CHK");
	
		int cnt=0;
		cnt = mberSeq.length;
		String message = cnt+"명의 회원을 당첨시켰습니다.";
		inParam.put("message", message);
		
		try {

			adminEvtService.updateEvtJoinMber(inParam,mberSeq,evtGrpCd);		
						
			mav.addObject("list", adminEvtService.selectEvtJoinMber(inParam,mberEmail,mberGbCd,mberRegGbCd,dateChk,evtGrpCd));		
			mav.setViewName("admin/evt/evtJoinPopup");
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN selectUseList END☆★☆★☆★☆★☆★☆★☆");
			
		return mav;
		
	}
	
	
	@RequestMapping("/admin/evt/updateEvtWinMber.do")
	public ModelAndView updateEvtWinMber(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN updateEvtWinMber START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		String mberSeq[] = request.getParameterValues("MBER_SEQ[]");
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
		String mberEmail = request.getParameter("MBER_EMAIL");
		String mberGbCd[] = request.getParameterValues("MBER_GB_CD[]");
		String mberRegGbCd[] = request.getParameterValues("MBER_REG_GB_CD[]");
		String dateChk = request.getParameter("DATE_CHK");
	
		int cnt=0;
		cnt = mberSeq.length;
		String message = cnt+"명의 회원을 당첨 취소시켰습니다.";
		inParam.put("message", message);
		
		try {

			adminEvtService.updateEvtWinMber(inParam,mberSeq,evtGrpCd);		
						
			mav.addObject("list", adminEvtService.selectEvtWinMber(inParam,mberEmail,mberGbCd,mberRegGbCd,dateChk,evtGrpCd));		
			mav.setViewName("admin/evt/evtJoinPopup");
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN updateEvtWinMber END☆★☆★☆★☆★☆★☆★☆");
			
		return mav;
		
	}
	
	
	//상세 내용 확인-수정 에서 기획안과 같이 상세 내용 확인 -수정-eventlist 페이지로 이동
	@RequestMapping("/admin/evt/updateEvt.do")
	public ModelAndView updateEvt(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,MultipartHttpServletRequest req) throws Exception	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN updateEvt START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
		String dtlFlag = "B";
		
		try {

			adminEvtService.updateEvt(inParam,req);		
			mav.addObject("list", adminEvtService.startUrl());
			mav.setViewName("admin/evt/selectListEvt");
			//mav.addObject("list", adminEvtService.selectEvtDtl(inParam,evtGrpCd,dtlFlag));		
			//mav.setViewName("admin/evt/selectEvtDtl");

		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN updateEvt END☆★☆★☆★☆★☆★☆★☆");
			
		return mav;
		
	}
	
	
	@RequestMapping("/admin/evt/updateEvtState.do")
	public ModelAndView updateEvtState(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception	{
		
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN updateEvtState START☆★☆★☆★☆★☆★☆★☆");

		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		
		String evtGrpCd = request.getParameter("EVT_GRP_CD");
		String dtlFlag = "B";
		
		try {

			adminEvtService.updateEvtState(inParam);		
						
			mav.addObject("list", adminEvtService.selectEvtDtl(inParam,evtGrpCd,dtlFlag));		
			
			mav.setViewName("admin/evt/selectEvtDtl");
			
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ADMIN updateEvtState END☆★☆★☆★☆★☆★☆★☆");
			
		return mav;
		
	}
	
	
	
	
	
	
}
