package com.ssocio.sharing.dao.seller;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * <pre>
 * 브랜드 Dao
 * 브랜드관리 Dao
 * @author Y.I.Chun
 * @version 
 * @since 2015. 7. 6. 오후 6:41:07
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 7. 6.   |    Y.I.Chun  | 신규
 * @Todo
 * </pre>
 */
@Component
public class SellerBrandDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerBrandDao.class);
	
	@Resource(name="sqlSessionSeller")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * 브랜드리스트 조회
	 * 브랜드리스트를 조회한다.
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 10. 오후 1:22:40
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectBrandList (Map<String, Object> inParam) throws Exception{
		return sqlSession.selectList("sellerBrandMapper.selectBrandList", inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드정보 조회
	 * 브랜드정보를 조회 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public Map<String, Object> selectBrandInfo (Map<String, Object> inParam) throws Exception{
		
		logger.info("selectBrandInfo Start");
		return sqlSession.selectOne("sellerBrandMapper.selectBrandInfo", inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 리스트 조회
	 * 브랜드카테고리 리스트를 조회한다.
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 10. 오후 1:22:40
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public List<Map<String, Object>> selectBrandCtryList (Map<String, Object> inParam) throws Exception{
		return sqlSession.selectList("sellerBrandMapper.selectBrandCtryList", inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 추가
	 * 브랜드카테고리 정보를 등록한다.
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 10. 오후 1:22:40
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public void insertBrandCtry (Map<String, Object> inParam) throws Exception{
		sqlSession.delete("sellerBrandMapper.insertBrandCtry", inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 삭제
	 * 브랜드카테고리 정보를 삭제한다.
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 10. 오후 1:22:40
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.dao.admin
	 * </pre>
	 */
	public void deleteBrandCtry (Map<String, Object> inParam) throws Exception{
		sqlSession.delete("sellerBrandMapper.deleteBrandCtry", inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드정보 수정
	 * 브랜드정보를 수정 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void updateBrandInfo (Map<String, Object> inParam) throws Exception{
		logger.info("updateBrandInfo Start");
		
		sqlSession.update("sellerBrandMapper.updateBrandInfo", inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드정보 삭제
	 * 브랜드정보를 삭제 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public void deleteBrandInfo (Map<String, Object> inParam) throws Exception{
		logger.info("deleteBrandInfo Start");
		
		sqlSession.update("sellerBrandMapper.deleteBrandInfo", inParam);
	}
	
	/**
	 * <pre>
	 * 브랜드정보 등록
	 * 브랜드정보를 등록 합니다.
	 * @param inParam
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 7. 6. 오후 6:41:07
	 * @author Y.I.Chun
	 * @비고
	 * 
	 * </pre>
	 */
	public String insertBrandInfo (Map<String, Object> inParam) throws Exception{
		logger.info("insertBrandInfo Start");
		
		sqlSession.insert("sellerBrandMapper.insertBrandInfo", inParam);
		return (String)inParam.get("BRAND_CD");
	}
	
}