/**<pre>
 * 1. Project Name : Gapping1.0
 * 2. Package Name : com.lottecard.mall.cmmn.util
 * 3. File Name    : StringUtil.java
 * 4. Date         : 2014. 8. 11. 오후 1:45:55
 * 5. Author       : adrra
 * 6. Note         : 
 * </pre>
 */
package com.ssocio.sharing.cmmn.util;

import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.charset.CharacterCodingException;
import java.nio.charset.Charset;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HtmlUtil {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(HtmlUtil.class);
	
	public static String txtToHtml(String text) {
        
            if(text == null) {
                return null;
              }
              int length = text.length();
              boolean prevSlashR = false;
              StringBuffer out = new StringBuffer();
              for(int i = 0; i < length; i++) {
                char ch = text.charAt(i);
                switch(ch) {
                case '\r':
                  if(prevSlashR) {
                    out.append("<br>");         
                  }
                  prevSlashR = true;
                  break;
                case '\n':
                  prevSlashR = false;
                  out.append("<br>");
                  break;
                case '"':
                  if(prevSlashR) {
                    out.append("<br>");
                    prevSlashR = false;         
                  }
                  out.append("&quot;");
                  break;
                case '<':
                  if(prevSlashR) {
                    out.append("<br>");
                    prevSlashR = false;         
                  }
                  out.append("&lt;");
                  break;
                case '>':
                  if(prevSlashR) {
                    out.append("<br>");
                    prevSlashR = false;         
                  }
                  out.append("&gt;");
                  break;
                case '&':
                  if(prevSlashR) {
                    out.append("<br>");
                    prevSlashR = false;         
                  }
                  out.append("&amp;");
                  break;
                default:
                  if(prevSlashR) {
                    out.append("<br>");
                    prevSlashR = false;         
                  }
                  out.append(ch);
                  break;
                }
              }
              return out.toString();
            }
	
	
	public static boolean isValidUTF8(String  myString) 
	{
		
		byte[] bytes = null;
	    try {
	    	bytes = myString.getBytes("UTF-8");
	        Charset.availableCharsets().get("UTF-8").newDecoder().decode(ByteBuffer.wrap(bytes));
	    } catch (CharacterCodingException | UnsupportedEncodingException e) {
	        return false;
	    }
	 
	    return true;
	}
	
	public static String convertUTF8(String msg)
	{
		try {
			return new String( msg.getBytes("euc-kr"), "utf-8");
		} catch (UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}	
	
	public static String toHexString(byte[] value) {
		if (value==null) return null;
		
		StringBuffer sb = new StringBuffer();
		
		for (int i=0; i<value.length; i++) {
			int j = (value[i] >> 4) & 0xf;
			if (j <= 9)
				sb.append(j);
			else
				sb.append((char)(j+'A'-10));
			j = value[i]&0xf;
			if (j <= 9)
				sb.append(j);
			else
				sb.append((char)(j+'A'-10));
		};
		return sb.toString();
	}
	
	public static String str2hex(String msg)
	{
		return  toHexString(msg.getBytes());
	}
	
	public static String hex2str(String msg)
	{
		return  new String (  parseHexString( msg) );
	}
	/**
	 * 입력 byte array값을 Hex String으로 변환한다.
	 * 
	 * @param value 입력 byte array
	 * @return Hex String
	 */
	public static byte[] parseHexString(String value) {
		
		if (value==null) return null;
		
		value = value.toUpperCase();
		int len = value.length();
		byte out[] = new byte[len/2];
		
		for(int i = 0; i < len/2; i++) {
			int j = i * 2;
			
			int high = 0;
			int low = 0;
			
			if (value.charAt(j) >= '0' && value.charAt(j)<='9')
				high = value.charAt(j) - '0';
			else if (value.charAt(j) >= 'A' && value.charAt(j)<='F')
				high = 10 + (value.charAt(j) - 'A');
			
			if (value.charAt(j) >= '0' && value.charAt(j+1)<='9')
				low = value.charAt(j+1) - '0';
			else if (value.charAt(j+1) >= 'A' && value.charAt(j+1)<='F')
				low = 10 + (value.charAt(j+1) - 'A');
			
			out[i] = (byte)(high * 16 + low);
		}
		return out;
	}
	

}
