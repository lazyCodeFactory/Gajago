package com.ssocio.sharing.dao.web;

import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.web.RspnsCnst;

@Component
public class MobileSetupDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(MobileSetupDao.class);

	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//   -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//   -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	public int selectSellerCnt(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectSellerCnt Start");
		int ret  = 0;
		try {
			ret =  sqlSession.selectOne("mobileSetupMapper.selectSellerCnt", inParam);
		} catch (Exception e) {
			logger.error("selectSellerCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}


	public int updateMberOut(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("updateMberOut Start");
		int ret  = 0;
		try {
			ret =  sqlSession.update("mobileSetupMapper.updateMberOut", inParam);
		} catch (Exception e) {
			logger.error("updateMberOut DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}



	public int selectOrdCnt(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectOrdCnt Start");
		int ret  = 0;
		try {
			ret =  sqlSession.selectOne("mobileSetupMapper.selectOrdCnt", inParam);
		} catch (Exception e) {
			logger.error("selectOrdCnt DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}

	public String selectMberSso(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectMberSso Start");
		String ret  = "SCI";
		try {
			ret =  sqlSession.selectOne("mobileSetupMapper.selectMberSso", inParam);
		} catch (Exception e) {
			logger.error("selectMberSso DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return ret;
	}

	public void insertUserMberHist(Map<String, Object> inParam)throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("insertUserMberHist Start");
		try {
			sqlSession.insert("mobileSetupMapper.insertUserMberHist", inParam);
		} catch (Exception e) {
			logger.error("insertUserMberHist DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
	}
}
