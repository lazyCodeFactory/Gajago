package com.ssocio.sharing.cmmn.instance.cmmncode;

import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <pre>
 * 공통코드인스턴스등록 Manager
 * @author D.G
 * @version 
 * @since 2015. 2. 12. 오후 8:14:04
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 2. 12.  |    D.G       | 신규 
 * @Todo
 * </pre>
 */
public class CmmnCodeTableManager {

  // --------------------------------------------------------------------------
  // # Log 설정
  // --------------------------------------------------------------------------
  private static final Logger logger = LoggerFactory.getLogger(CmmnCodeTableManager.class);

  // --------------------------------------------------------------------------
  // Instance Define
  // --------------------------------------------------------------------------
  @SuppressWarnings ("rawtypes")
  public LinkedHashMap mCmmnCodeTables;
  private static CmmnCodeTableManager mInstance;
  
  @SuppressWarnings ("rawtypes")
  public CmmnCodeTableManager() {
    
    // 코드테이블생성
    mCmmnCodeTables = new LinkedHashMap();
  }
  
  /**
   * <pre>
   * Instance 반환
   * 
   * @return 
   * @exception 
   * @date 2014. 9. 5. 오전 10:10:10
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public static CmmnCodeTableManager getInstance() {
    
    if (mInstance == null) {
      logger.debug("mCmmnCodeTables is null");
      mInstance = new CmmnCodeTableManager();
      //loadCmmnCodeInfo();
      return null;
    }
    else {
      return mInstance;
    }

    //if (mInstance == null) {
    //  logger.debug("mCmmnCodeTables is null");
    //  mInstance = new CmmnCodeTableManager();
    //  loadCmmnCodeInfo();
    //}
    //return mInstance;
  }
  
  /**
   * <pre>
   * 공통코드정보 조회 및 instance Set
   *  
   * @exception 
   * @date 2014. 8. 5. 오후 3:01:14
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public static void loadCmmnCodeInfo () {
    
    //  ------------------------------------------------------------------------
    // # 시작로그
    // ------------------------------------------------------------------------
    logger.debug("--------------------------------------------------");
    logger.debug("loadCmmnCodeInfo Start");
    
    // ------------------------------------------------------------------------
    // # 객체/변수 선언
    // ------------------------------------------------------------------------


    // ------------------------------------------------------------------------
    // # Biz Start
    // ------------------------------------------------------------------------
    try {
      // 이곳에서 왜 서비스를 불러올 수 없는건가?  static이라서?
      //commonService.setCmmnCodeIntanceInfo();
      
      ////현재 요청중인 thread local의 HttpServletRequest 객체 가져오기
      ////HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
      ////HttpSession 객체 가져오기
      //HttpSession session = request.getSession();
      ////ServletContext 객체 가져오기
      //ServletContext conext = session.getServletContext();
      ////Spring Context 가져오기
      //WebApplicationContext wContext = WebApplicationContextUtils.getWebApplicationContext(conext);
      //
      ////스프링 빈 가져오기 & casting
      ////CommonServiceImpl commonService = (CommonServiceImpl)wContext.getBean("commonServiceImpl");
      ////CommonServiceImpl commonServiceImpl = wContext.getBean(CommonServiceImpl.class);
      ////commonServiceImpl.setCmmnCodeIntanceInfo();
      //CommonService commonService = wContext.getBean(CommonService.class);
      //commonService.setCmmnCodeIntanceInfo();
      
      //Object beanInstance = WebApplicationContextUtils.getWebApplicationContext(request.getSession(false).getServletContext()).getBean("commonServiceImpl");
      //if (beanInstance != null) {  
      //  Class beanClass = beanInstance.getClass();  
      //  Method method = beanClass.getDeclaredMethod("setCmmnCodeIntanceInfo", HttpServletRequest.class, HttpServletRequest.class);  
      //  if(method != null){  
      //      method.invoke(beanInstance, request, request);  
      //  }  
      //}  
      
    }
    catch (Exception e) {
      logger.error("공통코드 Instance Load 오류 : " + e.toString());
      mInstance = null;
      e.printStackTrace();
    }
  }
  
  
  
  /**
   * <pre>
   * 그룹별 Instance 추가
   * 
   * @param aNewCodeTable 
   * @exception 
   * @date 2014. 8. 5. 오후 4:30:15
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  @SuppressWarnings ("unchecked")
  public void addCodeTable(CmmnCodeTable aNewCodeTable) {

    mCmmnCodeTables.put(aNewCodeTable.getGroupCode(), aNewCodeTable);
  }
  
  /**
   * <pre>
   * groupCode -> groupNm
   * 
   * @param groupCode
   * @return
   * @throws Exception 
   * @exception 
   * @date 2014. 8. 10. 오후 12:00:46
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String lookUpGroupNm(String groupCode) throws Exception {

    //checkConfigModified();
    
    try {
      CmmnCodeTable codeTableInFocus = (CmmnCodeTable) mCmmnCodeTables.get(groupCode);
      return codeTableInFocus.getGroupNm();
    }
    catch (Exception ex) {

      throw new Exception("Fail to find groupNm for the groupCode '" + groupCode + "'");
    }
  }
  
  /**
   * <pre>
   * groupCode + codeNm => code
   * 
   * @param groupCode
   * @param codeNm
   * @return
   * @throws Exception 
   * @exception 
   * @date 2014. 8. 5. 오후 4:33:45
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String lookUpCode(String groupCode, String codeNm) throws Exception {

    //checkConfigModified();
    
    try {
      CmmnCodeTable codeTableInFocus = (CmmnCodeTable) mCmmnCodeTables.get(groupCode);
      return codeTableInFocus.getCodeForText(codeNm);
    }
    catch (Exception ex) {

      throw new Exception("Fail to find code for '" + codeNm + "' for the groupCode '" + groupCode + "'");
    }
  }
  

  
  /**
   * <pre>
   * groupCode + code => codeNm
   * 
   * @param groupCode
   * @param code
   * @return
   * @throws Exception 
   * @exception 
   * @date 2014. 8. 5. 오후 4:40:27
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String lookUpCodeNm(String groupCode, String code) throws Exception {

    //checkConfigModified();
    
    try {
      CmmnCodeTable codeTableInFocus = (CmmnCodeTable) mCmmnCodeTables.get(groupCode);
      return codeTableInFocus.getTextForCode(code);
    }
    catch (Exception ex) {

      throw new Exception("Fail to find meaningful name for groupCode '" + groupCode + "' inside code '" + code + "'");
    }
  }

  
  /**
   * <pre>
   * 해당 groupCode에 대한 코드테이블이 존재하는지 검사
   * 
   * @param groupCode
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:39:28
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public boolean codeTableExistsForType(String groupCode) {
    //checkConfigModified();
    
    return (mCmmnCodeTables.get(groupCode) != null);
  }
  
  /**
   * <pre>
   * 모든 코드테이블 객체배열을 얻어옴
   * 
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:39:03
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  @SuppressWarnings ("rawtypes")
  public CmmnCodeTable[] getCodeTables() {
    
    //checkConfigModified();
    
    CmmnCodeTable[] codeTableList = new CmmnCodeTable[this.mCmmnCodeTables.size()];
    int j = 0;

    for (Iterator i = mCmmnCodeTables.keySet().iterator(); i.hasNext();) {

      String key = (String) i.next();
      codeTableList[j++] = (CmmnCodeTable) mCmmnCodeTables.get(key);
    }

    return codeTableList;
  }
  
  /**
   * <pre>
   * 모든 코드테이블 이름을 배열로 얻어옴
   * 
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:38:41
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  @SuppressWarnings ("rawtypes")
  public String[] listCodeTableNames() {

    //checkConfigModified();
    
    String[] namelist = new String[this.mCmmnCodeTables.size()];
    int j = 0;

    for (Iterator i = mCmmnCodeTables.keySet().iterator(); i.hasNext();) {

      String key = (String) i.next();
      namelist[j++] = key;
    }

    return namelist;
  }
  
  /**
   * <pre>
   *  groupCode의 코드배열
   * 
   * @param groupCode
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:38:10
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String[] listCodes(String groupCode) {
    //checkConfigModified();
    
    return getCodeTableForType(groupCode).listCodes();
  }
  
  /**
   * <pre>
   * groupCode의 코드명배열
   * 
   * @param groupCode
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:37:47
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public String[] listInstanceTexts(String groupCode) {
    //checkConfigModified();
    
    return getCodeTableForType(groupCode).listCodeNms();
  }
  
  /**
   * <pre>
   * 해당 code에 대한 CodeDescriptor객체를 구함
   * 
   * @param groupCode
   * @param code
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:36:41
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public CmmnCodeDescriptor getCodeDescriptor(String groupCode, String code) {
    //checkConfigModified();
    
    return getCodeTableForType(groupCode).getCodeDescriptor(code);
  }
  
  /**
   * <pre>
   * 코드테이블을 인스턴스의 코드리스트 Map으로 변환
   * 
   * @param groupCode
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:36:13
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public Map<String, Object> getCodeMap(String groupCode) {
    //checkConfigModified();
    
    CmmnCodeTable codeTable = getCodeTableForType(groupCode);
    String[] codes = codeTable.listCodes();
    String[] meanings = codeTable.listCodeNms();
    Map<String, Object> map = new LinkedHashMap<String, Object>(codes.length);

    for (int i = 0, size = codes.length; i < size; i++) {

      map.put(codes[i], meanings[i]);
    }

    return map;
  }
  
  /**
   * <pre>
   * 해당 groupCode에 대한 하위 분류 코드테이블을 얻어옴
   * 
   * @param groupCode
   * @return 
   * @exception 
   * @date 2014. 8. 5. 오후 4:35:46
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public CmmnCodeTable getCodeTableForType(String groupCode) {
    //checkConfigModified();
    
    return (CmmnCodeTable) mCmmnCodeTables.get(groupCode);
  }
  

  /**
   * <pre>
   * 코드를 초기화 함
   *  
   * @exception 
   * @date 2014. 8. 5. 오후 4:35:00
   * @author adrra
   * @비고
   * 
   * </pre>
   */
  public void reset() {

    logger.info("CmmnCode Instance Init");
    if (mCmmnCodeTables!=null) {
      mCmmnCodeTables.clear();
    }
    mInstance = null;
  }

  /**
   * <pre>
   * 초기 공통코드 load시 config check file 수정일자 읽어와 세팅한다.
   * 
   * @exception 
   * @date 2014. 8. 5. 오후 4:33:11
   * @author adrra
   * @비고
   * 
   * </pre>
   */
//  private  static void setConfigModified() {
//    AbstractConfiguration appConfig=(AbstractConfiguration)appContext.getBean("applicationConfig");
//    String configCheckFileName = appConfig.getString("configCheckFile"); 
//    
//    if (configCheckFileName==null)  // check file이 설정되지 않은 경우 넘어간다.
//      return;
//    
//    try {
//      File configCheckFile = new File(configCheckFileName);
//      configLastModified = configCheckFile.lastModified();
//    } catch (Exception e) { //check file이 없는 경우로 넘어간다.
//    }
//  }
  
  /**
   * <pre>
   * ConfigCheckFile 정보를 application-configuration 정보에서 가져와 변경여부를 체크하여
   *  공통코드를  reload 한다.
   * @exception 
   * @date 2014. 8. 5. 오후 4:31:56
   * @author adrra
   * @비고
   * 
   * </pre>
   */
//  private  void checkConfigModified() {
//
//    AbstractConfiguration appConfig=(AbstractConfiguration)appContext.getBean("applicationConfig");
//    String configCheckFileName = appConfig.getString("configCheckFile"); 
//    
//    if (configCheckFileName==null)  { // check file이 설정되지 않은 경우 변경여부 체크를 하지 않는다.
//      logger.debug("configFile[" + configCheckFileName + "] 설정되어 있지 않음");
//      return;
//    }
//    
//    try {
//      File configCheckFile = new File(configCheckFileName);
//      long lastModified = configCheckFile.lastModified();
//      if (configLastModified < lastModified) { //저장된 변경날짜가 현재변경날짜 보다 작은 reload
//        configLastModified = lastModified;
//        reset();
//      }
//    } catch (Exception e) { //check file이 없는 경우 넘어간다.
//      logger.debug("configFile[" + configCheckFileName + "] 이 존재하지 않음:" + e);
//    }
//  }
  
}
