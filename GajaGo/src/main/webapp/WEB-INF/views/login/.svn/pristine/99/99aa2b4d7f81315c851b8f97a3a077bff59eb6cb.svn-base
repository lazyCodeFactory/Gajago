/**<pre>
 * 1. Project Name : SSOCIO
 * 2. Package Name : com.ssocio.sharing.dao.admin
 * 3. File Name	   : AdminPerfDao.java
 * 4. Date		   : 오후 4:05 2015-08-07
 * 5. Author	   : H.M.Yang
 * 6. Note		   : 
 * </pre>
 */
package com.ssocio.sharing.dao.admin;

import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import com.ssocio.sharing.cmmn.web.RspnsCnst;

/**
 * <pre>
 * 실적관리 DAO
 * 실적관리 DAO
 * @author H.M.Yang
 * @version 
 * @since 2015. 8. 17. 오후 2:52:00
 * @see 
 * @History 
 *  Date          |    author    | 변경내용  
 *	2015. 8. 7.   |    H.M.Yang  | 신규
 * @Todo
 * </pre>
 */
@Component
public class AdminPointDao {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminPerfDao.class);
	
	// --------------------------------------------------------------------------
	// # sqlSession 설정
	//	 -- DataSource를 두개 쓰므로 @Resource(name="sqlSessionMySql") 사용
	//	 -- 하나만 사용할 경우 @Autowired
	// --------------------------------------------------------------------------
	@Resource(name="sqlSessionAdmin")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}
	
	/**
	 * <pre>
	 * 포인트 기간별 조회
	 * 포인트 기간별 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 17. 오후 2:52:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListPeriPoint(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListPeriPoint Start");
		return sqlSession.selectList("adminPointMapper.selectListPeriPoint", paramDto);
	}
	
	/**
	 * <pre>
	 * 포인트 기간별 전체 합계 조회
	 * 포인트 기간별 전체 합계 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 17. 오후 2:52:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectPeriPointTotSum(Map<String, Object> paramDto) throws Exception{
		logger.info("selectPeriPointTotSum Start");
		return sqlSession.selectList("adminPointMapper.selectPeriPointTotSum", paramDto);
	}
	
	/**
	 * <pre>
	 * 포인트 기간별 검색 건수 조회
	 * 포인트 기간별 검색 건수를 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public int selectPeriPointSearchCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectPeriPointSearchCnt Start");
		return sqlSession.selectOne("adminPointMapper.selectPeriPointSearchCnt", paramDto);
	}
	
	/**
	 * <pre>
	 * 포인트 회원별 조회
	 * 포인트 회원별 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 17. 오후 2:52:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectListMberPoint(Map<String, Object> paramDto) throws Exception{
		logger.info("selectListMberPoint Start");
		return sqlSession.selectList("adminPointMapper.selectListMberPoint", paramDto);
	}
	
	/**
	 * <pre>
	 * 포인트 회원별 전체 합계 조회
	 * 포인트 회원별 전체 합계 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 17. 오후 2:52:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public List<Map<String, Object>> selectMberPointTotSum(Map<String, Object> paramDto) throws Exception{
		logger.info("selectMberPointTotSum Start");
		return sqlSession.selectList("adminPointMapper.selectMberPointTotSum", paramDto);
	}
	
	/**
	 * <pre>
	 * 포인트 회원별 검색 건수 조회
	 * 포인트 회원별 검색 건수를 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public int selectMberPointSearchCnt(Map<String, Object> paramDto) throws Exception{
		logger.info("selectMberPointSearchCnt Start");
		return sqlSession.selectOne("adminPointMapper.selectMberPointSearchCnt", paramDto);
	}
	
	/**
	 * <pre>
	 * 포인트 회원별 지급(차감)
	 * 포인트 회원별 지급(차감) 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public void insertMberPoint(Map<String, Object> inParam) throws Exception{
		logger.info("insertMberPoint Start");
		sqlSession.insert("adminPointMapper.insertMberPoint", inParam);
	}
	
	public void updateMberPoint (Map<String, Object> inParam) throws Exception{
		logger.info("updateMberPoint Start");
		sqlSession.insert("adminPointMapper.updateMberPoint", inParam);
	}
	
	/**
	 * <pre>
	 * 포인트 회원 일련번호 조회
	 * 포인트 회원 일련번호를 조회 합니다.
	 * @param paramDto
	 * @return
	 * @throws Exception 
	 * @exception 
	 * @date 2015. 8. 7. 오후 4:05:00
	 * @author H.M.Yang
	 * @비고
	 * 
	 * </pre>
	 */
	public String selectMberSeqPoint(Map<String, Object> paramDto) throws Exception{
		logger.info("selectMberSeqPoint Start");
		return sqlSession.selectOne("adminPointMapper.selectMberSeqPoint", paramDto);
	}
}