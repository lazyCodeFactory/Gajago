package com.ssocio.sharing.dao.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.ibatis.session.SqlSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.ui.ModelMap;

import com.ssocio.sharing.cmmn.web.RspnsCnst;
import com.ssocio.sharing.service.web.WebTestServiceImpl;
import com.ssocio.sharing.vo.web.OrdInfo.SeltInfo;
import com.ssocio.sharing.vo.web.SetlInfo;


@Component
public class MobileNoAuthPaymentDao {

	private static final Logger logger = LoggerFactory.getLogger(MobileNoAuthPaymentDao.class);

	
	// 카드사 이름 가져오기
	private static String SELECT_CARD_COMPNM = "mobileNoAuthPayment.selectCardCompNm";

	
	
	
	@Resource(name="sqlSessionWeb")
	private SqlSession sqlSession;

	public void setSqlSession(SqlSession sqlSession) {
		this.sqlSession = sqlSession;
	}

	
	public List<Map<String, Object>> testDao(Map<String, Object> inParam) throws Exception {
		// ------------------------------------------------------------------------
		// # 시작로그
		// ------------------------------------------------------------------------
		logger.info("selectListAdjust Start");
		
		
		
		List<Map<String, Object>> list = null;
		int num = 0;
		try {
			num =  sqlSession.selectOne("mobileKcreditMapper.testDao", inParam);
			logger.debug(num+":");
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("selectListAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return list;
	 }

	

	
	public String selectCardCompNm(String code) {
		logger.info("{} start" , SELECT_CARD_COMPNM);
		return  sqlSession.selectOne(SELECT_CARD_COMPNM, code);
	}
	

	/**
	 * 결제정보 request json 데이터 insert
	 * @param inParam
	 * @return
	 */
	public int insertPaymentInfo(Map<String, Object> inParam) {

		return sqlSession.insert("mobileNoAuthPayment.insertPaymentInfo",inParam);
	}

	

	/**
	 * 결제 완료 정보 response json 데이터 update
	 * @param inParam
	 * @return
	 */
	public int updatePaymentInfo(Map<String, Object> inParam) {
		
		return sqlSession.update("mobileNoAuthPayment.updatePaymentInfo", inParam);
	}


	


	/**
	 * ordInfo 가져오기
	 * @param ordCd
	 * @return
	 * @throws Exception
	 */
	public HashMap<String, Object> selectOrdInfo(String ordCd)  throws Exception {
		// TODO 4Auto-generated method stub
		
		HashMap<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("mobileNoAuthPayment.selectOrdInfo", ordCd);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("selectListAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		
		
		return map;
	}

	
	/**
	 * 결제정보 insert
	 * @param ordVo
	 * @return
	 */
	public int insertSetlInfo(SetlInfo ordVo) throws Exception {
		
		return sqlSession.insert("mobileNoAuthPayment.insertSetlInfo", ordVo);
	}

	/**
	 * ORD_INFO 주문 상태코드 변경
	 * @param ordVo
	 * @return
	 */
	public int updateOrdInfoStat(SetlInfo ordVo) throws Exception {
		
		int cnt = 0;
		try {
			cnt =  sqlSession.update("mobileNoAuthPayment.updateOrdInfoStat", ordVo);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("selectListAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		
		return cnt;
	}


	/**
	 * ORD_PROD_INFO 주문 상태코드 변경
	 * @param ordVo
	 * @return
	 */
	public int updateOrdProdInfoStat(SetlInfo ordVo) throws Exception {
		
		int cnt = 0;
		try {
			cnt =  sqlSession.update("mobileNoAuthPayment.updateOrdProdInfoStat", ordVo);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("selectListAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		
		return cnt;
	}


	/**
	 *	주문서의 사용 포인트 조회 
	 */
	public Map<String, Object> selectPointUseAmt(String ordCd) throws Exception {
		HashMap<String, Object> map = null;
		try {
			map =  sqlSession.selectOne("mobileNoAuthPayment.selectPointUseAmt", ordCd);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("selectListAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		
		
		return map;
	}


	/**
	 * 유저의 잔여 포인트 조회
	 * @param mberSeq
	 * @return
	 * @throws Exception
	 */
	public int selectMberPoint(String mberSeq) throws Exception {
		int point = 0;
		try {
			point =  sqlSession.selectOne("mobileNoAuthPayment.selectMberPoint", mberSeq);
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("selectListAdjust DB Error : " + e.toString());
			throw new Exception(RspnsCnst.RC1000000004);
		}
		return point;
	}


	/**
	 * 사용 포인트 업데이트 (MBER_INFO)
	 * @param mberSeq
	 * @param pointUseAmt
	 * @return
	 */
	public int updateUsedPoint(String mberSeq, int pointUseAmt) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("MBER_SEQ", mberSeq);
		map.put("POINT_USE_AMT", pointUseAmt);
		return this.sqlSession.update("mobileNoAuthPayment.updateUsedPoint", map);
	}


	/**
	 * 사용 포인트 insert (POINT_USE_LOG)
	 * @param mberSeq
	 * @param pointUseAmt
	 * @param ordCd
	 * @return
	 */
	public int insertPointUseLog(String mberSeq, int pointUseAmt, String ordCd) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("MBER_SEQ", mberSeq);
		map.put("POINT_USE_AMT", pointUseAmt);
		map.put("CHG_REASON", ordCd);
		return this.sqlSession.insert("mobileNoAuthPayment.insertPointUseLog", map);
	}


}
