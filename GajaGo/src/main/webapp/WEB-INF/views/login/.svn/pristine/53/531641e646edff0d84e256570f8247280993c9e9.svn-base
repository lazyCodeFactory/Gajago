package com.ssocio.sharing.controller.seller;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.service.seller.SellerBrandService;

/**
 * <pre>
 * 브랜드 콘트롤러
 * 브랜드 콘트롤러
 * @author Y.I.Chun
 * @version
 * @since 2015. 7. 8. 오후 5:50:30
 * @see
 * @History
 * Date			|	author	    | 변경 내용
 * 2015. 7. 8.	|	Y.I.Chun	| 신규
 * @비고
 * </pre>
 */
@Controller
public class SellerBrandController{

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(SellerBrandController.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private SellerBrandService sellerBrandService;
	
	/**
	 * <pre>
	 * 브랜드관리
	 * 브랜드관리화면을 표시한다.
	 * @param request
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:08:47
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/prodMgr/procBrandMain.do")
	public ModelAndView procBrandMain(@RequestParam Map<String, Object> inParam) throws Exception	{
		ModelAndView mav = new ModelAndView();
		try {
			mav.addObject("brandList", sellerBrandService.selectBrandList(inParam).get("brandList"));
			mav.addObject("searchParam", inParam);
			mav.setViewName("seller/prodMgr/brandList");
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
	/**
	 * <pre>
	 * 브랜드정보 조회
	 * 브랜드정보를 조회한다.
	 * @param request
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:08:47
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/prodMgr/selectBrandInfo.do")
	public ModelAndView selectBrandInfo(HttpServletRequest request, @RequestParam Map<String, Object> inParam) throws Exception	{
		ModelAndView mav = new ModelAndView();
		try {
			mav.addObject("brandInfo", sellerBrandService.selectBrandInfo(inParam).get("brandInfo"));
			mav.addObject("brandCtryList", sellerBrandService.selectBrandInfo(inParam).get("brandCtryList"));
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
	/**
	 * <pre>
	 * 브랜드정보 수정
	 * 브랜드정보를 수정한다.
	 * @param req
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:08:47
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/prodMgr/updateBrandInfo.do")
	public ModelAndView updateBrandInfo(MultipartHttpServletRequest req, @RequestParam Map<String, Object> inParam) throws Exception	{
		ModelAndView mav = new ModelAndView();
		try {
			//브랜드정보수정
			sellerBrandService.updateBrandInfo(req, inParam);
			
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
	/**
	 * <pre>
	 * 브랜드정보 삭제
	 * 브랜드정보를 삭제한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:08:47
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/prodMgr/deleteBrandInfo.do")
	public ModelAndView deleteBrandInfo(@RequestParam Map<String, Object> inParam) throws Exception	{
		ModelAndView mav = new ModelAndView("jsonView");
		try {
			
			//브랜드정보삭제
			sellerBrandService.deleteBrandInfo(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
	/**
	 * <pre>
	 * 브랜드정보 등록
	 * 브랜드정보를 등록한다.
	 * @param req
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:08:47
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/prodMgr/insertBrandInfo.do")
	public ModelAndView insertBrandInfo(MultipartHttpServletRequest req, @RequestParam Map<String, Object> inParam
			, @RequestParam(value="brandCtryCd", required=false) String[] brandCtryCd) throws Exception {
		ModelAndView mav = new ModelAndView("jsonView");
		try {
			//카테고리정보
			inParam.put("brandCtryCd", brandCtryCd);
			//브랜드정보등록
			sellerBrandService.insertBrandInfo(req, inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 정보 삭제
	 * 브랜드카테고리 정보를 삭제한다.
	 * @param request
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:08:47
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/prodMgr/insertBrandCtry.do")
	public ModelAndView insertBrandCtry(@RequestParam Map<String, Object> inParam) throws Exception	{
		ModelAndView mav = new ModelAndView("jsonView");
		try {
			mav.addObject("result", sellerBrandService.insertBrandCtry(inParam));
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
	/**
	 * <pre>
	 * 브랜드카테고리 정보 삭제
	 * 브랜드카테고리 정보를 삭제한다.
	 * @param request
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:08:47
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/prodMgr/deleteBrandCtry.do")
	public ModelAndView deleteBrandCtry(@RequestParam Map<String, Object> inParam) throws Exception	{
		ModelAndView mav = new ModelAndView("jsonView");
		try {
			mav.addObject("brandCtryList", sellerBrandService.deleteBrandCtry(inParam).get("brandCtryList"));
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
	/**
	 * <pre>
	 * 브랜드리스트 조회(AJAX)
	 * 브랜드리스트를 조회(AJAX)한다.
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 9. 오후 8:08:47
	 * @author Y.I.Chun
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/seller/prodMgr/selectBrandList.do")
	public ModelAndView selectBrandList(@RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		try {
			//브랜드리스트 조회
			mav.addObject("brandList", sellerBrandService.selectBrandList(inParam).get("brandList"));
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
			
		return mav;
	}
	
}
