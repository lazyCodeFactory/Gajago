package com.ssocio.sharing.service.web;

import java.util.Map;
import javax.annotation.Resource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.ui.ModelMap;
import com.ssocio.sharing.dao.web.MobileMyAdrDao;
import com.ssocio.sharing.vo.web.WebSession;

@Service
public class MobileMyAdrServiceImpl implements MobileMyAdrService {
	
	private static final Logger logger = LoggerFactory.getLogger(MobileMyAdrServiceImpl.class);
	
	@Resource(name="mobileMyAdrDao")
	private MobileMyAdrDao mobileMyAdrDao;
	
	/**   
	 * 배송지 관리(조회)
	 */
	@Override
	public ModelMap getMyAdrInfo(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		try {
			mm.put("myAdrInfo", mobileMyAdrDao.getMyAdrInfo(inParam));
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**   
	 * 배송지 등록 화면으로 이동.
	 */
	@Override
	public ModelMap insertMyAdrInfo(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		try {
			mm.put("myAdrInfo", mobileMyAdrDao.insertMyAdrInfo(inParam));
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**   
	 * 배송지 등록 처리
	 * 		- 1. 현재 배송지 등록건수을 조회한다.
	 * 		- 2. 배송지 등록
	 * 		- 3. 배송지 등록건수가 0이면 기본배송지로 등록한다.
	 */
	@Override
	public ModelMap insertMyAdrInfoReq(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		Integer adrCnt = 0;
		String msg = "";
		try {
			// 1. 현재 배송지 등록건수을 조회한다.
			adrCnt = mobileMyAdrDao.getMyAdrCount(inParam);
			logger.debug("adrCnt:"+adrCnt);
			if(adrCnt < 1){
				inParam.put("BASE_DLV_YN", "Y");
			}
			// 2. 배송지 등록
			adrStatus = mobileMyAdrDao.insertMyAdrInfoReq(inParam);
			logger.debug("adrStatus:"+adrStatus);
			if(adrStatus == null){
				msg = "배송지 정보가 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**   
	 * 배송지 수정 화면으로 이동.
	 */
	@Override
	public ModelMap updateMyAdrInfo(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		try {
			mm.put("myAdrInfo", mobileMyAdrDao.updateMyAdrInfo(inParam));
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**   
	 * 배송지 수정 처리
	 */
	@Override
	public ModelMap updateMyAdrInfoReq(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		try {
			adrStatus = mobileMyAdrDao.updateMyAdrInfoReq(inParam);
			logger.debug("adrStatus:"+adrStatus);
			if(adrStatus == null){
				msg = "배송지 정보가 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	/**   
	 * 기본배송지설정
	 * 		1. 등록된 배송지 모두을 기본배송지 아님 N으로 설정한다.
	 * 		2. 호출된 배송지만 Y로 설정한다.
	 */
	@Override
	public ModelMap updatemyBaseAdrReg(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		try {
			// 1. 등록된 배송지 모두을 기본배송지 아님 N으로 설정한다.
			adrStatus = mobileMyAdrDao.updatemyAllAdrRegN(inParam);
			logger.debug("1.adrStatus:"+adrStatus);
			// 2. 호출된 배송지만 Y로 설정한다.
			adrStatus = mobileMyAdrDao.updatemyBaseAdrReg(inParam);
			logger.debug("2.adrStatus:"+adrStatus);
			if(adrStatus == null){
				msg = "배송지 정보가 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	
	/**   
	 * 배송지 삭제
	 */
	@Override
	public ModelMap deleteMyAdrInfo(Map<String, Object> inParam, WebSession user){
		ModelMap mm = new ModelMap();
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		try {
			adrStatus = mobileMyAdrDao.deleteMyAdrInfo(inParam);
			logger.debug("adrStatus:"+adrStatus);
			if(adrStatus == null){
				msg = "배송지 정보가 변경되었습니다.";
			}
			mm.put("msg", msg);
		}catch (Exception e) {
			throw e;
		}
		return mm;
	}
	
	/**   
	 * 현재 배송지 건수
	 */
	@Override
	public Integer getMyAdrCount(Map<String, Object> inParam, WebSession user){
		int mberSeq = user.getMBER_SEQ();
		logger.debug("mberSeq:"+mberSeq);
		// 로그인 정보가 존재하지 않아서 임의로 넣는다. 이석배 seokbae@rocomo.com
		inParam.put("MBER_SEQ", mberSeq);
		Integer adrStatus = 0;
		String msg = "";
		try {
			adrStatus = mobileMyAdrDao.getMyAdrCount(inParam);
			logger.debug("adrStatus:"+adrStatus);
			
		}catch (Exception e) {
			throw e;
		}
		return adrStatus;
	}
}
