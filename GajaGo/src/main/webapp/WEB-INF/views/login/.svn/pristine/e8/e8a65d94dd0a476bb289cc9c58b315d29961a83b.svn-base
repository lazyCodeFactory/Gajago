package com.ssocio.sharing.controller.mobile;

import java.net.URLEncoder;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.service.web.MobileMyMiniService;
import com.ssocio.sharing.service.web.WebCommonService;
import com.ssocio.sharing.vo.web.WebSession;

/**
 * <pre>
 * 미니샵 컨트롤러
 * 미니샵를 위한 컨트롤러
 * @author
 * @version
 * @since
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * @비고
 * </pre>
 */
@Controller
public class MobileMyMiniController extends MobileReferController {

	private static final Logger logger = LoggerFactory.getLogger(MobileMyMiniController.class);

	@Autowired
	private MobileMyMiniService mobileMyMiniService;
	

	@Autowired
	private WebCommonService webCommonService;

	/**
	 * 미니샵 조회
	 */
	@RequestMapping("/mobile/myMini/getMyMiniInfo.do")
	public ModelAndView getMyActInfo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		if(request.getSession().getAttribute("user")==null){
			String returnUrl = "/mobile/myPage/getMyPageInfo.do?";
			return new ModelAndView("redirect:/mobile/main/login.do"+"?ret="+URLEncoder.encode(returnUrl,"UTF-8"));
		}
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		logger.debug("### GUBUN		:"+inParam.get("GUBUN"));
		try {
			WebSession user = (WebSession)request.getSession().getAttribute("user");
			logger.debug("### MBER_SEQ		:"+user.getMBER_SEQ());
			logger.debug("### MOBILE_GUBUN	:"+user.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+user.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");
			logger.debug("### MBER_NM	:"+user.getMBER_NM());
			mav.addObject("result", mobileMyMiniService.getMyMiniInfo(inParam, user));
			mav.addObject("params", inParam);
			mav.addObject("MBER_NM", user.getMBER_NM());
			mav.setViewName("web/myPage/getMyMiniInfo");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * 미니샵 조회 > 이름변경화면 폼
	 */
	@RequestMapping("/mobile/myMini/renameMyMiniInfo.do")
	public ModelAndView renameMyMiniInfo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		if(request.getSession().getAttribute("user")==null){
			String returnUrl = "/mobile/myPage/getMyPageInfo.do?";
			return new ModelAndView("redirect:/mobile/main/login.do"+"?ret="+URLEncoder.encode(returnUrl,"UTF-8"));
		}
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		logger.debug("### GUBUN		:"+inParam.get("GUBUN"));
		try {
			WebSession user = (WebSession)request.getSession().getAttribute("user");
			logger.debug("### MBER_SEQ		:"+user.getMBER_SEQ());
			logger.debug("### MOBILE_GUBUN	:"+user.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+user.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");
			logger.debug("### MBER_NM	:"+user.getMBER_NM());
			mav.addObject("result", mobileMyMiniService.renameMyMiniInfo(inParam, user));
			mav.addObject("params", inParam);
			mav.addObject("MBER_NM", user.getMBER_NM());
			mav.setViewName("web/myPage/renameMyMiniInfo");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * 미니샵 조회 > 주소변경화면 폼
	 */
	@RequestMapping("/mobile/myMini/reAddressMyMiniInfo.do")
	public ModelAndView reAddressMyMiniInfo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		if(request.getSession().getAttribute("user")==null){
			String returnUrl = "/mobile/myPage/getMyPageInfo.do?";
			return new ModelAndView("redirect:/mobile/main/login.do"+"?ret="+URLEncoder.encode(returnUrl,"UTF-8"));
		}
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			WebSession user = (WebSession)request.getSession().getAttribute("user");
			logger.debug("### MBER_SEQ		:"+user.getMBER_SEQ());
			logger.debug("### MOBILE_GUBUN	:"+user.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+user.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");
			logger.debug("### MBER_NM	:"+user.getMBER_NM());
			mav.addObject("result", mobileMyMiniService.reAddressMyMiniInfo(inParam, user));
			mav.addObject("params", inParam);
			mav.addObject("MBER_NM", user.getMBER_NM());
			mav.setViewName("web/myPage/reAddressMyMiniInfo");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * 미니샵 이름 수정 처리
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/mobile/myMini/renameProc.do")
	public @ResponseBody String renameProc(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		LoggerUtil.writeMap(inParam);
		String result = "";
		try {
			WebSession user = (WebSession)request.getSession().getAttribute("user");
			logger.debug("### MBER_SEQ		:"+user.getMBER_SEQ());
			logger.debug("### MOBILE_GUBUN	:"+user.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+user.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");

			mobileMyMiniService.renameProc(inParam, user);
			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("msg", "정상처리되었습니다.");
			//jsonObj.put("msg", mobileMyMiniService.renameProc(inParam, user).get("msg"));
			result = jsonObj.toString();
			logger.debug("### result	:["+result	+"] >>>>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	/**
	 * 미니샵 주소 수정 처리
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/mobile/myMini/readdressProc.do")
	public @ResponseBody String readdressProc(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		LoggerUtil.writeMap(inParam);
		String result = "";
		try {
			WebSession user = (WebSession)request.getSession().getAttribute("user");
			logger.debug("### MBER_SEQ		:"+user.getMBER_SEQ());
			logger.debug("### MOBILE_GUBUN	:"+user.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+user.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");

			mobileMyMiniService.readdressProc(inParam, user);
			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("msg", "정상처리되었습니다.");
			//jsonObj.put("msg", mobileMyMiniService.readdressProc(inParam, user).get("msg"));
			result = jsonObj.toString();
			logger.debug("### result	:["+result	+"] >>>>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	/**
	 * 파일업로드
	 */
	@RequestMapping("/mobile/myMini/regImg.do")
	public ModelAndView regImg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,MultipartHttpServletRequest req) throws Exception{
		if(request.getSession().getAttribute("user")==null){
			String returnUrl = "/mobile/myPage/getMyPageInfo.do?";
			return new ModelAndView("redirect:/mobile/main/login.do"+"?ret="+URLEncoder.encode(returnUrl,"UTF-8"));
		}
		ModelAndView mav = new ModelAndView();
		logger.debug("##########################");
		LoggerUtil.writeMap(inParam);
		logger.debug("##########################");
		String result = "";
		try {
			WebSession user = (WebSession)request.getSession().getAttribute("user");
			logger.debug("### MBER_SEQ		:"+user.getMBER_SEQ());
			logger.debug("### MOBILE_GUBUN	:"+user.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+user.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");

			mobileMyMiniService.regImg(inParam, user, req);
			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("result", "정상처리되었습니다.");
			result = jsonObj.toString();
			logger.debug("### result	:["+result	+"] >>>>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		//return result;
		return mav;
	}

	//http://dev.mobile.ssocio.net/mobile/myMini/selectMiniShop.do?LVL_SEQ=0&PROD_CODE=20151020016849&SELLER_MBER_SEQ=1325
	@RequestMapping("/mobile/myMini/selectMiniShop.do")
	public ModelAndView selectMiniShop(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView("web/myPage/selectMiniShop");
		LoggerUtil.writeMap(inParam);
		logger.debug("### SELLER_MBER_SEQ		: " + inParam.get("SELLER_MBER_SEQ"));
		try {

			inParam.put("firstUrl", request.getServerName());
			inParam.put("ctryGbn", "1"); // 카테고리 xml을 위한 예외처리 로직
			ModelMap mm = mobileMyMiniService.selectMiniShop(inParam);
			mav.addObject("result",mm );
			mav.addObject("inParam", inParam);
			
			
			//공유하기 기능의 이미지때문에 호출 함 scdn 필요
			try {
				HttpClient httpClient = HttpClientBuilder.create().build();
				String url = webCommonService.selectShareUrl();
				
				logger.info("shareImg no URL = " + url);

				HttpPost httpPost = new HttpPost(url);
//				{"fileSeq" : "${result.mberInfo.FILE_SEQ }","type_cd" : "4","prod_code" : "${inParam.PROD_CODE}"},//php에서 fileinfo테이블을 select 하려고
				JSONObject json = new JSONObject();
				Map<String, Object> mberInfo = new HashMap<String, Object>();
				mberInfo = (Map<String, Object>) mm.get("mberInfo");
		        json.put("seq",mberInfo.get("FILE_SEQ"));
		        json.put("type_cd","4");
		        json.put("prod_code",inParam.get("PROD_CODE"));
		        StringEntity params = new StringEntity(json.toJSONString());

		        logger.info("StringEntity = " + params.toString());
		        httpPost.addHeader("content-type", "application/json");
		        httpPost.addHeader("Accept","application/json");
		        httpPost.setEntity(params);

		        HttpResponse httpResponse = httpClient.execute(httpPost);
		        String shareImg = EntityUtils.toString(httpResponse.getEntity());

		        JSONParser parser = new JSONParser();
				JSONObject jsonString = (JSONObject)parser.parse(shareImg);

				logger.debug("json : " + jsonString.get("url"));
				logger.debug("json : " + jsonString.get("error"));

				String targetUrl = (String)jsonString.get("url");
		        mav.addObject("shareImgUrl", targetUrl);
		        
		        String ogNm = (String) mberInfo.get("MINI_SHOP_NM") == null ? "" : (String) mberInfo.get("MINI_SHOP_NM");
		        mav.addObject("ogNm", ogNm);
		        
		        String ogInitUrl = request.getRequestURI() == null ? "" : request.getRequestURI();
		        mav.addObject("ogInitUrl", ogInitUrl);

		        httpPost.abort();
		    }catch (Exception e) {
		    	e.printStackTrace();

		    }
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		return mav;
	}
	/**
	 * 미니샵 주소변경 > 미니샵 사용중인주소 건수
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/mobile/myMini/countExistMiniShopPath.do")
	public @ResponseBody String countExistMiniShopPath(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		LoggerUtil.writeMap(inParam);
		String result = "";
		try {
			WebSession user = (WebSession)request.getSession().getAttribute("user");
			logger.debug("### MBER_SEQ		:"+user.getMBER_SEQ());
			logger.debug("### MOBILE_GUBUN	:"+user.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+user.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");

			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("msg", "조회되었습니다.");
			jsonObj.put("count", mobileMyMiniService.countExistMiniShopPath(inParam, user).get("count"));
			result = jsonObj.toString();
			logger.debug("### result	:["+result	+"] >>>>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	@RequestMapping("/mobile/myMini/appRegImg.do")
	public ModelAndView appRegImg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam,MultipartHttpServletRequest req) throws Exception{
		if(request.getSession().getAttribute("user")==null){
			String returnUrl = "/mobile/myPage/getMyPageInfo.do?";
			return new ModelAndView("redirect:/mobile/main/login.do"+"?ret="+URLEncoder.encode(returnUrl,"UTF-8"));
		}
		ModelAndView mav = new ModelAndView();
		logger.debug("##########################");
		LoggerUtil.writeMap(inParam);
		logger.debug("##########################");
		String result = "";
		try {
			WebSession user = (WebSession)request.getSession().getAttribute("user");
			logger.debug("### MBER_SEQ		:"+user.getMBER_SEQ());
			logger.debug("### MOBILE_GUBUN	:"+user.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+user.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");

			mobileMyMiniService.appRegImg(inParam, user, req);
			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("result", "정상처리되었습니다.");
			result = jsonObj.toString();
			logger.debug("### result	:["+result	+"] >>>>");
		} catch (Exception e) {
			e.printStackTrace();
		}
		//return result;
		return mav;
	}
}
