package com.ssocio.sharing.controller.seller;

import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.json.simple.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

import com.google.gson.Gson;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.service.seller.SellerMyInfoService;
import com.ssocio.sharing.vo.seller.SellerSession;

/**
 * <pre>
 * 회원정보 컨트롤러
 * 회원정보를 위한 컨트롤러
 * @author
 * @version
 * @since
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * @비고
 * </pre>
 */
@Controller
public class SellerMyInfoController{

	private static final Logger logger = LoggerFactory.getLogger(SellerMyInfoController.class);

	@Autowired
	private SellerMyInfoService sellerMyInfoService;

	/**
	 * 회원정보 정보조회
	 */
	@RequestMapping("/seller/myInfo/getMyInfo.do")
	public ModelAndView getMyInfoInfo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
			logger.debug("### MBER_SEQ		:"+seller.getMBER_SEQ());
			//logger.debug("### Seller_GUBUN	:"+seller.getMOBILE_GUBUN());
			logger.debug("### MBER_GB_CD	:["+seller.getMBER_GB_CD()	+"] >>>>>>>>>>>>>>>>>> 0.구매, 1.판매");
			mav.addObject("result", sellerMyInfoService.getMyInfoInfo(inParam, seller));
			mav.addObject("params", inParam);
			//mav.setViewName("seller/myPage/getMyInfo"+seller.getMBER_REG_GB_CD());
//			mav.setViewName("seller/myPage/getMyInfo"+seller.getMBER_GB_CD());
			mav.setViewName("seller/myPage/getMyInfo0");
			System.out.println("!!!!!!!!!!!!!!!!!!!!!!!!!!!!! seller/myPage/getMyInfo"+seller.getMBER_GB_CD());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * 핸드폰번호 변경 화면으로 이동.
	 */
	@RequestMapping("/seller/myInfo/getMyPhoneChangeForm.do")
	public ModelAndView getMyPhoneChangeForm(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
			logger.debug("### MBER_SEQ:"+seller.getMBER_SEQ());
			mav.addObject("result", sellerMyInfoService.getMyPhoneChangeForm(inParam, seller));
			mav.addObject("params", inParam);
			mav.setViewName("seller/myPage/getMyPhoneChangeForm");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * 휴대폰 변경
	 */
	@RequestMapping("/seller/myInfo/updateMyPhone.do")
	public @ResponseBody String updateMyPhone(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		Map<String, Object> resultObj = new HashMap<String, Object>();
		LoggerUtil.writeMap(inParam);
		String phoneInfo = "";
		String result = "";
		try {
			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
			logger.debug("### MBER_SEQ:"+seller.getMBER_SEQ());
			resultObj = sellerMyInfoService.updateMyPhone(inParam, seller)	;
			logger.debug("### resultObj:"+resultObj);
			phoneInfo = (String)resultObj.get("msg");

			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("msg", phoneInfo);
			result = jsonObj.toString();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	/******************************************************************************
	 * 계좌변경
	 *******************************************************************************/
	/**
	 * 계좌변경 화면으로 이동.
	 */
	@RequestMapping("/seller/myInfo/getMyAccountChangeForm.do")
	public ModelAndView getMyAccountChangeForm(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
			logger.debug("### MBER_SEQ:"+seller.getMBER_SEQ());
			mav.addObject("result", sellerMyInfoService.getMyAccountChangeForm(inParam, seller));
			mav.addObject("params", inParam);
			mav.setViewName("seller/myPage/getMyAccountChangeForm"+seller.getMBER_REG_GB_CD());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * 계좌 변경
	 */
	@RequestMapping("/seller/myInfo/updateMyAccount.do")
	public @ResponseBody String saveMyAccount(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		Map<String, Object> resultObj = new HashMap<String, Object>();
		LoggerUtil.writeMap(inParam);
		String phoneInfo = "";
		String result = "";
		try {
			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
			logger.debug("### MBER_SEQ:"+seller.getMBER_SEQ());
			resultObj = sellerMyInfoService.updateMyAccount(inParam, seller)	;
			logger.debug("### resultObj:"+resultObj);
			phoneInfo = (String)resultObj.get("msg");

			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("msg", phoneInfo);
			result = jsonObj.toString();

		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	/**
	 * 이메일 수신여부 변경
	 */
	@RequestMapping("/seller/myInfo/changeRadioMail.do")
	public @ResponseBody String changeRadioMail(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		Map<String, Object> resultObj = new HashMap<String, Object>();
		LoggerUtil.writeMap(inParam);
		String result = "";
		String msg = "";
		try {
			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
			logger.debug("### MBER_SEQ:"+seller.getMBER_SEQ());
			resultObj = sellerMyInfoService.changeRadioMail(inParam, seller);
			logger.debug("### resultObj:"+resultObj);
			msg = (String)resultObj.get("msg");
			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("msg", msg);
			result = jsonObj.toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	/**
	 * SMS 수신여부 변경
	 */
	@RequestMapping("/seller/myInfo/changeRadioSMS.do")
	public @ResponseBody String changeRadioSMS(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		Map<String, Object> resultObj = new HashMap<String, Object>();
		LoggerUtil.writeMap(inParam);
		String result = "";
		String msg = "";
		try {
			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
			logger.debug("### MBER_SEQ:"+seller.getMBER_SEQ());
			resultObj = sellerMyInfoService.changeRadioSMS(inParam, seller)	;
			logger.debug("### resultObj:"+resultObj);
			msg = (String)resultObj.get("msg");
			JSONObject jsonObj = new JSONObject() ;
			jsonObj.put("msg", msg);
			result = jsonObj.toString();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}

	/**
	 * MINI SHOP
	 */
	@RequestMapping("/seller/myInfo/selectMiniShop.do")
	public ModelAndView selectMiniShop(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");


			logger.debug("### MBER_SEQ		:"+seller.getMBER_SEQ());


			inParam.put("MBER_GB_CD", seller.getMBER_GB_CD());
			mav.addObject("mberSeq" ,seller.getMBER_SEQ() );
			mav.addObject("result", sellerMyInfoService.getMyInfoInfo(inParam, seller));
			mav.addObject("stats", sellerMyInfoService.selectProdStats(inParam, seller));
			mav.addObject("params", inParam);
			mav.setViewName("seller/myPage/selectMiniShop");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 패스워드 수정
	 * </pre>
	*/

	@RequestMapping(value="/seller/myInfo/updatePwChg.do")
	public  ModelAndView updatePwChg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{

		logger.info("☆★☆★☆★☆★☆★☆★☆ updatePwChg START☆★☆★☆★☆★☆★☆★☆");

		ModelMap mm = new ModelMap();
		SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
		logger.debug("### MBER_SEQ:"+seller.getMBER_SEQ());
		try {
			sellerMyInfoService.updatePwChg(inParam, seller);
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ updatePwChg END☆★☆★☆★☆★☆★☆★☆");
		return new ModelAndView("jsonView", mm);
	}

	@RequestMapping(value="/seller/myInfo/updateMyInfo.do")
	public  ModelAndView updateMyInfo(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{

		logger.info("☆★☆★☆★☆★☆★☆★☆ updateMyInfo START☆★☆★☆★☆★☆★☆★☆");
		logger.debug("inParam :" + inParam.toString());

		ModelMap mm = new ModelMap();
		SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
		logger.debug("### MBER_SEQ:"+seller.getMBER_SEQ());
		try {
			sellerMyInfoService.updateMyInfo(inParam, seller);
		} catch (Exception e) {
			e.printStackTrace();
		}
		logger.info("☆★☆★☆★☆★☆★☆★☆ updateMyInfo END☆★☆★☆★☆★☆★☆★☆");
		return new ModelAndView("jsonView", mm);
	}


	/***
	 * 판매자 신고이력 조회 팝업
	 *
	 * */
	@RequestMapping("/seller/prodMgr/suspectPopup.do")
	public ModelAndView selectSuspectBoard(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{

		LoggerUtil.writeMap(inParam);


		ModelAndView mav = new ModelAndView();
		mav.setViewName("seller/common/suspectPopup");
		try {
			inParam.put("displayCnt", 5);
//			mav.addObject("list", sellerMyInfoService.selectSuspectBoard(inParam));
			mav.addObject("list", sellerMyInfoService.selectSellWarning(inParam));

			mav.addObject("MBER_SEQ", inParam.get("MBER_SEQ"));
			mav.addObject("searchParam", inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/***
	 * 판매자 신용점수 조회 팝업
	 *
	 * */
	@RequestMapping("/seller/prodMgr/sellerCreditPopup.do")
	public ModelAndView selectSellCredit(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{

		LoggerUtil.writeMap(inParam);


		ModelAndView mav = new ModelAndView();
		mav.setViewName("seller/common/sellerCreditPopup");
		try {
			String gubun[] = request.getParameterValues("gubun");
			inParam.put("gubun", gubun);
			mav.addObject("list", sellerMyInfoService.selectSellCredit(inParam));
			mav.addObject("MBER_SEQ", inParam.get("MBER_SEQ"));
			mav.addObject("searchParam", inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/***
	 * 판매 경고 조회 팝업
	 *
	 * */
	@RequestMapping("/seller/prodMgr/sellWarningPopup.do")
	public ModelAndView selectSellWarning(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{


		LoggerUtil.writeMap(inParam);

		ModelAndView mav = new ModelAndView();
		mav.setViewName("seller/common/sellWarningPopup");
		try {

			SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
			inParam.put("MBER_SEQ", seller.getMBER_SEQ());

//			mav.addObject("list", sellerMyInfoService.selectSellWarning(inParam));
			mav.addObject("list", sellerMyInfoService.selectSuspectBoard(inParam));



			mav.addObject("searchParam", inParam);

			logger.debug("mav : " + mav.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}




	/***
	 * 미니샵 페이지 뷰 컨트롤러 (미완성)
	 *
	 * */
	@RequestMapping("/seller/prodMgr/selectMiniShopCnt.do")
	public ModelAndView selectMiniShopCnt(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		mav.setViewName("jsonView");

		SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
		inParam.put("mberSeq", seller.getMBER_SEQ());
		try {
			logger.debug("inParam : " + inParam.toString());
			int cnt = sellerMyInfoService.selectMiniShopCnt(inParam);
			mav.addObject("cnt",cnt);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	@RequestMapping("/seller/MyInfo/updateMyminiInfoReg.do")
	public ModelAndView updateMyminiInfoReg(MultipartHttpServletRequest req,HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		ModelAndView mav = new ModelAndView();
		mav.setViewName("jsonView");

		SellerSession seller = (SellerSession) request.getSession().getAttribute("sellerManager");
		inParam.put("mberSeq", seller.getMBER_SEQ());
		try {
			logger.debug("inParam : " + inParam.toString());
			int cnt = sellerMyInfoService.updateMyminiInfoReg(req,inParam);
			mav.addObject("cnt",cnt);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}



}
