package com.ssocio.sharing.controller.admin;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.cmmn.util.StringUtil;
import com.ssocio.sharing.service.admin.AdminRentalOrderService;


/**
* <pre>
* 1. 패키지명 : com.ssocio.sharing.controller.admin
* 2. 타입명 : AdminRentalOrderController.java
* 3. 작성일 : 2015. 10. 20. 오후 2:04:35
* 4. 작성자 : guitarhyo
* 5. 설명 : 렌탈 주문 관리
* </pre>
*/
@Controller
public class AdminRentalOrderController extends AdminReferController {
	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminRentalOrderController.class);
	
	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private AdminRentalOrderService adminRentalOrderService;
	
	
	
	
	/**
	 * <pre>
	 * 판매 주문 내역 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 10. 13. 오전 5:11:21
	 * @author Kang
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectListOrderRental.do")
	public ModelAndView selectListOrderSell(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception {
		
		logger.info("AdminRentalOrderController.selectListOrderSell Start");
		LoggerUtil.writeMap(inParam);
		
		ModelAndView mav = new ModelAndView("admin/order/selectListOrderRental");
		

		String procStatCd[] = request.getParameterValues("PROC_STAT_CD[]");			// 주문상태
		
		// service 호출
		try {
			mav.addObject("list", adminRentalOrderService.selectListRentalOrder(inParam,procStatCd));		
		} 
		catch (Exception e) {
			e.printStackTrace();
		}
		
		logger.info("AdminOrderController.selectListOrderSell End");
		
		return mav;
		
	}
	

	@RequestMapping("/admin/order/selectRentalAgr.do")
	public ModelAndView selectRentalAgr(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("AdminRentalOrderController selectRentalAgr START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		  ModelAndView mav = new ModelAndView("jsonView");
		  try{
			  String PROD_CODE = StringUtil.nvl((String)inParam.get("inputProdCode"),"");
		    mav.addObject("resultAgr", adminRentalOrderService.selectRentalAgr(PROD_CODE));
		  } catch (Exception e) {
			  mav.addObject("resultAgr", "");
		      e.printStackTrace();
		  }
		  return mav;
	}
	
	
	@RequestMapping("/admin/order/rentalOrdCanlPopup.do")
	public ModelAndView procOrdCanlPopup(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("RENTAL ORDER CANCEL POPUP START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			mav.setViewName("admin/order/rentalOrdCanlPopup");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	
	@RequestMapping("/admin/order/updateRentalOrdCncl.do")
	public ModelAndView updateRentalOrdCncl(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("UPDATE ORDER CANCEL START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		try {
			mav.addObject("CNT", adminRentalOrderService.updateRentalOrdCncl(inParam));
			mav.setViewName("jsonView");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * <pre>
	 * 주문 목록 엑셀 다운로드
	 * 주문 목록 조회 결과를 엑셀파일로 다운로드 한다.
	 * @param request
	 * @param response
	 * @param paramDto
	 * @return
	 * @date 2015. 7. 13. 오후 2:58:05
	 * @author S.B.LEE
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/order/selectRentalOrdListExcelDownload.do")
	public ModelAndView selectListExcelRentalOrder(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("SELECT ORDER LIST EXCEL DOWNLOAD START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		mav.setViewName("excelDownloadView");
		
		
		LoggerUtil.writeMap(inParam);
		ModelMap mm = new ModelMap();
		
		try {

			String procStatCd[] = request.getParameterValues("PROC_STAT_CD[]");			// 주문상태
			
			String today = StringUtil.getCurrentDate();
			response.setContentType("application/msexcel");
			response.setHeader("Content-Disposition", "attachment; filename="
				+ new String(("orderList").getBytes("KSC5601"),"8859_1") +"_"+today+ ".xls");
			
			mm = adminRentalOrderService.selectListExcelRentalOrder(inParam,procStatCd);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		String SheetName = "렌탈 주문조회";
		

		
		List<String> excelTitle = new ArrayList<String>();
		excelTitle.add("신청일시");
		excelTitle.add("주문자ID");
		excelTitle.add("주문자명");
		excelTitle.add("판매자ID");
		excelTitle.add("판매자명");
		excelTitle.add("판매구분");
		excelTitle.add("상품명");
		excelTitle.add("신청상태");
		excelTitle.add("신청자명");
		excelTitle.add("우편번호");
		excelTitle.add("주소");
		excelTitle.add("주소상세");
		excelTitle.add("연락처");
		excelTitle.add("연락가능시간");
		excelTitle.add("이메일");
		excelTitle.add("주문동의서(Y/N)");
		excelTitle.add("상품코드");
		excelTitle.add("상품일련번호");
		
		List<String> CellName = new ArrayList<String>();
		CellName.add("REGIST_DT");
		CellName.add("ORD_MBER_EMAIL");
		CellName.add("ORD_MBER_NM");
		CellName.add("SELL_MBER_EMAIL");
		CellName.add("SELL_MBER_NM");
		CellName.add("SELL_MBER_GB_CD_NM");
		CellName.add("PROD_NM");
		CellName.add("PROC_STAT_CD_NM");
		CellName.add("RCV_NM");
		CellName.add("ZIP_CD");
		CellName.add("JUSO_DORO");
		CellName.add("JUSO_DTL");
		CellName.add("TEL");
		CellName.add("CALLTIME");
		CellName.add("EMAIL");
		CellName.add("AGR_YN");
		CellName.add("PROD_CODE");
		CellName.add("REQ_SEQ");
		
		mav.addObject("SheetName", SheetName);
		mav.addObject("excelTitle", excelTitle);
		mav.addObject("CellName", CellName);
		System.out.println(mm);
		mav.addObject("excelList", mm.get("selectListRentalOrdExcel"));
		mav.addObject("param", inParam);
		return mav;
	}
	
	
}
