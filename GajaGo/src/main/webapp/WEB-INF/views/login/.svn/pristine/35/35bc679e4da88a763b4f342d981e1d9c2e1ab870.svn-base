package com.ssocio.sharing.controller.admin;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.ssocio.sharing.cmmn.service.CommonService;
import com.ssocio.sharing.cmmn.util.LoggerUtil;
import com.ssocio.sharing.service.admin.AdminNoticeService;

/**
 * <pre>
 * 콩통 컨트롤러
 * 콩통 처리를 위한 컨트롤러
 * @author J.K.CHOI
 * @version
 * @since 2015. 7. 17. 오후 7:18:35
 * @see
 * @History
 * Date			|	author	| 변경 내용
 * 2015. 7. 17.	|	J.K.CHOI	|신규
 * @비고
 * </pre>
 */
@Controller
public class AdminNoticeController extends AdminReferController {

	// --------------------------------------------------------------------------
	// # Log 설정
	// --------------------------------------------------------------------------
	private static final Logger logger = LoggerFactory.getLogger(AdminNoticeController.class);

	// --------------------------------------------------------------------------
	// # Service 설정
	// --------------------------------------------------------------------------
	@Autowired
	private AdminNoticeService adminNoticeService;

	@Autowired
	private CommonService commonService;







	/**
	 * <pre>
	 * 공지사항 리스트 조회
	 * 공지사항 리스트 조회
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/notice/selectListNotice.do")
	public ModelAndView selectListNotice(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam) throws Exception{
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("NOTICE LIST START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();

		try {
			mav.addObject("list", adminNoticeService.selectListNotice(inParam));			//공지사항 리스트
			mav.addObject("params", inParam);
			mav.setViewName("admin/notice/selectListNotice");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 등록화면 이동
	 *
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/notice/insertNotice.do")
	public ModelAndView insertNotice(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("NOTICE INSERT VIEW START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		LoggerUtil.writeMap(inParam);
		try {
			mav.addObject("IU", "I");																		//등록(I) or 수정(U) FLAG
			mav.addObject("params", inParam);
			mav.setViewName("admin/notice/insertNotice");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 수정화면 이동
	 *
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 2:21:41
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/notice/updateNotice.do")
	public ModelAndView updateNotice(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("NOTICE UPDATE VIEW START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView();
		try {
			mav.addObject("IU", "U");																		//등록(I) or 수정(U) FLAG
			mav.addObject("selectNotice", adminNoticeService.selectNotice(inParam).get("selectNotice"));	//공지사항 상세조회
			mav.addObject("params", inParam);
			mav.setViewName("admin/notice/insertNotice");
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
	/**
	 * <pre>
	 * 공지사항 등록
	 * 공지사항 등록
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 3:18:21
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/notice/insertNoticeReg.do")
	public ModelAndView insertNoticeReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("NOTICE INSERT REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView mav = new ModelAndView("jsonView");
		int retVal = 0;
		try {
			retVal = adminNoticeService.insertNoticeReg(inParam, request);
		} catch (Exception e) {
			e.printStackTrace();
		}

		/* 푸시 중복 개발로 인하여 주석처리 추후 삭제 예정
		try{
			if(retVal == 1){
				commonService.sendPush(inParam, (String)inParam.get("BOARD_TYPE_CD"), "", (String)inParam.get("TITLE"));
			}
		}catch (Exception e){
			e.printStackTrace();
		}
		*/

		return mav;
	}

	/**
	 * <pre>
	 * 공지사항 수정
	 * 공지사항 수정
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 17. 오후 3:30:24
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/notice/updateNoticeReg.do")
	public ModelAndView updateNoticeReg(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("NOTICE UPDATE REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView  mav = new ModelAndView("jsonView");
		try {
			adminNoticeService.updateNoticeReg(inParam, request);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}

	/**
	 * <pre>
	 * 공지사항 삭제
	 * 공지사항 삭제
	 * @param request
	 * @param response
	 * @param inParam
	 * @return
	 * @throws Exception
	 * @date 2015. 7. 13 오후 3:18:21
	 * @author J.K.CHOI
	 * @see com.ssocio.sharing.controller.admin
	 * </pre>
	 */
	@RequestMapping("/admin/notice/deleteNotice.do")
	public ModelAndView deleteNotice(HttpServletRequest request, HttpServletResponse response, @RequestParam Map<String, Object> inParam ) throws Exception {
		logger.info("☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★");
		logger.info("NOTICE DELETE REG START");
		logger.info("★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆");
		ModelAndView  mav = new ModelAndView("jsonView");
		try {
			adminNoticeService.deleteNotice(inParam);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return mav;
	}
}
